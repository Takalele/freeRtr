--- @compiler prefix-code
org 10000h
firstbyte:

mov r12,offset lastbyte
orr r12,r12,offset lastbyte!8
orr r12,r12,offset lastbyte!16
orr r12,r12,offset lastbyte!24

;proctab...
mov r0,procTable_max
orr r0,r0,procTable_max!8
add r12,r12,r0 lsl 2
add r12,r12,20h
;stack...
mov r0,program_stack
orr r0,r0,program_stack!8
orr r0,r0,program_stack!16
orr r0,r0,program_stack!24
add r12,r12,r0
mov sp,r12
add r12,r12,20h
;heap...
mov r0,program_heap
orr r0,r0,program_heap!8
orr r0,r0,program_heap!16
orr r0,r0,program_heap!24
add r1,r0,r12
add r1,r1,20h
;extmem...
mov r0,offset extMemBegin
orr r0,r0,offset extMemBegin!8
orr r0,r0,offset extMemBegin!16
orr r0,r0,offset extMemBegin!24
str r1,[r0]

;copy romdrive...
mov r0,memorySize
orr r0,r0,memorySize!8
orr r0,r0,memorySize!16
orr r0,r0,memorySize!24
mov r1,offset lastbyte
orr r1,r1,offset lastbyte!8
orr r1,r1,offset lastbyte!16
orr r1,r1,offset lastbyte!24
mov r2,r0 lsr 1
sub r3,r2,r1
mov r3,r3 lsr 2
copy_j1:
ldr r0,[r1]
str r0,[r2]
add r1,r1,4
add r2,r2,4
subs r3,r3,1
bne copy_j1

b program_main
;-----------------------------------------------------------

;-----------------------------------------------------------
proc div32u
;in:  r0-divident...
;     r1-divisor...
;out: r2-remainder...
;     r3-result...
mov r2,1                        ;current bit...
mov r3,0                        ;the result...
cmp r1,0
bxeq lr
div32u_j1:
tst r1,80000000h!24
bne div32u_j2
cmp r0,r1
blo div32u_j2
mov r1,r1 lsl 1
mov r2,r2 lsl 1
b div32u_j1
div32u_j2:
cmp r0,r1
subhs r0,r0,r1
orrhs r3,r3,r2
mov r1,r1 lsr 1
mov r2,r2 lsr 1
cmp r2,0
bne div32u_j2
mov r2,r0
bx lr
endp
;-----------------------------------------------------------

;-----------------------------------------------------------
proc div32s
;in:  r0-divident...
;     r1-divisor...
;out: r2-remainder...
;     r3-result...
;     r4,r5-destroyed...
bic r4,lr,3
tst r0,80000000h!24
orrne r4,r4,3
rsbne r0,r0,0
tst r1,80000000h!24
eorne r4,r4,2
rsbne r1,r1,0
bl div32u
bic lr,r4,3
tst r4,2
rsbne r3,r3,0
tst r4,1
rsbne r2,r2,0
bx lr
endp
;-----------------------------------------------------------


;-----------------------------------------------------------
proc receiveChars
mov r2,offset consoleWrt
orr r2,r2,offset consoleWrt!8
orr r2,r2,offset consoleWrt!16
orr r2,r2,offset consoleWrt!24
mov r3,offset consoleBuf
orr r3,r3,offset consoleBuf!8
orr r3,r3,offset consoleBuf!16
orr r3,r3,offset consoleBuf!24
ldr r4,[r2]
receiveChars_j1:
mov r1,uartRxStat
orr r1,r1,uartRxStat!8
orr r1,r1,uartRxStat!16
orr r1,r1,uartRxStat!24
ldrb r1,[r1]
and r1,r1,uartRxMask
mov r0,uartRxNeed
cmp r0,r1
bne receiveChars_j2
mov r1,uartRxData
orr r1,r1,uartRxData!8
orr r1,r1,uartRxData!16
orr r1,r1,uartRxData!24
ldrb r0,[r1]
and r4,r4,0ffh
strb r0,[r3+r4]
add r4,r4,1
b receiveChars_j1
receiveChars_j2:
and r4,r4,0ffh
str r4,[r2]
bx lr
endp
;-----------------------------------------------------------

;-----------------------------------------------------------
proc sendOneChar
mov r1,uartTxStat
orr r1,r1,uartTxStat!8
orr r1,r1,uartTxStat!16
orr r1,r1,uartTxStat!24
ldrb r1,[r1]
and r1,r1,uartTxMask
mov r0,uartTxNeed
cmp r0,r1
bne receiveChars
mov r1,uartTxData
orr r1,r1,uartTxData!8
orr r1,r1,uartTxData!16
orr r1,r1,uartTxData!24
ldrb r0,[r10]
strb r0,[r1]
add r10,r10,1
sub r8,r8,1
b receiveChars
endp
;-----------------------------------------------------------

---

--- @compiler postfix-code
;-----------------------------------------------------------
align 10h
consoleBuf db 256 dup (0)
consoleWrt dd 0
consoleRed dd 0
extMemBegin dd ?  ;crc
lastbyte:
---

--- terminate
@_j1:
b @_j1
---

--- sleep
---

--- memcopy
cmp r8,0
beq @_j2
@_j1:
ldrb r0,[r10]
strb r0,[r11]
add r10,r10,1
add r11,r11,1
subs r8,r8,1
bne @_j1
@_j2:
---

--- memfillbyte
cmp r8,0
beq @_j2
@_j1:
strb r6,[r11]
add r11,r11,1
subs r8,r8,1
bne @_j1
@_j2:
---

--- memcopy2
cmp r8,0
beq @_j3
cmp r10,r11
bhi @_j2
add r10,r10,r8
add r11,r11,r8
@_j1:
sub r10,r10,1
sub r11,r11,1
ldrb r0,[r10]
strb r0,[r11]
subs r8,r8,1
bne @_j1
b @_j3
@_j2:
ldrb r0,[r10]
strb r0,[r11]
add r10,r10,1
add r11,r11,1
subs r8,r8,1
bne @_j2
@_j3:
---

--- codecopy
cmp r8,0
beq @_j2
@_j1:
ldrb r0,[r10]
strb r0,[r11]
add r10,r10,1
add r11,r11,1
subs r8,r8,1
bne @_j1
@_j2:
---

--- memresize
mov r0,offset extMemBegin
orr r0,r0,offset extMemBegin!8
orr r0,r0,offset extMemBegin!16
orr r0,r0,offset extMemBegin!24
ldr r11,[r0]
mov r0,memorySize
orr r0,r0,memorySize!8
orr r0,r0,memorySize!16
orr r0,r0,memorySize!24
sub r8,r0,r11
---

--- system.uptimeinfo
mov r6,0
mov r8,0
mov r9,1
---

--- file.open
mov r7,1
---

--- file.read
mov r7,1
---

--- file.getsize
mov r7,1
---

--- file.close
mov r7,1
---

--- file.myparam
sub r11,r11,1
mov r0,0
sub r0,r0,1
str r0,[r11]
mov r0,offset extMemBegin
orr r0,r0,offset extMemBegin!8
orr r0,r0,offset extMemBegin!16
orr r0,r0,offset extMemBegin!24
ldr r1,[r0]
str r1,[r11+4]
mov r0,memorySize
orr r0,r0,memorySize!8
orr r0,r0,memorySize!16
orr r0,r0,memorySize!24
mov r1,r0 lsr 1
str r1,[r11+8]
mov r1,79
str r1,[r11+12]
mov r1,24
str r1,[r11+14]
mov r8,15
---

--- console.write
@_j1:
cmp r8,0
beq @_j2
mov r5,lr
bl sendOneChar
mov lr,r5
b @_j1
@_j2:
---

--- console.read
mov r5,lr
bl receiveChars
mov lr,r5
mov r1,offset consoleRed
orr r1,r1,offset consoleRed!8
orr r1,r1,offset consoleRed!16
orr r1,r1,offset consoleRed!24
mov r2,offset consoleWrt
orr r2,r2,offset consoleWrt!8
orr r2,r2,offset consoleWrt!16
orr r2,r2,offset consoleWrt!24
ldr r5,[r1]
ldr r4,[r2]
cmp r5,r4
beq @_j1
mov r3,offset consoleBuf
orr r3,r3,offset consoleBuf!8
orr r3,r3,offset consoleBuf!16
orr r3,r3,offset consoleBuf!24
and r5,r5,0ffh
ldrb r0,[r3+r5]
strh r0,[r11]
add r5,r5,1
and r5,r5,0ffh
str r5,[r1]
b @_j2
@_j1:
mov r1,8000h!8
str r1,[r11]
@_j2:
mov r8,2
---

--- console.iskey
mov r5,lr
bl receiveChars
mov lr,r5
mov r1,offset consoleRed
orr r1,r1,offset consoleRed!8
orr r1,r1,offset consoleRed!16
orr r1,r1,offset consoleRed!24
mov r2,offset consoleWrt
orr r2,r2,offset consoleWrt!8
orr r2,r2,offset consoleWrt!16
orr r2,r2,offset consoleWrt!24
ldr r1,[r1]
ldr r2,[r2]
mov r6,0
cmp r1,r2
movne r6,1
---

--- console.getdate
mov r6,1999
mov r7,1
mov r8,2
---

--- console.gettime
mov r6,1
mov r7,2
mov r8,3
---
