Const
  True=1;
  False=0;

Function ExtendedMemoryResize(var ptr:pointer;siz:longint):longint;
Begin;
asm VarAddr src siz;
asm movR dudud c [src];
asm sysCall MemResize;
asm VarAddr src ptr;
asm AddrLod src [src];
asm AddrSav [src] trg;
asm VarAddr src @result;
asm movW dudud [src] c;
End;

Procedure Relequish;
Begin;
asm sysCall sleep;
End;

Procedure Halt(err:Word);
Begin;
asm VarAddr src err;
asm movR duwuw a [src];
asm sysCall terminate;
End;

Procedure Write(a:String);
Begin;
asm VarAddr src a;
asm movR dudub c [src];
asm add ? src 1;
asm sysCall console.write;
End;

Procedure WriteLn(a:String);
Begin;
Write(a);
Write(#13#10);
End;

function BStr(num:LongInt):string;
Begin;
asm VarAddr trg @result;
asm sub b a a;
asm movW dubub [trg] a;
asm VarAddr src num;
asm movR dudud c [src];
asm comp sdsd c 0;
asm jmpc ae @j1;
asm neg d c;
asm move ubub a 1;
asm movW dubub [trg+0] a;
asm move ubub a #-;
asm movW dubub [trg+1] a;
asm label @j1;
asm add ? trg 64;
asm sub b d d;
asm label @j2;
asm move udud a c;
asm mod ud a 10;
asm div ud c 10;
asm add b a #0;
asm movW dubub [trg] a;
asm add ? trg 1;
asm add b d 1;
asm comp udud c 0;
asm jmpc a @j2;
asm move u?u? src trg;
asm VarAddr trg @result;
asm movR du?ub a [trg];
asm add b d a;
asm movW dubub [trg] d;
asm add ? trg a;
asm label @j3;
asm sub ? src 1;
asm sub b d 1;
asm comp sbsb d 0;
asm jmpc b @j4;
asm movR dubub a [src];
asm add ? trg 1;
asm movW dubub [trg] a;
asm jump @j3;
asm label @j4;
End;

Function BVal(str:String):LongInt;
Var sig:boolean;
Begin;
asm VarAddr src str;
asm movR duwub c [src];
asm sub w d d;
asm VarAddr trg sig;
asm movW dubub [trg] d;
asm label @j1;
asm call @get;
asm sub d d d;
asm comp uwuw a 256;
asm jmpc ae @err;
asm comp ubub a #+;
asm jmpc e @j1;
asm comp ubub a #-;
asm jmpc e @j2;
asm comp ubub a # ;
asm jmpc e @j1;
asm comp ubub a #$;
asm jmpc e @hex;
asm sub ? src 1;
asm add w c 1;
asm jump @dec;
asm label @j2;
asm VarAddr trg sig;
asm movR dubub a [trg];
asm xor b a 1;
asm movW dubub [trg] a;
asm jump @j1;
asm label @find;
asm comp ubub a #0;
asm jmpc b @find_j1;
asm comp ubub a #9;
asm jmpc a @find_j1;
asm sub b a #0;
asm ret;
asm label @find_j1;
asm comp ubub a #a;
asm jmpc b @find_j2;
asm comp ubub a #f;
asm jmpc a @find_j2;
asm sub b a #a;
asm add b a 10;
asm ret;
asm label @find_j2;
asm move ubub a 64;
asm ret;
asm label @get;
asm move uwuw a 4096;
asm comp swsw c 0;
asm jmpc be @get_j1;
asm add ? src 1;
asm movR dudub a [src];
asm sub w c 1;
asm label @get_j1;
asm comp ubub a #A;
asm jmpc b @get_j2;
asm comp ubub a #Z;
asm jmpc a @get_j2;
asm sub b a #A;
asm add b a #a;
asm label @get_j2;
asm ret;
asm label @dec;
asm call @get;
asm comp uwuw a 256;
asm jmpc ae @vege;
asm call @find;
asm comp ubub a 10;
asm jmpc ae @err;
asm mul sd d 10;
asm add d d a;
asm jump @dec;
asm label @hex;
asm call @get;
asm comp uwuw a 256;
asm jmpc ae @vege;
asm call @find;
asm comp ubub a 16;
asm jmpc ae @err;
asm mul sd d 16;
asm add d d a;
asm jump @hex;
asm label @err;
asm sub d d d;
asm label @vege;
asm VarAddr trg sig;
asm movR dubub a [trg];
asm comp ubub a 0;
asm jmpc e @vege_j1;
asm neg d d;
asm label @vege_j1;
asm VarAddr trg @result;
asm movW dsdsd [trg] d;
End;

Function Ord(chr:Char):Byte;
Begin;
asm VarAddr src chr;
asm varAddr trg @result;
asm movR dubub a [src];
asm movW dubub [trg] a;
End;

Function Chr(num:Byte):Char;
Begin;
asm VarAddr src num;
asm varAddr trg @result;
asm movR dubub a [src];
asm movW dubub [trg] a;
End;

Function Copy(Str:String;idx:Integer;cnt:Integer):String;
Begin;
asm VarAddr src str;
asm movR du?ub c [src];
asm VarAddr trg idx;
asm movR ds?sw a [trg];
asm comp swsw a 1;
asm jmpc a @j1;
asm move s?s? a 1;
asm label @j1;
asm add ? src a;
asm sub ? c a;
asm add ? c 1;
asm varAddr trg cnt;
asm movR ds?sw d [trg];
asm comp swsw c d;
asm jmpc b @j2;
asm move s?s? c d;
asm label @j2;
asm comp s?s? c 0;
asm jmpc a @j3;
asm move s?s? c 0;
asm label @j3;
asm varAddr trg @result;
asm movW dubub [trg] c;
asm add ? trg 1;
asm sysCall MemCopy;
End;

Function Length(str:String):Integer;
Begin;
asm VarAddr src str;
asm VarAddr trg @result;
asm movR duwub a [src];
asm movW dswsw [trg] a;
End;

Procedure FillChar(var Dest;cnt:LongInt;val:Byte);
Begin;
asm VarAddr src dest;
asm AddrLod trg [src];
asm VarAddr src cnt;
asm movR ds?s? c [src];
asm VarAddr src val;
asm movR dubub a [src];
asm sysCall memFillByte;
End;

Procedure Move(var Source;var Dest;Count:LongInt);
Begin;
asm VarAddr src count;
asm movR ds?s? c [src];
asm VarAddr src source;
asm VarAddr trg dest;
asm AddrLod src [src];
asm AddrLod trg [trg];
asm sysCall MemCopy2;
End;

Function Abs(num:LongInt):LongInt;
Begin;
asm VarAddr src num;
asm VarAddr trg @result;
asm movR dsdsd a [src];
asm comp sdsd a 0;
asm jmpc ae @j1;
asm neg d a;
asm label @j1;
asm movW dsdsd [trg] a;
End;

Function UpCase(chr:Char):Char;
Begin;
asm varAddr src chr;
asm VarAddr trg @result;
asm movR dubub a [src];
asm comp ubub a #a;
asm jmpc b @j1;
asm comp ubub a #z;
asm jmpc a @j1;
asm sub b a #a;
asm add b a #A;
asm label @j1;
asm movW dubub [trg] a;
End;

Function LowCase(chr:Char):Char;
Begin;
asm varAddr src chr;
asm VarAddr trg @result;
asm movR dubub a [src];
asm comp ubub a #A;
asm jmpc b @j1;
asm comp ubub a #Z;
asm jmpc a @j1;
asm sub b a #A;
asm add b a #a;
asm label @j1;
asm movW dubub [trg] a;
End;

Function Pos(Substr:String;Str:String):Byte;
Label Vege;
Var i,o:Word;
Begin;
o:=length(substr);
for i:=1 to Length(str) do if (Substr=Copy(str,i,o)) then Goto Vege;
i:=0;
Vege:
Pos:=i;
End;

Procedure Delete(var str:String;idx,cnt:Integer);
Begin;
str:=copy(str,1,idx-1)+copy(str,idx+cnt,255);
End;

Procedure Insert(src:String;var Str:String;idx:Integer);
Begin;
str:=copy(str,1,idx-1)+src+copy(str,idx,255);
End;
