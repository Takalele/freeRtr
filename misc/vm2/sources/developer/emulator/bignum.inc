Procedure doDivS32(var a,b:LongInt);
Label f1;
Var n1,n2:BigNumContextRecord;
Begin;
if (b=0) then begin; f1:a:=0;b:=$ffffffff;exit; end;
if (a=$80000000) and (b=-1) then goto f1;
BigNumStoreInt(a,n1);
BigNumStoreInt(b,n2);
if (a<0) then BigNumNeg(n1,n1);
if (b<0) then BigNumNeg(n2,n2);
BigNumDiv(n1,n2,n1,n2);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,b,n2);
a:=ReadLongLSB(n2);
b:=0;
End;

Procedure doDivU32(var a,b:LongInt);
Var n1,n2:BigNumContextRecord;
Begin;
if (b=0) then begin; a:=0;b:=$ffffffff;exit; end;
BigNumStoreInt(a,n1);
BigNumStoreInt(b,n2);
BigNumDiv(n1,n2,n1,n2);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,b,n2);
a:=ReadLongLSB(n2);
b:=0;
End;

Procedure doDivU64(var a,b,c:longint);
Var n1,n2,n3:BigNumContextRecord;
Begin;
BigNumStoreInt(a,n1);
BigNumShl(32,n1,n1);
BigNumStoreInt(b,n2);
BigNumOr(n1,n2,n1);
BigNumStoreInt(c,n2);
BigNumDiv(n1,n2,n1,n2);
fillchar(n3,sizeof(n3),0);
BigNumConvBN2LSB(n1,a,n3);
a:=ReadLongLSB(n3);
fillchar(n3,sizeof(n3),0);
BigNumConvBN2LSB(n2,b,n3);
b:=ReadLongLSB(n3);
End;

Procedure doDivS64(var a,b,c:longint);
Var n1,n2,n3:BigNumContextRecord;
Begin;
BigNumStoreInt(a,n1);
BigNumShl(32,n1,n1);
BigNumStoreInt(b,n2);
BigNumOr(n1,n2,n1);
BigNumStoreInt(c,n2);
if (a<0) then BigNumNeg(n1,n1);
if (c<0) then BigNumNeg(n2,n2);
BigNumDiv(n1,n2,n1,n2);
fillchar(n3,sizeof(n3),0);
BigNumConvBN2LSB(n1,a,n3);
a:=ReadLongLSB(n3);
fillchar(n3,sizeof(n3),0);
BigNumConvBN2LSB(n2,b,n3);
b:=ReadLongLSB(n3);
End;



Procedure doMulS32h(var a,b:LongInt);
Var n1,n2:BigNumContextRecord;
Begin;
BigNumStoreInt(a,n1);
BigNumStoreInt(b,n2);
if (a<0) then BigNumNeg(n1,n1);
if (b<0) then BigNumNeg(n2,n2);
BigNumMul(n1,n2,n1);
BigNumShr(32,n1,n1);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,b,n2);
a:=ReadLongLSB(n2);
End;

Procedure doMulU32h(var a,b:LongInt);
Var n1,n2:BigNumContextRecord;
Begin;
BigNumStoreInt(a,n1);
BigNumStoreInt(b,n2);
BigNumMul(n1,n2,n1);
BigNumShr(32,n1,n1);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,b,n2);
a:=ReadLongLSB(n2);
End;

Procedure doMul32l(var a,b:LongInt);
Var n1,n2:BigNumContextRecord;
Begin;
BigNumStoreInt(a,n1);
BigNumStoreInt(b,n2);
BigNumMul(n1,n2,n1);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,b,n2);
a:=ReadLongLSB(n2);
End;

Procedure doMulS32hl(var a,b:LongInt);
Var n1,n2:BigNumContextRecord;
Begin;
BigNumStoreInt(a,n1);
BigNumStoreInt(b,n2);
if (a<0) then BigNumNeg(n1,n1);
if (b<0) then BigNumNeg(n2,n2);
BigNumMul(n1,n2,n1);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,b,n2);
b:=ReadLongLSB(n2);
BigNumShr(32,n1,n1);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,a,n2);
a:=ReadLongLSB(n2);
End;

Procedure doMulU32hl(var a,b:LongInt);
Var n1,n2:BigNumContextRecord;
Begin;
BigNumStoreInt(a,n1);
BigNumStoreInt(b,n2);
BigNumMul(n1,n2,n1);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,b,n2);
b:=ReadLongLSB(n2);
BigNumShr(32,n1,n1);
fillchar(n2,sizeof(n2),0);
BigNumConvBN2LSB(n1,a,n2);
a:=ReadLongLSB(n2);
End;
