Function DisAssemblerBinaryCode(src:String;use32:Boolean):String;
Label f1,f2,f3,vege;
Const
  Reg8:array[0..7] of string[2]=('al','cl','dl','bl','ah','ch','dh','bh');
  Reg16:array[0..7] of string[2]=('ax','cx','dx','bx','sp','bp','si','di');
  RegS:array[0..7] of string[2]=('es','cs','ss','ds','fs','gs','??','??');
  Conds:array[0..15] of string[2]=('o','no','c','nc','z','nz','na','a',
                                  's','ns','p','np','l','nl','ng','g');
  Sizes:array[1..4] of string[5]=('byte','word','???','dword');
  ExtCode1:array[0..7] of string[3]=('add','or','adc','sbb','and','sub','xor','cmp');
  ExtCode2:array[0..7] of string[3]=('rol','ror','rcl','rcr','shl','shr','sal','sar');
  ExtCode3:array[0..7] of string[4]=('test','???','not','neg','mul','imul','div','idiv');
  ExtCode4:array[0..7] of string[9]=('inc','dec','call near','call far','jmp near','jmp far','push','???');
  ExtCode5:array[0..7] of string[4]=('sldt','str','lldt','ltr','verr','verw','???','???');
  ExtCode6:array[0..7] of string[6]=('sgdt','sidt','lgdt','lidt','smsw','???','lmsw','invlpg');
  ExtCode7:array[0..7] of string[3]=('???','???','???','???','bt','bts','btr','btc');
  ExtCode8:array[0..7] of string[9]=('???','cmpxchg8b','???','???','???','???','???','???');
Var
  PrefixBytes:Byte;
  PrefixData:String;
  resD:String;
  resS:^byte;
  PrefixCS,PrefixSS:Boolean;
  PrefixDS,PrefixES:Boolean;
  PrefixFS,PrefixGS:Boolean;
  PrefixME,PrefixOP:Boolean;
  PrefixLK,PrefixRE,PrefixRN:Boolean;

Procedure CreateResS;
Var
  pp:Pointer;
  pd:LongInt absolute pp;
Begin;
pp:=@resD;
inc(pd);
resS:=pp^;
resD:='';
End;


Function GetBytes(var i:LongInt;s:Byte):Boolean;
Var
  buf:array[1..8] of byte absolute i;
Begin;
GetBytes:=True;
i:=0;
if (s>sizeof(i)) then Exit;
if (length(src)<s) then Exit;
move(src[1],buf,s);
delete(src,1,s);
i:=ReadLongLSB(buf);
GetBytes:=False;
End;


Function GetRegisterName(num,siz:byte;ext:boolean):String;
Var a:string[7];
Begin;
GetRegisterName:='???';
if (num>7) then exit;
case siz of
  32:a:='e'+reg16[num];
  16:begin;
    a:=reg16[num];
    if ext then a:='e'+a;
    end;
  8:a:=reg8[num];
  else exit;
  end;
GetRegisterName:=a;
End;

Function GetStringByteEnding(wide:boolean):String;
Var a:String;
Begin;
if PrefixOP then a:='d' else a:='w';
if not wide then a:='b';
if PrefixCS then a:=a+',cs';
if PrefixSS then a:=a+',ss';
if PrefixDS then a:=a+',ds';
if PrefixES then a:=a+',es';
if PrefixFS then a:=a+',fs';
if PrefixGS then a:=a+',gs';
if PrefixME then a:=a+',ptr32';
a[2]:=' ';
GetStringByteEnding:=a;
End;

Function GetSegmentPrefixes:String;
Var a:String[7];
Begin;
a:='';
if PrefixCS then a:='cs';
if PrefixSS then a:='ss';
if PrefixDS then a:='ds';
if PrefixES then a:='es';
if PrefixFS then a:='fs';
if PrefixGS then a:='gs';
if (a='') then a:='def';
GetSegmentPrefixes:=a;
End;

Function DecodeMemoryRegPart(op,siz:byte):String;
Begin;
op:=(op shr 3) and 7;
DecodeMemoryRegPart:=GetRegisterName(op,siz,PrefixOP);
End;

Function DecodeMemoryMemPart(op,siz:byte):String;
Label f1,vege;
Var
  a:String[63];
  i:LongInt;

Procedure DecodeSIB(extraCase:boolean);
Var
  i,o:LongInt;
  b:String[15];
Begin;
inc(PrefixBytes,1);
if GetBytes(o,1) then Exit;
case o and 7 of
  0:a:='eax';
  1:a:='ecx';
  2:a:='edx';
  3:a:='ebx';
  4:a:='esp';
  5:if extraCase then begin;
    inc(PrefixBytes,4);
    if GetBytes(i,4) then Exit;
    a:=disAsm2hex(i,4);
    end else a:='ebp';
  6:a:='esi';
  7:a:='edi';
  end;
case (o shr 3) and 7 of
  0:b:='eax';
  1:b:='ecx';
  2:b:='edx';
  3:b:='ebx';
  4:b:='';
  5:b:='ebp';
  6:b:='esi';
  7:b:='edi';
  end;
o:=o shr 6;
if (b<>'') then b:='+'+b+'*'+BStr(1 shl o);
a:=a+b;
End;

Begin;
DecodeMemoryMemPart:='[???]';
if (op and $c0=$c0) then begin;
  DecodeMemoryMemPart:=GetRegisterName(op and 7,siz,PrefixOP);
  Exit;
  end;
if PrefixME then goto f1;
if (op and $c0=$00) then begin;
  case op and 7 of
    0:a:='bx+si';
    1:a:='bx+di';
    2:a:='bp+si';
    3:a:='bp+di';
    4:a:='si';
    5:a:='di';
    6:begin;
      inc(PrefixBytes,2);
      if GetBytes(i,2) then Exit;
      a:=disAsm2hex(i,2);
      end;
    7:a:='bx';
    else exit;
    end;
  goto vege;
  end;
if (op and $c0=$40) then begin;
  case op and 7 of
    0:a:='bx+si';
    1:a:='bx+di';
    2:a:='bp+si';
    3:a:='bp+di';
    4:a:='si';
    5:a:='di';
    6:a:='bp';
    7:a:='bx';
    else exit;
    end;
  inc(PrefixBytes,1);
  if GetBytes(i,1) then Exit;
  a:=a+'+'+disAsm2hex(i,1);
  goto vege;
  end;
if (op and $c0=$80) then begin;
  case op and 7 of
    0:a:='bx+si';
    1:a:='bx+di';
    2:a:='bp+si';
    3:a:='bp+di';
    4:a:='si';
    5:a:='di';
    6:a:='bp';
    7:a:='bx';
    else exit;
    end;
  inc(PrefixBytes,2);
  if GetBytes(i,2) then Exit;
  a:=a+'+'+disAsm2hex(i,2);
  goto vege;
  end;
exit;

f1:
if (op and $c0=$00) then begin;
  case op and 7 of
    0:a:='eax';
    1:a:='ecx';
    2:a:='edx';
    3:a:='ebx';
    4:DecodeSIB(true);
    5:begin;
      inc(PrefixBytes,4);
      if GetBytes(i,4) then Exit;
      a:=disAsm2hex(i,4);
      end;
    6:a:='esi';
    7:a:='edi';
    else exit;
    end;
  goto vege;
  end;
if (op and $c0=$40) then begin;
  case op and 7 of
    0:a:='eax';
    1:a:='ecx';
    2:a:='edx';
    3:a:='ebx';
    4:DecodeSIB(false);
    5:a:='ebp';
    6:a:='esi';
    7:a:='edi';
    else exit;
    end;
  inc(PrefixBytes,1);
  if GetBytes(i,1) then Exit;
  a:=a+'+'+disAsm2hex(i,1);
  goto vege;
  end;
if (op and $c0=$80) then begin;
  case op and 7 of
    0:a:='eax';
    1:a:='ecx';
    2:a:='edx';
    3:a:='ebx';
    4:DecodeSIB(false);
    5:a:='ebp';
    6:a:='esi';
    7:a:='edi';
    else exit;
    end;
  inc(PrefixBytes,4);
  if GetBytes(i,4) then Exit;
  a:=a+'+'+disAsm2hex(i,4);
  goto vege;
  end;
exit;

vege:
a:=GetSegmentPrefixes+':['+a+']';
case siz of
  8:siz:=1;
  16:if PrefixOP then siz:=4 else siz:=2;
  32:siz:=4;
  end;
if (siz>0) then a:=Sizes[siz]+' '+a;
DecodeMemoryMemPart:=a;
End;

Procedure DecodeOneBaseSextet(i:longint;a:String;siz:byte);
Var o,p:LongInt;
Begin;
i:=i and 7;
case i of
  0:begin;
    if GetBytes(i,1) then Exit;
    a:=a+' '+DecodeMemoryMemPart(i,8)+','+DecodeMemoryRegPart(i,8);
    resD:=chr(PrefixBytes+siz+1)+a;
    end;
  1:begin;
    if GetBytes(i,1) then Exit;
    a:=a+' '+DecodeMemoryMemPart(i,16)+','+DecodeMemoryRegPart(i,16);
    resD:=chr(PrefixBytes+siz+1)+a;
    end;
  2:begin;
    if GetBytes(i,1) then Exit;
    a:=a+' '+DecodeMemoryRegPart(i,8)+','+DecodeMemoryMemPart(i,8);
    resD:=chr(PrefixBytes+siz+1)+a;
    end;
  3:begin;
    if GetBytes(i,1) then Exit;
    a:=a+' '+DecodeMemoryRegPart(i,16)+','+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+siz+1)+a;
    end;
  4:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+siz+1)+a+' al,'+disAsm2hex(i,1);
    end;
  5:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(o,p) then Exit;
    resD:=chr(PrefixBytes+siz+p)+a+' '+GetRegisterName(0,16,PrefixOP)+','+disAsm2hex(o,p);
    end;
  end;
End;

Var
  i,o,p:LongInt;
  a,b:String;
Begin;
CreateResS;
PrefixCS:=False;PrefixSS:=False;
PrefixDS:=False;PrefixES:=False;
PrefixFS:=False;PrefixGS:=False;
PrefixME:=use32;PrefixOP:=use32;
PrefixLK:=False;PrefixRE:=False;PrefixRN:=False;
PrefixBytes:=0;
PrefixData:='';
f1:
if GetBytes(i,1) then goto vege;
resD:=chr(PrefixBytes+1)+'db '+disAsm2hex(i,1);
case i of
  $26:begin;
    inc(PrefixBytes);
    PrefixES:=True;
    goto f1;
    end;
  $2e:begin;
    inc(PrefixBytes);
    PrefixCS:=True;
    goto f1;
    end;
  $36:begin;
    inc(PrefixBytes);
    PrefixSS:=True;
    goto f1;
    end;
  $3e:begin;
    inc(PrefixBytes);
    PrefixDS:=True;
    goto f1;
    end;
  $64:begin;
    inc(PrefixBytes);
    PrefixFS:=True;
    goto f1;
    end;
  $65:begin;
    inc(PrefixBytes);
    PrefixGS:=True;
    goto f1;
    end;
  $66:begin;
    inc(PrefixBytes);
    PrefixOP:=not use32;
    goto f1;
    end;
  $67:begin;
    inc(PrefixBytes);
    PrefixME:=not use32;
    goto f1;
    end;
  $f0:begin;
    inc(PrefixBytes);
    PrefixLK:=True;
    PrefixData:=PrefixData+'lock'#13;
    goto f1;
    end;
  $f2:begin;
    inc(PrefixBytes);
    PrefixRN:=True;
    PrefixData:=PrefixData+'repnz'#13;
    goto f1;
    end;
  $f3:begin;
    inc(PrefixBytes);
    PrefixRE:=True;
    PrefixData:=PrefixData+'rep'#13;
    goto f1;
    end;
  $06:resD:=chr(PrefixBytes+1)+'push es';
  $07:resD:=chr(PrefixBytes+1)+'pop es';
  $0e:resD:=chr(PrefixBytes+1)+'push cs';
  $16:resD:=chr(PrefixBytes+1)+'push ss';
  $17:resD:=chr(PrefixBytes+1)+'pop ss';
  $1e:resD:=chr(PrefixBytes+1)+'push ds';
  $1f:resD:=chr(PrefixBytes+1)+'pop ds';
  $2f:resD:=chr(PrefixBytes+1)+'das';
  $37:resD:=chr(PrefixBytes+1)+'aaa';
  $27:resD:=chr(PrefixBytes+1)+'daa';
  $3f:resD:=chr(PrefixBytes+1)+'aas';
  $90:resD:=chr(PrefixBytes+1)+'nop';
  $9e:resD:=chr(PrefixBytes+1)+'sahf';
  $9f:resD:=chr(PrefixBytes+1)+'lahf';
  $9b:resD:=chr(PrefixBytes+1)+'fwait';
  $c9:resD:=chr(PrefixBytes+1)+'leave';
  $ce:resD:=chr(PrefixBytes+1)+'into';
  $d6:resD:=chr(PrefixBytes+1)+'setalc';
  $f4:resD:=chr(PrefixBytes+1)+'hlt';
  $f5:resD:=chr(PrefixBytes+1)+'cmc';
  $f8:resD:=chr(PrefixBytes+1)+'clc';
  $f9:resD:=chr(PrefixBytes+1)+'stc';
  $fa:resD:=chr(PrefixBytes+1)+'cli';
  $fb:resD:=chr(PrefixBytes+1)+'sti';
  $fc:resD:=chr(PrefixBytes+1)+'cld';
  $fd:resD:=chr(PrefixBytes+1)+'std';
  $40..$47:resD:=chr(PrefixBytes+1)+'inc '+GetRegisterName(i and 7,16,PrefixOP);
  $48..$4f:resD:=chr(PrefixBytes+1)+'dec '+GetRegisterName(i and 7,16,PrefixOP);
  $50..$57:resD:=chr(PrefixBytes+1)+'push '+GetRegisterName(i and 7,16,PrefixOP);
  $58..$5f:resD:=chr(PrefixBytes+1)+'pop '+GetRegisterName(i and 7,16,PrefixOP);
  $91..$97:resD:=chr(PrefixBytes+1)+'xchg '+GetRegisterName(0,16,PrefixOP)+','+GetRegisterName(i and 7,16,PrefixOP);
  $60:begin;
    if PrefixOP then a:='d' else a:='';
    resD:=chr(PrefixBytes+1)+'pusha'+a;
    end;
  $61:begin;
    if PrefixOP then a:='d' else a:='';
    resD:=chr(PrefixBytes+1)+'popa'+a;
    end;
  $9c:begin;
    if PrefixOP then a:='d' else a:='';
    resD:=chr(PrefixBytes+1)+'pushf'+a;
    end;
  $9d:begin;
    if PrefixOP then a:='d' else a:='';
    resD:=chr(PrefixBytes+1)+'popf'+a;
    end;
  $c3:begin;
    if PrefixOP then a:='d' else a:='';
    resD:=chr(PrefixBytes+1)+'ret'+a;
    end;
  $cb:begin;
    if PrefixOP then a:='d' else a:='';
    resD:=chr(PrefixBytes+1)+'retf'+a;
    end;
  $cf:begin;
    if PrefixOP then a:='d' else a:='';
    resD:=chr(PrefixBytes+1)+'iret'+a;
    end;
  $98:begin;
    if PrefixOP then a:='cwde' else a:='cbw';
    resD:=chr(PrefixBytes+1)+a;
    end;
  $99:begin;
    if PrefixOP then a:='cdq' else a:='cwd';
    resD:=chr(PrefixBytes+1)+a;
    end;
  $6c:resD:=chr(PrefixBytes+1)+'ins'+GetStringByteEnding(false);
  $6d:resD:=chr(PrefixBytes+1)+'ins'+GetStringByteEnding(true);
  $6e:resD:=chr(PrefixBytes+1)+'outs'+GetStringByteEnding(false);
  $6f:resD:=chr(PrefixBytes+1)+'outs'+GetStringByteEnding(true);
  $a4:resD:=chr(PrefixBytes+1)+'movs'+GetStringByteEnding(false);
  $a5:resD:=chr(PrefixBytes+1)+'movs'+GetStringByteEnding(true);
  $a6:resD:=chr(PrefixBytes+1)+'cmps'+GetStringByteEnding(false);
  $a7:resD:=chr(PrefixBytes+1)+'cmps'+GetStringByteEnding(true);
  $aa:resD:=chr(PrefixBytes+1)+'stos'+GetStringByteEnding(false);
  $ab:resD:=chr(PrefixBytes+1)+'stos'+GetStringByteEnding(true);
  $ac:resD:=chr(PrefixBytes+1)+'lods'+GetStringByteEnding(false);
  $ad:resD:=chr(PrefixBytes+1)+'lods'+GetStringByteEnding(true);
  $ae:resD:=chr(PrefixBytes+1)+'scas'+GetStringByteEnding(false);
  $af:resD:=chr(PrefixBytes+1)+'scas'+GetStringByteEnding(true);
  $d7:begin;
    a:=GetStringByteEnding(true);
    delete(a,1,1);
    resD:=chr(PrefixBytes+1)+'xlat'+a;
    end;
  $ec:resD:=chr(PrefixBytes+1)+'in al,dx';
  $ed:resD:=chr(PrefixBytes+1)+'in '+GetRegisterName(0,16,PrefixOP)+',dx';
  $ee:resD:=chr(PrefixBytes+1)+'out dx,al';
  $ef:resD:=chr(PrefixBytes+1)+'out dx,'+GetRegisterName(0,16,PrefixOP);
  $cc:resD:=chr(PrefixBytes+1)+'int 3';
  $cd:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'int '+disAsm2hex(i,1);
    end;
  $d4:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'aam '+disAsm2hex(i,1);
    end;
  $d5:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'aad '+disAsm2hex(i,1);
    end;
  $e4:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'in al,'+disAsm2hex(i,1);
    end;
  $e5:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'in '+GetRegisterName(0,16,PrefixOP)+','+disAsm2hex(i,1);
    end;
  $e6:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'out '+disAsm2hex(i,1)+',al';
    end;
  $e7:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'out '+disAsm2hex(i,1)+','+GetRegisterName(0,16,PrefixOP);
    end;
  $9a:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(o,p) then Exit;
    if GetBytes(i,2) then Exit;
    resD:=chr(PrefixBytes+p+3)+'call '+disAsm2hex(i,2)+':'+disAsm2hex(o,p);
    end;
  $ea:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(o,p) then Exit;
    if GetBytes(i,2) then Exit;
    resD:=chr(PrefixBytes+p+3)+'jmp '+disAsm2hex(i,2)+':'+disAsm2hex(o,p);
    end;
  $c8:begin;
    if GetBytes(i,2) then Exit;
    if GetBytes(o,1) then Exit;
    resD:=chr(PrefixBytes+4)+'enter '+disAsm2hex(i,2)+','+disAsm2hex(o,1);
    end;
  $c2:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,p) then Exit;
    resD:=chr(PrefixBytes+p+1)+'ret '+disAsm2hex(i,p);
    end;
  $ca:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,p) then Exit;
    resD:=chr(PrefixBytes+p+1)+'retf '+disAsm2hex(i,p);
    end;
  $b0..$b7:begin;
    if GetBytes(o,1) then Exit;
    resD:=chr(PrefixBytes+2)+'mov '+GetRegisterName(i and 7,8,PrefixOP)+','+disAsm2hex(o,1);
    end;
  $b8..$bf:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(o,p) then Exit;
    resD:=chr(PrefixBytes+p+1)+'mov '+GetRegisterName(i and 7,16,PrefixOP)+','+disAsm2hex(o,p);
    end;
  $a8:begin;
    if GetBytes(o,1) then Exit;
    resD:=chr(PrefixBytes+2)+'test al,'+disAsm2hex(o,1);
    end;
  $a9:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(o,p) then Exit;
    resD:=chr(PrefixBytes+p+1)+'test '+GetRegisterName(0,16,PrefixOP)+','+disAsm2hex(o,p);
    end;
  $a0:begin;
    if GetBytes(i,2) then Exit;
    resD:=chr(PrefixBytes+3)+'mov al,'+GetSegmentPrefixes+':['+disAsm2hex(i,2)+']';
    end;
  $a1:begin;
    if GetBytes(i,2) then Exit;
    resD:=chr(PrefixBytes+3)+'mov '+GetRegisterName(0,16,PrefixOP)+','+GetSegmentPrefixes+':['+disAsm2hex(i,2)+']';
    end;
  $a2:begin;
    if GetBytes(i,2) then Exit;
    resD:=chr(PrefixBytes+3)+'mov '+GetSegmentPrefixes+':['+disAsm2hex(i,2)+'],al';
    end;
  $a3:begin;
    if GetBytes(i,2) then Exit;
    resD:=chr(PrefixBytes+3)+'mov '+GetSegmentPrefixes+':['+disAsm2hex(i,2)+'],'+GetRegisterName(0,16,PrefixOP);
    end;
  $eb:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'jmp byte '#10+BStr(shortint(i));
    end;
  $e9:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,p) then Exit;
    if (p=2) then i:=integer(i);
    resD:=chr(PrefixBytes+p+1)+'jmp '+Sizes[p]+' '#10+BStr(i);
    end;
  $e8:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,p) then Exit;
    if (p=2) then i:=integer(i);
    resD:=chr(PrefixBytes+p+1)+'call '+Sizes[p]+' '#10+BStr(i);
    end;
  $e2:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'loop '#10+BStr(shortint(i));
    end;
  $e1:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'loopz '#10+BStr(shortint(i));
    end;
  $e0:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'loopnz '#10+BStr(shortint(i));
    end;
  $e3:begin;
    if GetBytes(i,1) then Exit;
    if PrefixME then a:='e' else a:='';
    resD:=chr(PrefixBytes+2)+'j'+a+'cxz '#10+BStr(shortint(i));
    end;
  $70..$7f:begin;
    if GetBytes(o,1) then Exit;
    resD:=chr(PrefixBytes+2)+'j'+Conds[i and $f]+' byte '#10+BStr(shortint(o));
    end;
  $6a:begin;
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+2)+'push byte '+disAsm2hex(i,1);
    end;
  $68:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(o,p) then Exit;
    resD:=chr(PrefixBytes+p+1)+'push '+Sizes[p]+' '+disAsm2hex(o,p);
    end;
  $00..$05:DecodeOneBaseSextet(i,'add',1);
  $08..$0d:DecodeOneBaseSextet(i,'or',1);
  $10..$15:DecodeOneBaseSextet(i,'adc',1);
  $18..$1d:DecodeOneBaseSextet(i,'sbb',1);
  $20..$25:DecodeOneBaseSextet(i,'and',1);
  $28..$2d:DecodeOneBaseSextet(i,'sub',1);
  $30..$35:DecodeOneBaseSextet(i,'xor',1);
  $38..$3d:DecodeOneBaseSextet(i,'cmp',1);
  $62:DecodeOneBaseSextet(3,'bound',1);
  $63:DecodeOneBaseSextet(1,'arpl',1);
  $84:DecodeOneBaseSextet(0,'test',1);
  $85:DecodeOneBaseSextet(1,'test',1);
  $86:DecodeOneBaseSextet(0,'xchg',1);
  $87:DecodeOneBaseSextet(1,'xchg',1);
  $88..$8b:DecodeOneBaseSextet(i,'mov',1);
  $8d:DecodeOneBaseSextet(3,'lea',1);
  $c4:DecodeOneBaseSextet(3,'les',1);
  $c5:DecodeOneBaseSextet(3,'lds',1);
  $69:begin;
    DecodeOneBaseSextet(3,'imul',1);
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(o,p) then Exit;
    resD:=resD+','+disAsm2hex(o,p);
    inc(resS^,p);
    end;
  $6b:begin;
    DecodeOneBaseSextet(3,'imul',1);
    if GetBytes(o,1) then Exit;
    resD:=resD+','+disAsm2hex(o,1);
    inc(resS^,1);
    end;
  $d8..$df:goto f2;
  $0f:goto f3;
  $80,$82:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode1[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,8)+',';
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+3)+a+disAsm2hex(i,1);
    end;
  $81:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,1) then Exit;
    a:=ExtCode1[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,8*p)+',';
    if GetBytes(i,p) then Exit;
    resD:=chr(PrefixBytes+p+2)+a+disAsm2hex(i,p);
    end;
  $83:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,1) then Exit;
    a:=ExtCode1[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,8*p)+',';
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+3)+a+disAsm2hex(i,1);
    end;
  $8c:begin;
    if GetBytes(i,1) then Exit;
    a:='mov '+DecodeMemoryMemPart(i,16)+','+RegS[(i shr 3) and 7];
    resD:=chr(PrefixBytes+2)+a;
    end;
  $8e:begin;
    if GetBytes(i,1) then Exit;
    a:='mov '+RegS[(i shr 3) and 7]+','+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+2)+a;
    end;
  $8f:begin;
    if GetBytes(i,1) then Exit;
    a:='pop '+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+2)+a;
    end;
  $c0:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode2[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,8)+',';
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+3)+a+disAsm2hex(i,1);
    end;
  $c1:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode2[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16)+',';
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+3)+a+disAsm2hex(i,1);
    end;
  $c6:begin;
    if GetBytes(i,1) then Exit;
    a:='mov '+DecodeMemoryMemPart(i,8)+',';
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+3)+a+disAsm2hex(i,1);
    end;
  $c7:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,1) then Exit;
    a:='mov '+DecodeMemoryMemPart(i,8*p)+',';
    if GetBytes(i,p) then Exit;
    resD:=chr(PrefixBytes+p+2)+a+disAsm2hex(i,p);
    end;
  $d0:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode2[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,8)+',1';
    resD:=chr(PrefixBytes+2)+a;
    end;
  $d1:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode2[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16)+',1';
    resD:=chr(PrefixBytes+2)+a;
    end;
  $d2:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode2[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,8)+',cl';
    resD:=chr(PrefixBytes+2)+a;
    end;
  $d3:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode2[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16)+',cl';
    resD:=chr(PrefixBytes+2)+a;
    end;
  $f6:begin;
    if GetBytes(i,1) then Exit;
    o:=(i shr 3) and 7;
    a:=ExtCode3[o];
    a:=a+' '+DecodeMemoryMemPart(i,8);
    if (o=0) then begin;
      if GetBytes(i,1) then Exit;
      inc(PrefixBytes,1);
      a:=a+','+disAsm2hex(i,1);
      end;
    resD:=chr(PrefixBytes+2)+a;
    end;
  $f7:begin;
    if PrefixOP then p:=4 else p:=2;
    if GetBytes(i,1) then Exit;
    o:=(i shr 3) and 7;
    a:=ExtCode3[o];
    a:=a+' '+DecodeMemoryMemPart(i,16);
    if (o=0) then begin;
      if GetBytes(i,p) then Exit;
      inc(PrefixBytes,p);
      a:=a+','+disAsm2hex(i,p);
      end;
    resD:=chr(PrefixBytes+2)+a;
    end;
  $fe:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode4[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,8);
    resD:=chr(PrefixBytes+2)+a;
    end;
  $ff:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode4[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+2)+a;
    end;
  end;
Goto Vege;

f2:
o:=i and 7;
if GetBytes(i,1) then Exit;
p:=(i shr 3) and 7;
o:=o shl 3+p;
a:='esc '+disAsm2hex(o,1)+','+DecodeMemoryMemPart(i,16);
resD:=chr(PrefixBytes+2)+a;
Goto Vege;

f3:
if GetBytes(i,1) then goto vege;
case i of
  $02:DecodeOneBaseSextet(3,'lar',2);
  $03:DecodeOneBaseSextet(3,'lsl',2);
  $06:resD:=chr(PrefixBytes+2)+'clts';
  $08:resD:=chr(PrefixBytes+2)+'invd';
  $09:resD:=chr(PrefixBytes+2)+'wbinvd';
  $0b:resD:=chr(PrefixBytes+2)+'ud2';
  $30:resD:=chr(PrefixBytes+2)+'wrmsr';
  $31:resD:=chr(PrefixBytes+2)+'rdtsc';
  $32:resD:=chr(PrefixBytes+2)+'rdmsr';
  $33:resD:=chr(PrefixBytes+2)+'rdpmc';
  $34:resD:=chr(PrefixBytes+2)+'sysenter';
  $35:resD:=chr(PrefixBytes+2)+'sysexit';
  $a0:resD:=chr(PrefixBytes+2)+'push fs';
  $a1:resD:=chr(PrefixBytes+2)+'pop fs';
  $a8:resD:=chr(PrefixBytes+2)+'push gs';
  $a9:resD:=chr(PrefixBytes+2)+'pop gs';
  $a2:resD:=chr(PrefixBytes+2)+'cpuid';
  $aa:resD:=chr(PrefixBytes+2)+'rsm';
  $b9:resD:=chr(PrefixBytes+2)+'ud2';
  $ff:resD:=chr(PrefixBytes+2)+'oio';
  $20:begin;
    if GetBytes(i,1) then Exit;
    if (i and $c0<>$c0) then Exit;
    resD:=chr(PrefixBytes+3)+'mov e'+Reg16[i and 7]+',cr'+BStr((i shr 3) and 7);
    end;
  $21:begin;
    if GetBytes(i,1) then Exit;
    if (i and $c0<>$c0) then Exit;
    resD:=chr(PrefixBytes+3)+'mov e'+Reg16[i and 7]+',dr'+BStr((i shr 3) and 7);
    end;
  $22:begin;
    if GetBytes(i,1) then Exit;
    if (i and $c0<>$c0) then Exit;
    resD:=chr(PrefixBytes+3)+'mov cr'+BStr((i shr 3) and 7)+',e'+Reg16[i and 7];
    end;
  $23:begin;
    if GetBytes(i,1) then Exit;
    if (i and $c0<>$c0) then Exit;
    resD:=chr(PrefixBytes+3)+'mov dr'+BStr((i shr 3) and 7)+',e'+Reg16[i and 7];
    end;
  $24:begin;
    if GetBytes(i,1) then Exit;
    if (i and $c0<>$c0) then Exit;
    resD:=chr(PrefixBytes+3)+'mov e'+Reg16[i and 7]+',tr'+BStr((i shr 3) and 7);
    end;
  $26:begin;
    if GetBytes(i,1) then Exit;
    if (i and $c0<>$c0) then Exit;
    resD:=chr(PrefixBytes+3)+'mov tr'+BStr((i shr 3) and 7)+',e'+Reg16[i and 7];
    end;
  $40..$4f:begin;
    a:=Conds[i and $f];
    if GetBytes(i,1) then Exit;
    a:='cmov'+a+' '+DecodeMemoryRegPart(i,16)+','+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $80..$8f:begin;
    if GetBytes(o,2) then Exit;
    resD:=chr(PrefixBytes+4)+'j'+Conds[i and $f]+' word '#10+BStr(integer(o));
    end;
  $90..$9f:begin;
    a:=Conds[i and $f];
    if GetBytes(i,1) then Exit;
    a:='set'+a+' '+DecodeMemoryMemPart(i,8);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $c8..$cf:resD:=chr(PrefixBytes+2)+'bswap '+GetRegisterName(i and 7,16,PrefixOP);
  $a3:DecodeOneBaseSextet(1,'bt',2);
  $ab:DecodeOneBaseSextet(1,'bts',2);
  $b3:DecodeOneBaseSextet(1,'btr',2);
  $bb:DecodeOneBaseSextet(1,'btc',2);
  $b2:DecodeOneBaseSextet(3,'lss',2);
  $b4:DecodeOneBaseSextet(3,'lfs',2);
  $b5:DecodeOneBaseSextet(3,'lgs',2);
  $af:DecodeOneBaseSextet(3,'imul',2);
  $bc:DecodeOneBaseSextet(3,'bsf',2);
  $bd:DecodeOneBaseSextet(3,'bsr',2);
  $c0:DecodeOneBaseSextet(0,'xadd',2);
  $c1:DecodeOneBaseSextet(1,'xadd',2);
  $b0:DecodeOneBaseSextet(0,'cmpxchg',2);
  $b1:DecodeOneBaseSextet(1,'cmpxchg',2);
  $b6:begin;
    if GetBytes(i,1) then Exit;
    a:='movzx '+DecodeMemoryRegPart(i,16)+','+DecodeMemoryMemPart(i,8);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $b7:begin;
    if GetBytes(i,1) then Exit;
    a:='movzx '+DecodeMemoryRegPart(i,16)+',';
    PrefixOP:=false;
    a:=a+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $be:begin;
    if GetBytes(i,1) then Exit;
    a:='movsx '+DecodeMemoryRegPart(i,16)+','+DecodeMemoryMemPart(i,8);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $bf:begin;
    if GetBytes(i,1) then Exit;
    a:='movsx '+DecodeMemoryRegPart(i,16)+',';
    PrefixOP:=false;
    a:=a+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $a4:begin;
    DecodeOneBaseSextet(1,'shld',2);
    if GetBytes(o,1) then Exit;
    resD:=resD+','+disAsm2hex(o,1);
    inc(resS^,1);
    end;
  $ac:begin;
    DecodeOneBaseSextet(1,'shrd',2);
    if GetBytes(o,1) then Exit;
    resD:=resD+','+disAsm2hex(o,1);
    inc(resS^,1);
    end;
  $a5:begin;
    DecodeOneBaseSextet(1,'shld',2);
    if GetBytes(o,1) then Exit;
    resD:=resD+',cl';
    end;
  $ad:begin;
    DecodeOneBaseSextet(1,'shrd',2);
    if GetBytes(o,1) then Exit;
    resD:=resD+',cl';
    end;
  $00:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode5[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $01:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode6[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+3)+a;
    end;
  $ba:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode7[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16);
    if GetBytes(i,1) then Exit;
    resD:=chr(PrefixBytes+4)+a+','+disAsm2hex(i,1);
    end;
  $c7:begin;
    if GetBytes(i,1) then Exit;
    a:=ExtCode8[(i shr 3) and 7];
    a:=a+' '+DecodeMemoryMemPart(i,16);
    resD:=chr(PrefixBytes+3)+a;
    end;
  end;
Goto Vege;

Vege:
if (resD<>'') then resD:=resD[1]+PrefixData+copy(resD,2,255);
DisAssemblerBinaryCode:=resD;
End;
