--- @compiler prefix-code
;nasmw.exe -fobj win32.asm
;alink.exe -c -oPE -subsys console win32.obj
;-------------------------------------------------------
segment .code use32
..start

;get standard handles..
extern GetStdHandle
import GetStdHandle kernel32.dll
extern SetConsoleMode
import SetConsoleMode kernel32.dll
extern HeapCreate
import HeapCreate kernel32.dll
extern HeapAlloc
import HeapAlloc kernel32.dll
push dword -11
call [GetStdHandle]
mov [_consoleOutHandle],eax
push dword -10
call [GetStdHandle]
mov [_consoleInHandle],eax

;setup extended memory...
push dword 0
push dword eax
call [SetConsoleMode]
push dword 0
push dword 0
push dword 0
call [HeapCreate]
mov [_memoryHandle],eax
push dword 1
push dword 0
push eax
call [HeapAlloc]
mov [_memoryBegin],eax
mov dword [_memoryBytes],1

mov eax,_heap
mov [procTable_pos],eax
jmp near program_main
;-----------------------------------------------------------
---

--- @compiler postfix-code
;-------------------------------------------------------
segment .data use32
_consoleOutHandle resd 1
_consoleInHandle resd 1
_memoryHandle resd 1
_memoryBegin resd 1
_memoryBytes resd 1
_tempBuffer resb 1024
_tempData1 resd 2
_tempData2 resd 2
procTable_data resd procTable_max
procTable_pos resd 1
;_stack resb program_stack
_heap resb program_heap
;-----------------------------------------------------------
---





--- memresize
extern HeapReAlloc
import HeapReAlloc kernel32.dll
mov [_tempData1],ecx
push eax
push edx
push esi
push ecx
push dword [_memoryBegin]
push dword 0
push dword [_memoryHandle]
call [HeapReAlloc]
or eax,eax
jz short @_j1
mov [_memoryBegin],eax
mov eax,[_tempData1]
mov [_memoryBytes],eax
@_j1:
mov edi,[_memoryBegin]
mov ecx,[_memoryBytes]
pop esi
pop edx
pop eax
---

--- terminate
extern HeapDestroy
import HeapDestroy kernel32.dll
extern CloseHandle
import CloseHandle kernel32.dll
extern ExitProcess
import ExitProcess kernel32.dll
movzx eax,ax
push eax
push dword [_memoryHandle]
call [HeapDestroy]
push dword [_consoleOutHandle]
call [CloseHandle]
@_j1:
call [ExitProcess]
push dword -1
jmp short @_j1
---

--- sleep
extern Sleep
import Sleep kernel32.dll
push dword 0
call [Sleep]
---

--- memcopy
rep movsb
---

--- memfillbyte
rep stosb
---

--- memcopy2
push esi
push edi
push ecx
cmp esi,edi
jb short @_j1
rep movsb
jmp short @_j2
@_j1:
std
add esi,ecx
add edi,ecx
dec esi
dec edi
rep movsb
cld
@_j2:
pop ecx
pop edi
pop esi
---

--- codecopy
push esi
push edi
push ecx
rep cs movsb
pop ecx
pop edi
pop esi
---

--- console.clear
---

--- console.size
mov eax,79
mov ebx,24
---

--- console.setcolor
---

--- console.gotoxy
---

--- console.write
extern WriteFile
import WriteFile kernel32.dll
push eax
push ecx
push edx
movzx ecx,cx
push dword 0
push dword _tempData1
push ecx
push esi
push dword [_consoleOutHandle]
call [WriteFile]
pop edx
pop ecx
pop eax
---

--- console.read
extern ReadFile
import ReadFile kernel32.dll
push eax
push edx
push ebx
push esi
push edi
mov word [edi],0
push dword 0
push dword _tempData1
push dword 1
push edi
push dword [_consoleInHandle]
call [ReadFile]
mov ecx,2
pop edi
rol word [edi],8
pop esi
pop ebx
pop edx
pop eax
---

--- console.getdate
extern GetLocalTime
import GetLocalTime kernel32.dll
push dword _tempBuffer
call [GetLocalTime]
mov ax,[_tempBuffer+00h]
mov bx,[_tempBuffer+02h]
mov cx,[_tempBuffer+06h]
---

--- console.gettime
extern GetLocalTime
import GetLocalTime kernel32.dll
push dword _tempBuffer
call [GetLocalTime]
mov ax,[_tempBuffer+08h]
mov bx,[_tempBuffer+0ah]
mov cx,[_tempBuffer+0ch]
---

--- file.maxname
mov eax,256
---

--- file.myname
extern GetCommandLineA
import GetCommandLineA kernel32.dll
push eax
push esi
push edi
call [GetCommandLineA]
mov esi,eax
sub ecx,ecx
mov ah,' '
cmp byte [esi],'"'
jne short @_j1
inc esi
mov ah,'"'
@_j1:
inc ecx
lodsb
stosb
cmp al,ah
jne short @_j1
dec edi
dec ecx
sub eax,eax
stosd
pop edi
pop esi
pop eax
---

--- file.myparam
extern GetCommandLineA
import GetCommandLineA kernel32.dll
push eax
push esi
push edi
call [GetCommandLineA]
mov esi,eax
sub ecx,ecx
mov ah,' '
cmp byte [esi],'"'
jne short @_j1
inc esi
mov ah,'"'
@_j1:
lodsb
cmp al,ah
jne short @_j1
@_j2:
lodsb
stosb
inc ecx
or al,al
jnz short @_j2
dec ecx
pop edi
pop esi
pop eax
---

--- file.open
extern CreateFileA
import CreateFileA kernel32.dll
push ecx
push edx
push esi
push edi
lodsb
movzx ecx,al
mov edi,_tempBuffer
rep movsb
sub eax,eax
stosd
push dword 0
push dword 80h
push dword 3
push dword 0
push dword 1
push dword 0c0000000h
push dword _tempBuffer
call [CreateFileA]
or eax,eax
sets bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
---

--- file.close
extern CloseHandle
import CloseHandle kernel32.dll
push eax
push ecx
push edx
push eax
call [CloseHandle]
or eax,eax
setz bl
movzx ebx,bl
pop edx
pop ecx
pop eax
---

--- file.read
extern ReadFile
import ReadFile kernel32.dll
mov [_tempData1],ecx
push eax
push ecx
push edx
push dword 0
push dword _tempData2
push ecx
push edi
push eax
call [ReadFile]
or eax,eax
setz bl
movzx ebx,bl
mov eax,[_tempData1]
cmp eax,[_tempData2]
setne al
or bl,al
pop edx
pop ecx
pop eax
---

--- file.write
extern WriteFile
import WriteFile kernel32.dll
mov [_tempData1],ecx
push eax
push ecx
push edx
push dword 0
push dword _tempData2
push ecx
push esi
push eax
call [WriteFile]
or eax,eax
setz bl
movzx ebx,bl
mov eax,[_tempData1]
cmp eax,[_tempData2]
setne al
or bl,al
pop edx
pop ecx
pop eax
---

--- file.seek
extern SetFilePointer
import SetFilePointer kernel32.dll
push eax
push ecx
push edx
push dword 0
push dword 0
push ecx
push eax
call [SetFilePointer]
or eax,eax
sets bl
movzx ebx,bl
pop edx
pop ecx
pop eax
---

--- file.getsize
extern GetFileSize
import GetFileSize kernel32.dll
push eax
push edx
push dword 0
push eax
call [GetFileSize]
mov ecx,eax
sub ebx,ebx
pop edx
pop eax
---

--- file.getpos
extern SetFilePointer
import SetFilePointer kernel32.dll
push eax
push edx
push dword 1
push dword 0
push dword 0
push eax
call [SetFilePointer]
mov ecx,eax
sub ebx,ebx
pop edx
pop eax
---

--- file.truncate
extern SetEndOfFile
import SetEndOfFile kernel32.dll
push eax
push ecx
push edx
push eax
call [SetEndOfFile]
or eax,eax
setz bl
movzx ebx,bl
pop edx
pop ecx
pop eax
---

--- file.create
extern CreateFileA
import CreateFileA kernel32.dll
extern CloseHandle
import CloseHandle kernel32.dll
push eax
push ecx
push edx
push esi
push edi
mov edi,_tempBuffer
lodsb
movzx ecx,al
rep movsb
sub eax,eax
stosd
push dword 0
push dword 80h
push dword 1
push dword 0
push dword 1
push dword 80000000h
push dword _tempBuffer
call [CreateFileA]
push eax
call [CloseHandle]
or eax,eax
setz bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
pop eax
---

--- file.erase
extern DeleteFileA
import DeleteFileA kernel32.dll
push eax
push ecx
push edx
push esi
push edi
mov edi,_tempBuffer
lodsb
movzx ecx,al
rep movsb
sub eax,eax
stosd
push dword _tempBuffer
call [DeleteFileA]
or eax,eax
setz bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
pop eax
---

--- dir.current
extern GetCurrentDirectoryA
import GetCurrentDirectoryA kernel32.dll
push eax
push ecx
push edx
push esi
push edi
push dword _tempBuffer
push 512
call [GetCurrentDirectoryA]
mov esi,_tempBuffer
sub eax,eax
sub ecx,ecx
@_j1:
mov ah,al
lodsb
inc ecx
or al,al
jnz short @_j1
dec ecx
cmp ah,'\'
je short @_j2
inc ecx
mov word [esi-1],'\'
@_j2:
mov al,cl
stosb
movzx ecx,al
mov esi,_tempBuffer
rep movsb
pop edi
pop esi
pop edx
pop ecx
pop eax
sub ebx,ebx
---

--- dir.change
extern SetCurrentDirectoryA
import SetCurrentDirectoryA kernel32.dll
push eax
push ecx
push edx
push esi
push edi
lodsb
movzx ecx,al
mov edi,_tempBuffer
rep movsb
mov byte [edi],0
mov eax,[_tempBuffer]
and eax,0ffffff00h
cmp eax,5c3a00h
je short @_j1
cmp byte [edi-1],'\'
jne short @_j1
mov byte [edi-1],0
@_j1:
push dword _tempBuffer
call [SetCurrentDirectoryA]
or eax,eax
setz bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
pop eax
---

--- dir.rename
extern MoveFileA
import MoveFileA kernel32.dll
push eax
push ecx
push edx
push esi
push edi
mov edx,edi
mov edi,_tempBuffer
lodsb
movzx ecx,al
rep movsb
sub eax,eax
stosd
mov esi,edx
mov edi,_tempBuffer+512
lodsb
movzx ecx,al
rep movsb
sub eax,eax
stosd
push dword _tempBuffer+512
push dword _tempBuffer
call [MoveFileA]
or eax,eax
setz bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
pop eax
---

--- dir.create
extern CreateDirectoryA
import CreateDirectoryA kernel32.dll
push eax
push ecx
push edx
push esi
push edi
mov edi,_tempBuffer
lodsb
movzx ecx,al
rep movsb
sub eax,eax
stosd
push dword 0
push dword _tempBuffer
call [CreateDirectoryA]
or eax,eax
setz bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
pop eax
---

--- dir.erase
extern RemoveDirectoryA
import RemoveDirectoryA kernel32.dll
push eax
push ecx
push edx
push esi
push edi
mov edi,_tempBuffer
lodsb
movzx ecx,al
rep movsb
sub eax,eax
stosd
push dword _tempBuffer
call [RemoveDirectoryA]
or eax,eax
setz bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
pop eax
---

--- dir.makelink
mov ebx,1
---

--- dir.open
extern FindFirstFileA
import FindFirstFileA kernel32.dll
push ecx
push edx
push esi
push edi
lodsb
movzx ecx,al
mov edi,_tempBuffer
rep movsb
cmp byte [edi-1],'\'
je short @_j1
mov al,'\'
stosb
@_j1:
mov eax,2a2e2ah
stosd
push dword _tempBuffer+384
push dword _tempBuffer
call [FindFirstFileA]
or eax,eax
sets bl
movzx ebx,bl
pop edi
pop esi
pop edx
pop ecx
---

--- dir.read
extern FindNextFileA
import FindNextFileA kernel32.dll
push eax
push ecx
push edx
push esi
push edi
mov esi,eax
@_j1:
mov dword [edi+26],0
push dword _tempBuffer
push esi
call [FindNextFileA]
or eax,eax
jz near @_j3
mov eax,[_tempBuffer+2ch]
and eax,0ffffffh
cmp eax,2e2eh
je short @_j1
cmp ax,2eh
je short @_j1
mov eax,[_tempBuffer+20h]
stosd
mov ecx,[_tempBuffer+00h]
sub eax,eax
test cl,10h
setnz al
shl eax,7
or eax,2dh
movzx edx,cl
and dl,1
xor dl,1
add edx,edx
or al,dl
shl edx,3
or al,dl
test cl,04h
setnz dl
shl edx,6
or al,dl
stosd
sub eax,eax
stosd
stosd
stosd
stosd
stosw
mov esi,_tempBuffer+2ch
mov edx,edi
sub ecx,ecx
inc edi
@_j2:
lodsb
stosb
inc ecx
or al,al
jnz short @_j2
dec ecx
mov [edx],cl
@_j3:
pop edi
pop esi
pop edx
pop ecx
pop eax
sub ebx,ebx
---

--- dir.close
extern FindClose
import FindClose kernel32.dll
push eax
push eax
call [FindClose]
or eax,eax
setz bl
movzx ebx,bl
pop eax
---
