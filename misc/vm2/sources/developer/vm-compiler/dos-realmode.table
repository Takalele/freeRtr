--- @compiler prefix-code
;sasm.exe filename.asm
;link4sasm.exe filename.obj /ExtCOM
cld
mov cx,cs
mov ax,offset procTable_data
mov dx,procTable_max
add dx,dx
add ax,dx
add ax,15
shr ax,4
add ax,cx
mov cx,program_stack
add cx,15
and cx,0fff0h
mov ss,ax
mov sp,cx
shr cx,4
add ax,cx
mov ds,ax
mov es,ax
jmp word offset program_main
procTable_pos dw 0
---

--- @compiler postfix-code
;-----------------------------------------------------------
align 2
procTable_data:
---



--- memresize
sub ecx,ecx
sub edi,edi
add di,program_heap
sub cx,di
---

--- terminate
mov ah,4ch
int 21h
---

--- sleep
sti
hlt
---

--- memcopy
rep
  movsb
---

--- memfillbyte
rep
  stosb
---

--- memcopy2
cmp si,di
jb byte memcopy_j1
rep
  movsb
jmp byte memcopy_j2
memcopy_j1:
std
add si,cx
add di,cx
dec si
dec di
rep
  movsb
cld
memcopy_j2:
---

--- codecopy
rep
  movsb cs
---

--- console.clear
mov ax,3
int 10h
---

--- console.size
mov ax,79
mov bx,24
---

--- console.setcolor
---

--- console.gotoxy
push ax
push bx
push dx
mov dl,al
mov dh,bl
sub dx,0101h
sub bx,bx
mov ah,2
int 10h
pop dx
pop bx
pop ax
---

--- console.write
push si
push dx
push cx
push ax
@_j1:
dec cx
js byte @_j2
lodsb
mov dl,al
mov ah,2
int 21h
jmp byte @_j1
@_j2:
pop ax
pop cx
pop dx
pop si
---

--- console.iskey
mov ah,1
int 16h
setnz al
---

--- console.read
push ax
push si
mov ah,1
int 16h
jz byte @_err
mov ah,0
int 16h
mov si,offset @_tab
mov cx,ax
@_j1:
lodsw cs
or ax,ax
jz byte @_j3
cmp ax,cx
je byte @_j2
lodsw cs
jmp byte @_j1
@_j2:
lodsw cs
mov cx,ax
jmp byte @_ok
@_j3:
or cl,cl
jz byte @_err
mov ch,0
jmp byte @_ok
@_err:
sub cx,cx
jmp byte @_end
@_ok:
xchg cl,ch
mov def:[di],cx
mov cx,2
jmp byte @_end
@_tab:
dw 0f09h,8002h
dw 0e08h,8003h
dw 1c0dh,8004h
dw 011bh,8005h
dw 5200h,8006h
dw 5300h,8007h
dw 4700h,8008h
dw 4f00h,8009h
dw 4900h,800ah
dw 5100h,800bh
dw 4800h,800ch
dw 5000h,800dh
dw 4b00h,800eh
dw 4d00h,800fh
dw 3b00h,8014h
dw 3c00h,8015h
dw 3d00h,8016h
dw 3e00h,8017h
dw 3f00h,8018h
dw 4000h,8019h
dw 4100h,801ah
dw 4200h,801bh
dw 4300h,801ch
dw 4400h,801dh
dw 8500h,801eh
dw 8600h,801fh
dw 0
@_end:
pop si
pop ax
---

--- console.getdate
push dx
mov ah,4
int 1ah
mov ah,0
mov al,dh
aam 16
aad 10
push ax
mov al,dl
aam 16
aad 10
push ax
mov al,ch
aam 16
aad 10
mov ch,al
mov al,cl
aam 16
aad 10
mov cl,al
mov al,ch
imul ax,100
mov ch,0
add ax,cx
pop cx
pop bx
pop dx
---

--- console.gettime
push dx
mov ah,2
int 1ah
mov ah,0
mov al,ch
aam 16
aad 10
push ax
mov al,cl
aam 16
aad 10
push ax
mov al,dh
aam 16
aad 10
mov cx,ax
pop bx
pop ax
pop dx
---

--- console.execwait
mov bx,1
---

--- console.execnew
mov bx,1
---

--- console.execbckgnd
sub eax,eax
mov bx,1
---

--- console.execinme
sub eax,eax
sub ecx,ecx
mov bx,1
---

--- file.maxname
mov ax,8
---

--- file.myname
push ds
push si
push di
push ax
mov ds,cs:[2ch]
sub si,si
@_j1:
or si,si
js byte @_j4
lodsb
or al,al
jnz byte @_j1
lodsb
or al,al
jnz byte @_j1
lodsw
dec ax
jnz byte @_j1
sub cx,cx
@_j2:
lodsb
or al,al
jz byte @_j3
inc cx
stosb
jmp byte @_j2
@_j4:
sub cx,cx
@_j3:
pop ax
pop di
pop si
pop ds
---

--- file.myparam
push si
push di
mov si,80h
movzx byte cx,cs:[si]
or cx,cx
jz byte @_j3
inc si
inc si
dec cx
push cx
@_j1:
dec cx
js byte @_j2
movsb cs
jmp byte @_j1
@_j2:
pop cx
@_j3:
pop di
pop si
---

--- file.open
push dx
movzx byte bx,def:[si]
mov def:[si+bx+1],bh
lea dx,def:[si+1]
mov ax,3d02h
int 21h
setc bl
mov bh,0
movzx eax,ax
pop dx
---

--- file.close
push ax
mov bx,ax
mov ah,3eh
int 21h
setc bl
mov bh,0
pop ax
---

--- file.read
jcxz byte @_j1
push ax
push dx
mov bx,ax
mov dx,di
mov ah,3fh
int 21h
setc bl
mov bh,0
mov cx,ax
pop dx
pop ax
@_j1:
---

--- file.write
jcxz byte @_j1
push ax
push dx
mov bx,ax
mov dx,si
mov ah,40h
int 21h
setc bl
mov bh,0
mov cx,ax
pop dx
pop ax
@_j1:
---

--- file.seek
push ax
push dx
mov bx,ax
mov ax,4200h
mov dx,cx
rol ecx,16
int 21h
setc bl
mov bh,0
rol ecx,16
pop dx
pop ax
---

--- file.getsize
push ax
push dx
mov bx,ax
mov ax,4201h
sub cx,cx
sub dx,dx
int 21h
jc byte @_j1
push dx
push ax
mov ax,4202h
sub cx,cx
sub dx,dx
int 21h
jc byte @_j1
mov bp,dx
shl ebp,16
mov bp,ax
mov ax,4200h
pop dx
pop cx
int 21h
mov ecx,ebp
@_j1:
setc bl
mov bh,0
pop dx
pop ax
---

--- file.getpos
push ax
push dx
mov bx,ax
mov ax,4201h
sub cx,cx
sub dx,dx
int 21h
setc bl
mov bh,0
mov cx,dx
shl ecx,16
mov cx,ax
pop dx
pop ax
---

--- file.truncate
push ax
push cx
mov bx,ax
mov ah,40h
sub cx,cx
int 21h
setc bl
mov bh,0
pop cx
pop ax
---

--- file.create
push dx
push cx
push ax
movzx byte bx,def:[si]
mov def:[si+bx+1],bh
lea dx,def:[si+1]
mov ah,3ch
sub cx,cx
int 21h
jc byte @_j1
mov bx,ax
mov ah,3eh
int 21h
@_j1:
setc bl
mov bh,0
pop ax
pop cx
pop dx
---

--- file.erase
push dx
push ax
movzx byte bx,def:[si]
mov def:[si+bx+1],bh
lea dx,def:[si+1]
mov ah,41h
int 21h
setc bl
mov bh,0
pop ax
pop dx
---

--- dir.current
push ax
push dx
push si
push di
inc di
mov ah,19h
int 21h
add al,'a'
stosb
mov ax,5c3ah
stosw
mov ah,47h
mov dl,0
mov si,di
int 21h
@_j1:
lodsb
or al,al
jnz byte @_j1
lea di,def:[si-1]
mov al,'\'
stosb
mov ax,di
pop di
sub ax,di
dec ax
mov def:[di],al
pop si
pop dx
pop ax
mov bx,0
---

--- dir.change
push dx
push ax
movzx byte bx,def:[si]
mov def:[si+bx+1],bh
cmp bl,3
je byte @_j0
mov al,def:[si+bx]
cmp al,'\'
jne byte @_j0
mov def:[si+bx+0],bh
@_j0:
lea dx,def:[si+1]
mov ax,def:[si+1]
cmp ah,':'
jne byte @_j1
push dx
or al,20h
sub al,'a'
mov dl,al
mov ah,0eh
int 21h
pop dx
jc byte @_j2
@_j1:
mov ah,3bh
int 21h
@_j2:
setc bl
mov bh,0
pop ax
pop dx
---

--- dir.rename
push ax
push dx
movzx byte bx,def:[si]
mov def:[si+bx+1],bh
movzx byte bx,def:[di]
mov def:[di+bx+1],bh
lea dx,def:[si+1]
inc di
mov ah,56h
int 21h
setc bl
mov bh,0
dec di
pop dx
pop ax
---

--- dir.create
push dx
push ax
movzx byte bx,def:[si]
mov def:[si+bx+1],bh
lea dx,def:[si+1]
mov ah,39h
int 21h
setc bl
mov bh,0
pop ax
pop dx
---

--- dir.erase
push dx
push ax
movzx byte bx,def:[si]
mov def:[si+bx+1],bh
lea dx,def:[si+1]
mov ah,3ah
int 21h
setc bl
mov bh,0
pop ax
pop dx
---

--- dir.statistic
mov ah,36h
mov dl,0
int 21h
movzx eax,ax
movzx ecx,cx
imul ecx,eax
movzx eax,bx
movzx ebx,dx
sub ebx,eax
mov edx,ecx
sub ecx,ecx
---

--- dir.setrights
mov bx,1
---

--- dir.setdate
mov bx,1
---

--- dir.makelink
mov bx,1
---
