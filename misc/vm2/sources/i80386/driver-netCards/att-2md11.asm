;-------------------------------
nic_name db 'Compex ReadyLink enet100-vg4',0
nic_date db %date,' ',%time,0
nic_reqParam equ 010b
nic_addrSize equ 6
nic_maxPack equ 1502
nic_minPack equ 48
;-------------------------------

;-------------------------------
att_RxBroad equ 00h             ;db: bit0=broadcasts, bit1=multicasts...
att_ChipID equ 01h              ;db: chip: 1-shasta, 2-rainier, 3-lassen...
att_MemSize equ 04h             ;dd: size of memory on board...
att_RxBfSiz equ 08h             ;dd: size of rx buffer...
;-------------------------------

;-------------------------------
proc nic_present
mov edi,dataSeg_parBrd
sub eax,eax
dec eax
mov def:[att_rxBroad],al
stosd ptr32
stosd ptr32
;read card id...
mov dx,0                        ;the hardware id register...
add edx,def:[dataSeg_parPrt]
in ax,dx
cmp ax,4850h                    ;is this the correct sign?
jne byte nic_present_err
;read chip id...
mov dx,2                        ;the chip id register...
add edx,def:[dataSeg_parPrt]
in ax,dx
and ax,0fff0h                   ;i need just the chip id...
mov cl,1                        ;the shasta chip...
cmp ax,5350h
je byte nic_present_j1
mov cl,2                        ;the rainier chip...
cmp ax,5360h
je byte nic_present_j1
mov cl,3                        ;the lassen chip...
cmp ax,5370h
je byte nic_present_j1
nic_present_err:
stc
retnd
nic_present_j1:
mov def:[att_ChipID],cl
;select page6...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,6                        ;load the page number...
out dx,ax
;read up eisa id...
mov edi,dataSeg_freMem
mov dx,8                        ;the eisa id register...
add edx,def:[dataSeg_parPrt]
mov ecx,5                       ;number of bytes to read...
sub ebx,ebx
nic_present_j2:
in al,dx
stosb ptr32
add bl,al
inc edx
loopd nic_present_j2
inc bl                          ;is the sum correct?
jnz byte nic_present_err
mov eax,def:[dataSeg_freMem]    ;read eisa address...
;read up card address...
mov edi,dataSeg_parAdr
mov dx,16                       ;the mac address register...
add edx,def:[dataSeg_parPrt]
mov ecx,7
sub ebx,ebx
nic_present_j3:
in al,dx
stosb ptr32
add bl,al
inc edx
loopd nic_present_j3
inc bl                          ;is the sum correct?
jnz byte nic_present_err
;select page2...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,2                        ;load the page number...
out dx,ax
;test io enable bit...
mov dx,4                        ;the option lsw register...
add edx,def:[dataSeg_parPrt]
mov ax,21h                      ;set io enable bit...
out dx,ax
in ax,dx
and ax,20h                      ;test the result...
jz dword nic_present_err
;determine memory size...
mov dx,14                       ;the sram register...
add edx,def:[dataSeg_parPrt]
in al,dx                        ;read current value...
shr al,5
and al,111b
mov cl,al
mov eax,2000h
shl eax,cl
mov def:[att_MemSize],eax
sub eax,2048
mov def:[att_RxBfSiz],eax
clc
retnd
endp
;-------------------------------

;-------------------------------
proc nic_restart
call dword nic_restart_j1
;select page4...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,4                        ;load the page number...
out dx,ax
;disable receiving and transmitting...
mov dx,12                       ;the mac cfg1 register...
add edx,def:[dataSeg_parPrt]
in al,dx
and al,0cfh                     ;disable rx and tx...
out dx,al
;load eeprom contents to registers...
call dword nic_restart_j3
call dword nic_restart_j1
;put chip to a safe state...
mov dx,4                        ;the option lsw register...
add edx,def:[dataSeg_parPrt]
mov ax,0dc6ch                   ;disable a lot of things...
out dx,ax
mov ax,2300h                    ;disable a lot of things...
out dx,ax
mov dx,6                        ;the option msw register...
add edx,def:[dataSeg_parPrt]
mov ax,86h                      ;disable a lot of things...
out dx,al
;select page0...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,0                        ;load the page number...
out dx,ax
;disable all interrupts...
mov dx,10                       ;the irq mask register...
add edx,def:[dataSeg_parPrt]
mov ax,0fefeh                   ;report no irqs...
out dx,ax
;acknowledge all interrupts...
mov dx,8                        ;the irq status register...
add edx,def:[dataSeg_parPrt]
mov ax,0ffffh                   ;acknowledge all irqs...
out dx,ax
;enable io mapped mode...
mov dx,4                        ;the option lsw register...
add edx,def:[dataSeg_parPrt]
mov ax,2121h                    ;set io enable bit...
out dx,ax
;select page2...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,2                        ;load the page number...
out dx,ax
;disable early receiving...
mov dx,24                       ;the early rx register...
add edx,def:[dataSeg_parPrt]
sub ax,ax
out dx,al
;disable early transmitting...
mov dx,22                       ;the early tx register...
add edx,def:[dataSeg_parPrt]
sub ax,ax
out dx,ax
;disable busmaster...
mov dx,15                       ;the busmaster control register...
add edx,def:[dataSeg_parPrt]
in al,dx
and al,0fbh                     ;disable bus master bit...
out dx,al
;select page5...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,5                        ;load the page number...
out dx,ax
;set end of receiver ring...
mov dx,12                       ;the rx mem stop register...
add edx,def:[dataSeg_parPrt]
mov eax,def:[att_RxBfSiz]
shr eax,4
dec eax
out dx,ax
;set end of transmitter ring...
mov dx,14                       ;the tx mem stop register...
add edx,def:[dataSeg_parPrt]
mov eax,def:[att_MemSize]
shr eax,4
dec eax
out dx,ax
;select page1...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,1                        ;load the page number...
out dx,ax
;set the card's address...
mov dx,8                        ;the mac address register...
add edx,def:[dataSeg_parPrt]
mov esi,dataSeg_parAdr
mov ecx,6
nic_restart_j6:
lodsb ptr32
out dx,al
inc edx
loopd nic_restart_j6
;set multicast hash table...
mov dx,16                       ;the mac address register...
add edx,def:[dataSeg_parPrt]
mov ecx,8
nic_restart_j7:
sub ax,ax
out dx,al
inc edx
loopd nic_restart_j7
;select page4...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,4                        ;load the page number...
out dx,ax
;disable all rx activity...
mov dx,12                       ;the mac cfg1 register...
add edx,def:[dataSeg_parPrt]
in al,dx
and al,0c0h                     ;disable everything...
out dx,al
;disable loopback mode...
mov dx,13                       ;the mac cfg2 register...
add edx,def:[dataSeg_parPrt]
sub ax,ax
out dx,al
;set frame format to 802.3...
mov dx,11                       ;the 100mb cfg2 register...
add edx,def:[dataSeg_parPrt]
sub ax,ax
out dx,al
;clear tx and rx...
mov dx,6                        ;the option msw register...
add edx,def:[dataSeg_parPrt]
mov ax,86h                      ;disable a lot of things...
out dx,al
;select page0...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,0                        ;load the page number...
out dx,ax
;disable all interrupts...
mov dx,10                       ;the irq mask register...
add edx,def:[dataSeg_parPrt]
mov ax,0fefeh                   ;report no irqs...
out dx,ax
;acknowledge all interrupts...
mov dx,8                        ;the irq status register...
add edx,def:[dataSeg_parPrt]
mov ax,0ffffh                   ;acknowledge all irqs...
out dx,ax
call dword nic_restart_j2
;receiver configuration....
;select page4...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,4                        ;load the page number...
out dx,ax
;set normal mode...
mov dx,13                       ;the mac cfg2 register...
add edx,def:[dataSeg_parPrt]
sub ax,ax
out dx,al
;disable all rx and tx activity...
mov dx,12                       ;the mac cfg1 register...
add edx,def:[dataSeg_parPrt]
in al,dx
and al,0c0h                     ;disable everything...
out dx,al
;enable rx of mc and bc if requested...
mov ah,def:[att_RxBroad]
and ah,11b
shl ah,1
or al,ah
out dx,al
;enable rx and tx activity...
or al,30h                       ;enable rx and tx...
out dx,al
clc
retnd
nic_restart_j1: ;set reset mode...
mov dx,4                        ;the option lsw register...
add edx,def:[dataSeg_parPrt]
mov ax,2                        ;clear reset bit...
out dx,ax
mov esi,def:[dataSeg_tckSec]
call dword timer_delay
retnd
nic_restart_j2: ;clear reset mode...
mov dx,4                        ;the option lsw register...
add edx,def:[dataSeg_parPrt]
mov ax,3                        ;set reset bit...
out dx,ax
mov esi,def:[dataSeg_tckSec]
add esi,esi
call dword timer_delay
retnd
nic_restart_j3: ;load eeprom defaults...
;select page3...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,3                        ;load the page number...
out dx,ax
;start eeprom load...
mov dx,8                        ;the eeprom control register...
add edx,def:[dataSeg_parPrt]
in ax,dx
and ax,0fffeh                   ;clear eeprom load bit...
out dx,ax
or al,1                         ;set eeprom load bit..
out dx,ax
;wait to completed...
mov esi,def:[dataSeg_tckSec]
call dword timer_delay
mov dx,6                        ;the option msw register...
add edx,def:[dataSeg_parPrt]
mov ecx,10000h
nic_restart_j4:
in al,dx
and al,40h                      ;was the eeprom load done?
jz byte nic_restart_j5
loopd nic_restart_j4
mov esi,def:[dataSeg_tckSec]
call dword timer_delay
nic_restart_j5:
retnd
endp
;-------------------------------

;-------------------------------
proc nic_test4dead
clc
retnd
endp
;-------------------------------

;-------------------------------
proc nic_ready4tx
;select page0...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,0                        ;load the page number...
out dx,ax
;read tx packet counter...
mov dx,25                       ;the tx packet counter register...
add edx,def:[dataSeg_parPrt]
in al,dx                        ;read this data...
or al,al
jnz byte nic_ready4tx_err
clc
retnd
nic_ready4tx_err:
stc
retnd
endp
;-------------------------------

;-------------------------------
proc nic_send
mov ebp,ecx
mov edi,dataSeg_preFre
mov esi,dataSeg_freMem
movsd ptr32
movsw ptr32
mov ebx,esi
mov esi,dataSeg_parAdr
movsd ptr32
movsw ptr32
;test start send successful...
mov dx,6                        ;the option msw register...
add edx,def:[dataSeg_parPrt]
nic_send_j1:
in al,dx
and al,2                        ;test for start send...
jnz byte nic_send_j1
;tell packet size to card...
lea eax,def:[ebp+12]            ;size of header+data...
mov dx,16                       ;the data32 register...
add edx,def:[dataSeg_parPrt]
out dx,ax
mov dx,12                       ;the fragment size register...
add edx,def:[dataSeg_parPrt]
out dx,ax
;send the header...
mov dx,16                       ;the data32 register...
add edx,def:[dataSeg_parPrt]
mov esi,dataSeg_preFre
mov ecx,3
rep
  outsd ptr32
;send the data...
lea ecx,def:[ebp+3]
shr ecx,2
mov esi,ebx
rep
  outsd ptr32
;start sending packet...
mov dx,6                        ;the option msw register...
add edx,def:[dataSeg_parPrt]
mov al,3                        ;set tx strt bit...
out dx,al
retnd
endp
;-------------------------------

;-------------------------------
proc nic_receive
;select page0...
mov dx,2                        ;the paging register...
add edx,def:[dataSeg_parPrt]
mov ax,0                        ;load the page number...
out dx,ax
;read rx packet counter...
mov dx,24                       ;the rx packet counter register...
add edx,def:[dataSeg_parPrt]
in al,dx
or al,al
jnz byte nic_receive_j1
nic_receive_err:
sub ecx,ecx
retnd
nic_receive_j1:
;test advance next packet successful...
mov dx,6                        ;the option msw register...
add edx,def:[dataSeg_parPrt]
nic_receive_j2:
in al,dx
and al,4                        ;test for next packet advance...
jnz byte nic_receive_j2
;read up header...
mov dx,16                       ;the data32 register...
add edx,def:[dataSeg_parPrt]
mov edi,dataSeg_preFre
mov ecx,4
rep
  insd ptr32
;get size of packet...
mov esi,dataSeg_preFre
movzx word ebp,def:[esi]
and ebp,1fffh
sub ebp,12                      ;minus size of header...
;get source address...
mov edi,dataSeg_freMem
mov eax,def:[esi+10]
stosd ptr32
mov ax,def:[esi+14]
stosw ptr32
;read up the packet...
lea ecx,def:[ebp+3]
shr ecx,2
rep
  insd ptr32
;set advance next packet...
mov dx,6                        ;the option msw register...
add edx,def:[dataSeg_parPrt]
mov al,5                        ;set adv next pkt bit...
out dx,al
mov ecx,ebp
retnd
endp
;-------------------------------
