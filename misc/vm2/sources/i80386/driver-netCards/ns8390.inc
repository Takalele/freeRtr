;-------------------------------
ns8390_baseAddr equ 00h         ;dw: base address...
ns8390_rxStart equ 02h          ;db: rx start page...
ns8390_rxStop equ 03h           ;db: rx stop page...
ns8390_rxBroad equ 04h          ;db: bit0=broadcasts, bit1=multicasts...
ns8390_wordMode equ 05h         ;db: bit0=word mode enabled...
;-------------------------------
;data fields before this filed must be filled out to could use this code!
;the first user data should begin at 40h, for safety...;))))



;-------------------------------
proc ns8390_init
;change to page 0 and stop card...
mov dx,0                        ;command register...
add edx,def:[ns8390_baseAddr]
mov al,21h                      ;lock down the card /stop everything...
out dx,al
;setup data register...
mov dx,0eh                      ;data configuration register...
add edx,def:[ns8390_baseAddr]
mov al,def:[ns8390_wordMode]
and al,1
or al,48h                       ;normal operation, 4byte fifo...
out dx,al
;clear the remote byte count registers...
mov dx,0ah                      ;remote byte count register 0...
add edx,def:[ns8390_baseAddr]
mov al,0
out dx,al
mov dx,0bh                      ;remote byte count register 1...
add edx,def:[ns8390_baseAddr]
mov al,0
out dx,al
;set to rx:monitor more...
mov dx,0ch                      ;receive configuration register...
add edx,def:[ns8390_baseAddr]
mov al,20h                      ;accept all packets...
out dx,al
;set to tx:loopback mode...
mov dx,0dh                      ;transmit configuration register...
add edx,def:[ns8390_baseAddr]
mov al,2h                       ;internal loopback mode...
out dx,al
;set transmit start page...
mov dx,4h                       ;transmit page start address...
add edx,def:[ns8390_baseAddr]
mov al,0                        ;tx start page...
out dx,al
;set receive ring...
mov dx,1h                       ;page start register...
add edx,def:[ns8390_baseAddr]
mov al,def:[ns8390_rxStart]     ;rx start page...
out dx,al
mov dx,2h                       ;page stop register...
add edx,def:[ns8390_baseAddr]
mov al,def:[ns8390_rxStop]      ;rx stop page...
out dx,al
;set the boundary pointer...
mov dx,3h                       ;boundary pointer...
add edx,def:[ns8390_baseAddr]
mov al,def:[ns8390_rxStop]      ;rx stop page...
dec ax
out dx,al
;mask all interrupts...
mov dx,0fh                      ;interrupt mask register...
add edx,def:[ns8390_baseAddr]
mov al,0                        ;all are disabled...
out dx,al
;clear pending interrupts...
mov dx,7h                       ;interrupt status register...
add edx,def:[ns8390_baseAddr]
mov al,0ffh                     ;clear all interrupts...
out dx,al
;change to page 1...
mov dx,0                        ;command register...
add edx,def:[ns8390_baseAddr]
mov al,61h                      ;lock down the card /stop everything...
out dx,al
;set station address registers...
mov dx,1h                       ;local address register...
add edx,def:[ns8390_baseAddr]
mov ecx,6
mov esi,dataSeg_parAdr
ns8390_init_j1:
lodsb ptr32
out dx,al
inc edx                         ;points to next port...
loopd ns8390_init_j1
;set the multicast list to accept all...
mov dx,8h                       ;multicast address register...
add edx,def:[ns8390_baseAddr]
mov ecx,8
mov al,0ffh
ns8390_init_j2:
out dx,al                       ;write this byte...
inc edx                         ;points to next port...
loopd ns8390_init_j2
;set the current page register...
mov dx,7h                       ;current page register...
add edx,def:[ns8390_baseAddr]
mov al,def:[ns8390_rxStart]     ;rx start page...
out dx,al
;change to page 0...
mov dx,0                        ;command register...
add edx,def:[ns8390_baseAddr]
mov al,21h                      ;lock down the card /stop everything...
out dx,al
;change to page 0, start the card...
mov dx,0                        ;command register...
add edx,def:[ns8390_baseAddr]
mov al,22h                      ;start the card...
out dx,al
;set to tx:normal mode...
mov dx,0dh                      ;transmit configuration register...
add edx,def:[ns8390_baseAddr]
mov al,0h                       ;transmit goes to network...
out dx,al
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_rxConfig
;set to rx:normal mode, no broadcast, no multicast...
mov dx,0ch                      ;receive configuration register...
add edx,def:[ns8390_baseAddr]
mov al,def:[ns8390_rxBroad]     ;broadcast configuration...
and al,11b
shl al,2
out dx,al
retnd
endp
;-------------------------------


;-------------------------------
proc ns8390_NextPacketNum
;in:  al-packet number...
;out: al-next packet number...
inc al
cmp al,def:[ns8390_rxStop]
jb byte ns8390_NextPacketNum_vege
mov al,def:[ns8390_rxStart]
ns8390_NextPacketNum_vege:
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_PrevPacketNum
;in:  al-packet number...
;out: al-previous packet number...
dec al
cmp al,def:[ns8390_rxStart]
jae byte ns8390_PrevPacketNum_vege
mov al,def:[ns8390_rxStop]
dec al
ns8390_PrevPacketNum_vege:
retnd
endp
;-------------------------------


;-------------------------------
proc ns8390_StartSend
;in: bl-starting page...
;    cx-number of bytes to send...
;set the starting page...
mov dx,4h                       ;transmit page start address...
add edx,def:[ns8390_baseAddr]
mov al,bl                       ;the page from start...
out dx,al
;set the byte counter register...
mov dx,5h                       ;transmit byte count register 0...
add edx,def:[ns8390_baseAddr]
mov al,cl
out dx,al
mov dx,6h                       ;transmit byte count register 1...
add edx,def:[ns8390_baseAddr]
mov al,ch
out dx,al
;start transmit command...
mov dx,0h                       ;command register...
add edx,def:[ns8390_baseAddr]
mov al,26h                      ;start transmit...
out dx,al
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_WasSent
;out: carry-cleared if free for transmit...
;read command register...
mov dx,0h                       ;command register...
add edx,def:[ns8390_baseAddr]
in al,dx
;test transmit bit still set...
and al,4                        ;i need just the transmit bit...
jnz byte ns8390_WasSent_j1
clc
retnd
ns8390_WasSent_j1:
stc
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_ReadCurPage
;out: al-current page register...
;change to page 1...
mov dx,0h                       ;command register...
add edx,def:[ns8390_baseAddr]
mov al,60h                      ;turn to page 1...
out dx,al
;read current page register...
mov dx,7h                       ;current page register...
add edx,def:[ns8390_baseAddr]
in al,dx
push eax
;change to page 0...
mov dx,0h                       ;command register...
add edx,def:[ns8390_baseAddr]
mov al,20h                      ;turn to page 0...
out dx,al
pop eax
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_ReadBoundary
;out: al-boundary pointer...
;read boundary pointer...
mov dx,3h                       ;boundary pointer...
add edx,def:[ns8390_baseAddr]
in al,dx
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_WriteBoundary
;in: al-boundary pointer...
;write boundary pointer...
mov dx,3h                       ;boundary pointer...
add edx,def:[ns8390_baseAddr]
out dx,al
retnd
endp
;-------------------------------


;-------------------------------
proc ns8390_WasRcved
;out: carry-cleared if yes...
call dword ns8390_ReadCurPage   ;read the current page register...
mov bl,al
call dword ns8390_ReadBoundary  ;read the boundary pointer...
call dword ns8390_NextPacketNum ;get the number of next packet...
sub al,bl
jz byte ns8390_WasRcved_j1
clc
retnd
ns8390_WasRcved_j1:
stc
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_ClearPendingInts
;write interrupt status register...
mov dx,7h                       ;interrupt status register...
add edx,def:[ns8390_baseAddr]
mov al,0ffh                     ;clear all interrupts...
out dx,al
retnd
endp
;-------------------------------

;-------------------------------
proc ns8390_WasOverFlowIntGot
;out: carry-seted if yes...
;read interrupt status register...
mov dx,7h                       ;interrupt status register...
add edx,def:[ns8390_baseAddr]
in al,dx
and al,10h                      ;test overwrite warning bit...
jnz byte ns8390_WasOverFlowIntGot_j1
clc
retnd
ns8390_WasOverFlowIntGot_j1:
stc
retnd
endp
;-------------------------------
