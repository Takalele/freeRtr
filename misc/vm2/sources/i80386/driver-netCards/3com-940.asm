;-------------------------------
nic_name db '3Com sysKonnect 98xx',0
nic_date db %date,' ',%time,0
nic_reqParam equ 010b
nic_addrSize equ 6
nic_maxPack equ 1502
nic_minPack equ 48
;-------------------------------

;-------------------------------
tc_RxQueue equ 32               ;number of receive buffers...
tc_TxQueue equ 2                ;number of transmit buffers...
tc_buf1 equ 1000h               ;48k: receiver ring...
tc_buf2 equ 0800h               ;2k: transmit ring...
tc_buf3 equ 0100h               ;1024: receiver descriptors...
tc_buf4 equ 0000h               ;64: transmit descriptors...
;-------------------------------

;-------------------------------
tc_RxBroad equ 000h             ;db: bit0=broadcasts, bit1=multicasts...
tc_RxNext equ 001h              ;db: next descriptor to test...
tc_TxNext equ 002h              ;db: next transmit to test...
tc_phyMem equ 004h              ;dd: memory physical offset...
tc_mapMem equ 008h              ;dd: memory mapped offset...
;-------------------------------

;-------------------------------
proc tc_selBank
;in:  dx-port to select...
;out: dx-port to access...
cmp dx,80h
jb byte tc_selBank_pg0
push eax
push edx
mov eax,edx
shr eax,7
mov edx,def:[dataSeg_parPrt]    ;register address port...
out dx,al
pop edx
pop eax
and edx,7fh
add edx,def:[dataSeg_parPrt]
add edx,80h
retnd
tc_selBank_pg0:
add edx,def:[dataSeg_parPrt]
retnd
endp
;-------------------------------

;-------------------------------
proc nic_present
mov edi,dataSeg_parBrd
sub eax,eax
dec eax
mov def:[tc_rxBroad],al
stosd ptr32
stosd ptr32
mov dx,11bh                     ;chip id...
call dword tc_selBank
in al,dx
cmp al,0ffh
je byte nic_present_err
mov dx,100h                     ;mac address...
call dword tc_selBank
mov edi,dataSeg_parAdr
in ax,dx
stosw ptr32
add dx,2
in ax,dx
stosw ptr32
add dx,2
in ax,dx
stosw ptr32
;allocate memory...
mov ecx,10000h
call dword system_allocCont
or ebx,ebx
jnz byte nic_present_err
mov def:[tc_mapMem],edi
mov def:[tc_phyMem],eax
clc
retnd
nic_present_err:
stc
retnd
endp
;-------------------------------

;-------------------------------
proc nic_restart
mov al,tc_TxQueue
dec eax
mov def:[tc_TxNext],al
sub eax,eax
mov def:[tc_RxNext],al
;reset nic...
mov dx,04h                      ;control/status register...
call dword tc_selBank
mov ax,05h                      ;set software reset...
out dx,ax
mov dx,0f10h                    ;link contror register...
call dword tc_selBank
mov ax,01h                      ;set software reset...
out dx,ax
mov esi,def:[dataSeg_tckSec]
shr esi,2
call dword timer_delay
;build rx ring...
mov ecx,tc_RxQueue
mov edi,tc_buf3
add edi,def:[tc_mapMem]
mov ebp,tc_buf1
add ebp,def:[tc_phyMem]
nic_restart_j1:
mov ebx,edi
mov eax,0e0550600h              ;ctl...
stosd ptr32
lea eax,def:[ebx+32]            ;next...
sub eax,def:[tc_mapMem]
add eax,def:[tc_phyMem]
stosd ptr32
mov eax,ebp                     ;data...
stosd ptr32
sub eax,eax
stosd ptr32
stosd ptr32                     ;rxstat...
stosd ptr32                     ;timestamp..
stosd ptr32                     ;chksum...
stosd ptr32                     ;chkstart...
add ebp,600h
loopd nic_restart_j1
mov eax,tc_buf3
add eax,def:[tc_phyMem]
mov def:[ebx+4],eax
;build tx ring...
mov ecx,tc_TxQueue
mov edi,tc_buf4
add edi,def:[tc_mapMem]
nic_restart_j2:
mov ebx,edi
mov eax,060550600h              ;ctl...
stosd ptr32
lea eax,def:[ebx+32]            ;next...
sub eax,def:[tc_mapMem]
add eax,def:[tc_phyMem]
stosd ptr32
mov eax,tc_buf2                 ;data
add eax,def:[tc_phyMem]
stosd ptr32
sub eax,eax
stosd ptr32
stosd ptr32                     ;txstat...
stosd ptr32                     ;sumstart...
stosd ptr32                     ;sumpos...
stosd ptr32                     ;reserved..
loopd nic_restart_j2
mov eax,tc_buf4
add eax,def:[tc_phyMem]
mov def:[ebx+4],eax
mov esi,offset nic_restart_d1
nic_restart_j3:
lodsd cs,ptr32
or eax,eax
jz byte nic_restart_j4
mov ebp,eax
mov edx,eax
call dword tc_selBank
lodsd cs,ptr32
mov ecx,ebp
shr ecx,24
and cl,7
mov ecx,cs:[ecx*4+nic_restart_d2]
call ecx
mov ecx,ebp
shr ecx,28
and cl,3
mov ecx,cs:[ecx*4+nic_restart_d3]
call ecx
jmp dword nic_restart_j3
nic_restart_j4:
clc
retnd
nic_restart_p0:                 ;nothing...
retnd
nic_restart_p1:                 ;tx base...
mov eax,tc_buf4
add eax,def:[tc_phyMem]
retnd
nic_restart_p2:                 ;rx base...
mov eax,tc_buf3
add eax,def:[tc_phyMem]
retnd
nic_restart_p3:                 ;station address 1/3...
mov eax,dataSeg_parAdr
mov eax,def:[eax+0]
retnd
nic_restart_p4:                 ;station address 2/3...
mov eax,dataSeg_parAdr
mov eax,def:[eax+2]
retnd
nic_restart_p5:                 ;station address 3/3...
mov eax,dataSeg_parAdr
mov eax,def:[eax+4]
retnd
nic_restart_r0:                 ;none...
retnd
nic_restart_r1:                 ;byte...
out dx,al
retnd
nic_restart_r2:                 ;word...
out dx,ax
retnd
nic_restart_r3:                 ;dword...
out dx,eax
retnd
nic_restart_d3:
dd offset nic_restart_r0,offset nic_restart_r1,offset nic_restart_r2,offset nic_restart_r3
nic_restart_d2:
dd offset nic_restart_p0,offset nic_restart_p1,offset nic_restart_p2
dd offset nic_restart_p3,offset nic_restart_p4,offset nic_restart_p5
nic_restart_d1:
dd 10000004h,000000001h         ;control/status register...
dd 10000004h,000000002h         ;control/status register...
dd 10000158h,000000002h         ;test control register 1...
dd 10000158h,000000001h         ;test control register 1...
dd 10000004h,000000008h         ;control/status register...
dd 20000004h,000000000h         ;control/status register...
dd 10000007h,0000000a6h         ;power control reg...
dd 20000f10h,000000001h         ;link control reg...
dd 20000f10h,000000002h         ;link control reg...
dd 30000140h,011335577h         ;irq moderation timer init reg....
dd 30000140h,000000000h         ;irq moderation timer init reg....
dd 1000016ch,000000001h         ;i2c sw port register...
dd 20002888h,000000020h         ;phy address reg...
dd 20002888h,000000000h         ;phy address reg...
dd 10000006h,000000002h         ;led register...
dd 30000e00h,000ffffffh         ;descriptor poll timer init val...
dd 10000e08h,000000002h         ;descriptor poll timer ctrl reg...
dd 10000e18h,000000004h         ;time stamp timer ctrl reg...
dd 10000210h,000000002h         ;tx arbiter control register...
dd 200001a0h,000000002h         ;ram interface control register...
dd 10000190h,000000024h         ;wr timeout queue r1...
dd 10000191h,000000024h         ;wr timeout queue xa1...
dd 10000192h,000000024h         ;wr timeout queue xs1...
dd 10000193h,000000024h         ;rd timeout queue r1...
dd 10000194h,000000024h         ;rd timeout queue xa1...
dd 10000195h,000000024h         ;rd timeout queue xs1...
dd 10000196h,000000024h         ;wr timeout queue r2...
dd 10000197h,000000024h         ;wr timeout queue xa2...
dd 10000198h,000000024h         ;wr timeout queue xs2...
dd 10000199h,000000024h         ;rd timeout queue r2...
dd 1000019ah,000000024h         ;rd timeout queue xa2...
dd 1000019bh,000000024h         ;rd timeout queue xs2...
dd 2000280ch,000004000h         ;receive control register...
dd 300006b4h,000000080h         ;txqa bmu control/status register...
dd 10000006h,000000002h         ;led register...
dd 3000000ch,000000000h         ;interrupt mask reg...
dd 30000014h,000000000h         ;hw error interrupt mask reg...
dd 10000f0ch,000000000h         ;gmac interrupt mask reg...
dd 20002804h,000000000h         ;general purpose control register...
dd 20002804h,000000000h         ;general purpose control register...
dd 30000634h,000000020h         ;txqs bmu control/status register...
dd 300006b4h,000000020h         ;txqa bmu control/status register...
dd 200001f0h,000001000h         ;packet arbiter ctrl register...
dd 30000f04h,000000001h         ;gphy control reg...
dd 30000f00h,000000001h         ;gmac control reg...
dd 10000210h,000000054h         ;tx arbiter control register...
dd 30000200h,000000000h         ;tx arb interval timer init val...
dd 30000208h,000000000h         ;tx arb limit counter init val...
dd 300006b4h,000155500h         ;txqa bmu control/status register...
dd 30000634h,000155500h         ;txqs bmu control/status register...
dd 10000aa8h,000000001h         ;txa ram buffer control register...
dd 10000a28h,000000001h         ;txs ram buffer control register...
dd 10000d48h,000000001h         ;tx gmac fifo control/test...
dd 30000434h,000000020h         ;rxq bmu control/status register...
dd 200001f0h,000000400h         ;packet arbiter ctrl register...
dd 30000434h,000155500h         ;rxq bmu control/status register...
dd 10000828h,000000001h         ;rx ram buffer control register...
dd 10000c48h,000000001h         ;rx gmac fifo control/test...
dd 30000f04h,000000001h         ;gphy control reg...
dd 30000f00h,000000001h         ;gmac control reg...
dd 30000f04h,00bfde001h         ;gphy control reg...
dd 30000f04h,00bfde002h         ;gphy control reg...
dd 30000f00h,00000000ah         ;gmac control reg...
dd 20002804h,0000000a8h         ;general purpose control register...
dd 20002888h,000000020h         ;phy address reg...
dd 20002888h,000000000h         ;phy address reg...
dd 20002808h,000000000h         ;transmit control register...
dd 2000280ch,00000e000h         ;receive control register...
dd 20002810h,00000ffffh         ;transmit flow control register...
dd 20002814h,00000d7c0h         ;transmit parameter register...
dd 20002818h,00000021eh         ;serial mode register...
dd 20002850h,000000000h         ;transmit interrupt mask register...
dd 20002854h,000000000h         ;receive interrupt mask register...
dd 20002858h,000000000h         ;transmit and receive interrupt mask register...
dd 20000c4ch,0000018e3h         ;rx gmac fifo flush mask...
dd 10000c48h,000000002h         ;rx gmac fifo control/test...
dd 20000c48h,000000088h         ;rx gmac fifo control/test...
dd 20000c50h,00000000ah         ;rx gmac fifo flush threshold...
dd 10000d48h,000000002h         ;tx gmac fifo control/test...
dd 20000d48h,000000008h         ;tx gmac fifo control/test...
dd 10000828h,000000002h         ;rx ram buffer control register...
dd 30000800h,000000000h         ;rx ram buffer start address...
dd 30000804h,000000fffh         ;rx ram buffer end address...
dd 30000808h,000000000h         ;rx ram buffer write pointer...
dd 3000080ch,000000000h         ;rx ram buffer read pointer...
dd 30000810h,000000c00h         ;rx rx upper threshold, pause pack...
dd 30000814h,000000800h         ;rx rx lower threshold, pause pack...
dd 10000828h,000000008h         ;rx ram buffer control register...
dd 10000a28h,000000001h         ;txs ram buffer control register...
dd 10000aa8h,000000002h         ;txa ram buffer control register...
dd 30000a80h,000001000h         ;txa ram buffer start address...
dd 30000a84h,000001fffh         ;txa ram buffer end address...
dd 30000a88h,000001000h         ;txa ram buffer write pointer...
dd 30000a8ch,000001000h         ;txa ram buffer read pointer...
dd 10000aa8h,000000020h         ;txa ram buffer control register...
dd 10000aa8h,000000008h         ;txa ram buffer control register...
dd 30000434h,0002aaa00h         ;rxq bmu control/status register...
dd 30000438h,000000300h         ;rxq flag register...
dd 300006b4h,0002aaa00h         ;txqa bmu control/status register...
dd 300006b8h,000000300h         ;txqa flag register...
dd 2000280ch,00000e000h         ;receive control register...
dd 310006a0h,000000000h         ;txqa current descriptor address low dword...
dd 300006a4h,000000000h         ;txqa current descriptor address high dword...
dd 32000420h,000000000h         ;rxq current descriptor address low dword...
dd 30000424h,000000000h         ;rxq current descriptor address high dword...
dd 300006b4h,000000080h         ;txqa bmu control/status register...
dd 10000434h,000000012h         ;rxq bmu control/status register...
dd 2000280ch,00000e000h         ;receive control register...
dd 100006b4h,000000010h         ;txqa bmu control/status register...
dd 100006b4h,000000002h         ;txqa bmu control/status register...
dd 10000f0ch,000000000h         ;gmac interrupt mask reg...
dd 20002804h,0000018a8h         ;general purpose control register...
dd 10000c3ch,000000016h         ;link led register...
dd 2000280ch,00000e000h         ;receive control register...
dd 20002834h,00000ffffh         ;multicatst address hash register 1...
dd 20002838h,00000ffffh         ;multicatst address hash register 2...
dd 2000283ch,00000ffffh         ;multicatst address hash register 3...
dd 20002840h,00000ffffh         ;multicatst address hash register 4...
dd 2300281ch,000000000h         ;source address low #1...
dd 24002820h,000000000h         ;source address middle #1...
dd 25002824h,000000000h         ;source address high #1...
dd 23002828h,000000000h         ;source address low #2...
dd 2400282ch,000000000h         ;source address middle #2...
dd 25002830h,000000000h         ;source address high #2...
dd 23000100h,000000000h         ;source address low #1...
dd 24000102h,000000000h         ;source address middle #1...
dd 25000104h,000000000h         ;source address high #1...
dd 23000108h,000000000h         ;source address low #1...
dd 2400010ah,000000000h         ;source address middle #1...
dd 2500010ch,000000000h         ;source address high #1...
dd 23000110h,000000000h         ;source address low #1...
dd 24000112h,000000000h         ;source address middle #1...
dd 25000114h,000000000h         ;source address high #1...
dd 100006b4h,000000010h         ;txqa bmu control/status register...
dd 100006b4h,000000002h         ;txqa bmu control/status register...
dd 0
endp
;-------------------------------

;-------------------------------
proc nic_test4dead
clc
retnd
nic_test4dead_err:
stc
retnd
endp
;-------------------------------

;-------------------------------
proc nic_ready4tx
movzx byte edi,def:[tc_TxNext]
shl edi,5
add edi,tc_buf4
add edi,def:[tc_mapMem]
mov ax,def:[edi+2]
test ax,8000h
jnz byte nic_ready4tx_err
clc
retnd
nic_ready4tx_err:
stc
retnd
endp
;-------------------------------

;-------------------------------
proc nic_send
movzx byte eax,def:[tc_TxNext]
inc eax
sub edx,edx
mov esi,tc_TxQueue
div esi
movzx eax,dl
mov def:[tc_TxNext],al
mov edi,tc_buf2
add edi,def:[tc_mapMem]
;build packet header...
mov esi,dataSeg_freMem
movsd ptr32
movsw ptr32
mov ebx,esi
mov esi,dataSeg_parAdr
movsd ptr32
movsw ptr32
mov esi,ebx
mov ebx,ecx
add ecx,3
shr ecx,2
rep
  movsd ptr32
movzx byte edi,def:[tc_TxNext]
shl edi,5
add edi,tc_buf4
add edi,def:[tc_mapMem]
lea eax,def:[ebx+12]            ;header+data size...
mov def:[edi+0],ax
mov ax,0e055h
mov def:[edi+2],ax
;start tx...
mov dx,6b4h                     ;txqa BMU Control/Status Register
call dword tc_selBank
mov eax,10h                     ;start tx...
out dx,eax
retnd
endp
;-------------------------------

;-------------------------------
proc nic_receive
movzx byte ebx,def:[tc_RxNext]
shl ebx,5
add ebx,tc_buf3
add ebx,def:[tc_mapMem]
mov ax,def:[ebx+2]
sub ecx,ecx
test ax,8000h
jnz dword nic_receive_none
and ax,6000h
cmp ax,6000h
jne byte nic_receive_skip
movzx word ebp,def:[ebx+0]
sub bp,12
and bp,7ffh
mov esi,def:[ebx+8]
sub esi,def:[tc_phyMem]
add esi,def:[tc_mapMem]
mov edi,dataSeg_freMem
add esi,6                       ;skip target address...
movsd ptr32
movsw ptr32
lea ecx,def:[ebp+3]
shr ecx,2
rep
  movsd ptr32
mov ecx,ebp
nic_receive_skip:
mov eax,0e0550600h
mov def:[ebx],eax
movzx byte eax,def:[tc_RxNext]
inc eax
sub edx,edx
mov esi,tc_RxQueue
div esi
movzx eax,dl
mov def:[tc_RxNext],al
;start rx...
mov dx,434h                     ;rxq BMU Control/Status Register
call dword tc_selBank
mov eax,10h                     ;start tx...
out dx,eax
nic_receive_none:
retnd
endp
;-------------------------------
