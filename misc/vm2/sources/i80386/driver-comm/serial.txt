block mode pipeline should be opened for this process...
when the pipeline has estabilished, this process sends
the number of available ports in dword... the caller
receives it, and should send a dword containin the
occupied port number (0..max-1) in a dword. after it,
the caller should open another pipeline for this process
in character mode.. this will be the data pipeline...
over this data pipeline just line data is being
transmitted. the first one will be the control pipeline...
over the control pipeline, just control information will
be transmitted. when the data pipeline estabilished,
the caller should send the pipeline id of data pipeline
(in a dword) over the control pipeline. after it, the
port is opened. the control pipeline has a query-reply
protocol. the caller send a command, this process answers
to it... each packet's first dword is a command word...
other bytes are data... the reply packet echoes the command,
but changes the data... the commands are the following:

00 - read line status counters:
     dd: overrun errors...
     dd: parity errors...
     dd: framing errors...
     dd: break detects...
     dd: current line status:
         bit0=overrun error...
         bit1=parity error...
         bit2=framing error...
         bit3=break detected...

01 - read modem status counters:
     dd: cts changes...
     dd: dsr changes...
     dd: ring indicator changes...
     dd: data carrier detect changes...
     dd: current modem status:
         bit0=cts...
         bit1=dsr...
         bit2=ring...
         bit3=dcd...

02 - read modem control status:
     dd: current modem control:
         bit0=dtr...
         bit1=rts...

03 - set modem control value:
     dd: new modem control:
         bit0=dtr...
         bit1=rts...

04 - read line status:
     dd: line speed (bit/sec)
     dd: line speed high dword...
     dd: byte length in bits: 5, 6, 7, 8...
     dd: parity: 0=none, 1=odd, 2=even...
     dd: stop bits: 1, 2...
     dd: send break: 0=none, 1=yes...

05 - write line status:
     dd: line speed (bit/sec)
     dd: line speed high dword...
     dd: byte length in bits: 5, 6, 7, 8...
     dd: parity: 0=none, 1=odd, 2=even...
     dd: stop bits: 1, 2...
     dd: send break: 0=none, 1=yes...

06 - read flow control:
     dd: used flow control:
         bit0=rts-cts...
         bit1=dtr-dsr...

07 - write flow control:
     dd: new flow control:
         bit0=rts-cts...
         bit1=dtr-dsr...

08 - driver buffer status:
     dd: bytes waiting in rx buffer...
     dd: bytes waiting in tx buffer...

09 - clear driver rx buffer...

10 - clear driver tx buffer...

11 - clear driver rx and tx buffers...
