org 0h
use32
db 'exec'                       ;id
dd offset lastbyte              ;size
dd drvBuf__siz                  ;data
dd 512                          ;stack
;-------------------------------

;------------------------------- main code...
mov dword def:[drvBuf_cmd],0    ;clear command...
mov al,driveLetter
sub esi,esi
clts                            ;login as drive letter...
dd 2eh
or bx,bx
jz byte waitCmd_j1
waitCmd_j3:
sub eax,eax
clts                            ;terminate process...
dd 00h
waitCmd_j2:
clts                            ;give away the control...
dd 01h
waitCmd_j1:
mov eax,def:[drvBuf_cmd]        ;read command...
test eax,80000000h
jz byte waitCmd_j2
dec eax
movzx eax,al
lea esi,def:[commandList_beg+eax*2]
cmp esi,offset commandList_end
jae byte finishCmd_err
lodsd cs,ptr32
movzx eax,ax
jmp eax
finishCmd_err:
mov eax,1
jmp byte finishCmd_norm
finishCmd_ok:
sub eax,eax
finishCmd_norm:
and eax,7fffffffh
mov def:[drvBuf_cmd],eax
clts                            ;terminate drive handler...
dd 30h
sub ebp,ebp
jmp byte waitCmd_j1
;-------------------------------

;-------------------------------
proc getPath
mov al,3
stosb ptr32
mov al,driveLetter
stosb ptr32
mov al,':'
stosb ptr32
mov al,'\'
stosb ptr32
retnd
endp
;-------------------------------

;-------------------------------
proc lowcase
cmp al,'A'
jb byte lowcase_j1
cmp al,'Z'
ja byte lowcase_j1
add al,20h
lowcase_j1:
retnd
endp
;-------------------------------

;------------------------------- command list...
align 4h
commandList_beg:
dw offset command01,offset command02
dw offset finishCmd_err,offset finishCmd_err,offset finishCmd_err
dw offset finishCmd_err,offset finishCmd_err,offset finishCmd_err
dw offset finishCmd_err,offset finishCmd_err
dw offset command0B,offset command0C,offset command0D,offset command0E
dw offset finishCmd_err
dw offset command10,offset command11,offset command12,offset command13
commandList_end:
;-------------------------------

;------------------------------- change directory: dir, fn1, usrID...
proc command01
mov edi,drvBuf_fn1
call dword getPath
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- drive statistics: data: free,used,bad,blockSize:dword...
proc command02
mov edi,drvBuf_dat
sub eax,eax
stosd ptr32
mov eax,offset lastbyte
stosd ptr32
sub eax,eax
stosd ptr32
inc eax
stosd ptr32
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- open directory: dir, fn1, usrID, hdr, data: inode,rights:dword; name:string...
proc command0B
mov edi,drvBuf_fn1
call dword getPath
sub eax,eax
mov def:[drvBuf_hdr],eax
mov edi,drvBuf_dat
stosd ptr32
mov al,80h
stosd ptr32
call dword getPath
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- read directory: hdr, data: size,right,own:dword; create,modify:time; name:string...
proc command0C
mov edi,drvBuf_dat
sub eax,eax
mov ecx,40h
rep
  stosd ptr32
mov eax,def:[drvBuf_hdr]
cmp eax,numberOfFiles
jae dword finishCmd_ok
inc dword def:[drvBuf_hdr]
lea esi,def:[dataBegin+eax*8]
lodsd cs,ptr32
mov esi,eax
mov edi,drvBuf_dat
mov ecx,40h
rep
  movsd cs,ptr32
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- open file: dir, fn1, right, usrID, hdr, data: inode,rights:dword; name:string...
proc command0D
mov esi,drvBuf_fn1
lodsb ptr32
movzx eax,al
mov def:[esi+eax],ah
mov edi,drvBuf_fn2
command0D_j1:
lodsb ptr32
call dword lowcase
stosb ptr32
cmp al,'\'
jne byte command0D_j2
mov edi,drvBuf_fn2
jmp byte command0D_j1
command0D_j2:
or al,al
jnz byte command0D_j1
mov ecx,numberOfFiles
mov ebp,offset dataBegin
command0D_j3:
dec ecx
js dword finishCmd_err
mov edi,cs:[ebp]
add edi,27
mov esi,drvBuf_fn2
command0D_j4:
lodsb ptr32
mov ah,al
mov al,cs:[edi]
inc edi
call dword lowcase
cmp al,ah
jne byte command0D_j5
or ax,ax
jz byte command0D_j6
jmp byte command0D_j4
command0D_j5:
add ebp,8
jmp byte command0D_j3
command0D_j6:
mov edi,drvBuf_hdr
mov eax,ebp
sub eax,offset dataBegin
shr eax,3
stosd ptr32                     ;+0 - sequence number...
mov eax,ebp
stosd ptr32                     ;+4 - data block offset...
mov eax,cs:[ebp+0]
stosd ptr32                     ;+8 - header offset...
mov eax,cs:[ebp+4]
stosd ptr32                     ;+12 - binary offset...
mov ebp,cs:[ebp]
mov eax,cs:[ebp+0]
stosd ptr32                     ;+16 - size of binary...
sub eax,eax
stosd ptr32                     ;+20 - position in binary...
mov eax,cs:[ebp+4]
stosd ptr32                     ;+24 - rights...
mov eax,cs:[ebp+8]
stosd ptr32                     ;+28 - owner...
mov edi,drvBuf_dat
mov ebx,drvBuf_hdr
mov eax,def:[ebx+0]
stosd ptr32
mov eax,def:[ebx+24]
stosd ptr32
mov ebp,edi
call dword getPath
mov esi,def:[ebx+8]
add esi,26
lodsb cs,ptr32
add ds:[ebp],al
movzx ecx,al
rep
  movsb cs,ptr32
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- read file: hdr, size, data...
proc command0E
mov ebx,drvBuf_hdr
mov eax,def:[ebx+20]            ;read position...
sub eax,def:[ebx+16]            ;get remainder...
jae dword finishCmd_err
mov ecx,def:[drvBuf_siz]
cmp ecx,eax
ja dword finishCmd_err
mov esi,def:[ebx+20]            ;read position...
add esi,def:[ebx+12]            ;plus image offset...
mov edi,drvBuf_dat
add def:[ebx+20],ecx            ;update position...
rep
  movsb cs,ptr32
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- seek file: hdr, data: position:dword...
proc command10
mov ebx,drvBuf_hdr
mov eax,def:[drvBuf_dat]
mov def:[ebx+20],eax
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- get file size: hdr, data: filesize:dword...
proc command11
mov ebx,drvBuf_hdr
mov eax,def:[ebx+16]
mov def:[drvBuf_dat],eax
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- get file pos: hdr, data: position:dword...
proc command12
mov ebx,drvBuf_hdr
mov eax,def:[ebx+20]
mov def:[drvBuf_dat],eax
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- truncate file: hdr...
proc command13
mov ebx,drvBuf_hdr
mov eax,def:[ebx+20]
cmp eax,def:[ebx+16]
jne dword finishCmd_err
jmp dword finishCmd_ok
endp
;-------------------------------

;------------------------------- drive buffer layout...
drvBuf_cmd equ 000h             ;dd: command/result code...
drvBuf_usr equ 004h             ;dd: user who wants to do...
drvBuf_rgt equ 008h             ;dd: rights what user wants to do...
drvBuf_siz equ 00ch             ;dd: buffer size...
drvBuf_dir equ 010h             ;256: current directory...
drvBuf_fn1 equ 110h             ;256: pathname #1...
drvBuf_fn2 equ 210h             ;256: pathname #2...
drvBuf_hdr equ 310h             ;512: file handle...
drvBuf_dat equ 510h             ;64k: data buffer...
drvBuf__siz equ 10510h          ;size of structure...
;-------------------------------

;-------------------------------
driveLetter equ 64              ;the '@' char...
align 10h
;X;
lastbyte:
;-------------------------------
