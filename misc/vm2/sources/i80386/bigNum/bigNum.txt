block mode pipeline should opened for this process...
once opened, commands are sent by the client, and
responses are generated by this process...

internal big numbers has the following structure: (default format!)
dw: size of mantissa (in dword)...
db: signed;
db: reserved;
??: mantissa... (could use any bit order;)

formatted big numbers use the following structure:
?? mantissa... (in specified bit order, the highest bit is the sign!)

the commands are the following:

 0 - size of internal big number record...
     input:
     output: dd:structureSize

 1 - store integer...
     input: dd:value...
     output: bigNum:value...

 2 - absolute value...
     input: bigNum:value...
     output: bigNum:value without sign...

 3 - negate value...
     input: bigNum:value...
     output: bigNum:negative value...

 4 - compare values...
     input: bigNum:d1; bigNum:d2...
     output: dd:result: 0=equal, 1=d1>d2, 2=d2>d1...

 5 - bitwise shift left...
     input: dd:d1 bigNum:d2...
     output: bigNum:d2 shifted left by d1 bits...

 6 - bitwise shift right...
     input: dd:d1 bigNum:d2...
     output: bigNum:d2 shifted right by d1 bits...

 7 - bitwise not...
     input: bigNum:d1...
     output: bigNum:not d1...

 8 - bitwise or...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 or d2...

 9 - bitwise xor...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 xor d2...

10 - bitwise and...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 and d2...

11 - addition...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 + d2...

12 - substraction...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 - d2...

13 - multiplication...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 * d2...

14 - division...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 / d2; bigNum:d1 % d2...  (the second is the remainder)

15 - power...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 ^ d2... (ie: 2^5=32)

16 - root...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1 û d2... (ie: 5û32=2)

17 - power modulus...
     input: bigNum:d1; bigNum:d2; bigNum:d3...
     output: bigNum:(d1 ^ d2) % d3... (ie: (2^5)%7=4)

18 - inverse modulus...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:d1*xğ1 %d2 (ie: 5*3ğ1 %7)...

19 - convert internal to LSB formatted...
     input: bigNum:d1...
     output: formatted:d1...

20 - convert internal to MSB formatted...
     input: bigNum:d1...
     output: formatted:d1...

21 - convert LSB formatted to internal...
     input: formatted:d1...
     output: bigNum:d1...

22 - convert MSB formatted to internal...
     input: formatted:d1...
     output: bigNum:d1...

23 - get size in bits...
     input: bigNum:d1...
     output: dd:result...

24 - get number of seted bits...
     input: bigNum:d1...
     output: dd:result...

25 - clear padding to zero...
     input: bigNum:d1...
     output: bigNum:d1...

26 - greatest common divisor...
     input: bigNum:d1; bigNum:d2...
     output: bigNum:gcd d1,d2...
