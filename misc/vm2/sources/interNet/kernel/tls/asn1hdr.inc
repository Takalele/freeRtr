Const
  ASN1type_constructed=$20;
  ASN1type_application=$40;
  ASN1type_contextspec=$80;


Procedure writeASN1header(var buffer;var ps:LongInt;typ,tag,len:LongInt);
Var
  buf:array[1..1] of byte absolute buffer;
  tmp:array[1..16] of byte;
  i,o:LongInt;
Begin;
if (tag>=$1f) then i:=$1f else i:=tag and $1f;
inc(ps);
buf[ps]:=(typ and $e0) or i;
if (tag>=$1f) then begin;
  o:=0;
  while (tag>0) do begin;
    inc(o);
    tmp[o]:=tag and $7f;
    tag:=tag shr 7;
    end;
  for i:=o downto 1 do begin;
    o:=tmp[i];
    if (i<>1) then inc(o,$80);
    inc(ps);
    buf[ps]:=o;
    end;
  end;
inc(ps);
if (len>=0) and (len<$80) then begin;
  buf[ps]:=len;
  exit;
  end;
o:=0;
while (len>0) do begin;
  inc(o);
  tmp[o]:=len and $ff;
  len:=len shr 8;
  end;
buf[ps]:=o or $80;
for i:=o downto 1 do begin;
  inc(ps);
  buf[ps]:=tmp[i];
  end;
End;


Procedure readASN1header(var buffer;var ps:LongInt;var typ,tag,len:LongInt);
Var
  buf:array[1..1] of byte absolute buffer;
  i,o:LongInt;
Begin;
inc(ps);
tag:=buf[ps];
typ:=tag and $e0;
tag:=tag and $1f;
if (tag=$1f) then begin;
  tag:=0;
  repeat
    inc(ps);
    tag:=(tag shl 7) or (buf[ps] and $7f);
    until (buf[ps] and $80=0);
  end;
inc(ps);
len:=buf[ps];
if (len and $80=0) then len:=len and $7f else begin;
  o:=len and $7f;
  len:=0;
  for i:=1 to o do begin;
    inc(ps);
    len:=(len shl 8) or buf[ps];
    end;
  end;
End;

Function convertASN1type(i:LongInt):String;
Var a:String;
Begin;
case i of
   0:a:='eoc';
   1:a:='boolean';
   2:a:='integer';
   3:a:='bitString';
   4:a:='octetString';
   5:a:='null';
   6:a:='object';
   7:a:='objectDescriptor';
   8:a:='external';
   9:a:='real';
  10:a:='enumerated';
  12:a:='utf8string';
  16:a:='sequence';
  17:a:='set';
  18:a:='numericString';
  19:a:='printableString';
  20:a:='t61string';
  20:a:='teletexString';
  21:a:='videotexString';
  22:a:='ia5string';
  23:a:='utcTime';
  24:a:='generalizedTime';
  25:a:='graphicString';
  26:a:='iso64string';
  26:a:='visibleString';
  27:a:='generalString';
  28:a:='universalString';
  30:a:='bmpString';
  $102:a:='negInteger';
  $10a:a:='negEnumerated';
  else a:='unknown:'+BStr(i);
  end;
convertASN1type:=a;
End;
