Function AddOneIface(pid:LongInt;nam:String):Boolean;
Label f1,f2;
Var
  d:OneIfaceDescriptorRec;
  i,o,p:LongInt;
  a:String;
Begin;
AddOneIface:=True;
if (IfacesNum>=MaxIfaces) then exit;
fillchar(d,sizeof(d),0);
d.name:=nam;
d.pid:=pid;
relequish;
if (pipeLineCreate(o,pid,4096,true)<>0) then exit;
d.pipe:=o;
a:='param---';
pipeLineSend(o,a[1],length(a));
p:=0;
f1:
relequish;
inc(p);
if (p>16) then begin;
  pipeLineClose(o);
  exit;
  end;
i:=250;
if (pipeLineRecv(o,a[1],i)<>0) then i:=0;
if (i<1) then goto f1;
pipeLineClose(o);
a[0]:=chr(i);
if (copy(a,1,5)<>'param') then exit;
move(a[6],i,sizeof(i));d.LocalIP:=i;
if (i=0) then exit;
move(a[10],i,sizeof(i));d.GateWay:=i;
move(a[14],i,sizeof(i));d.NetMask:=i;
d.mcastIP:=d.LocalIP and i;
d.bcastIP:=(not i) or d.mcastIP;
relequish;
if (pipeLineCreate(o,pid,65536,true)<>0) then exit;
d.pipe:=o;
a:='data----';
pipeLineSend(o,a[1],length(a));
p:=0;
f2:
relequish;
inc(p);
if (p>16) then begin; pipeLineClose(o);exit; end;
i:=250;
if (pipeLineRecv(o,a[1],i)<>0) then i:=0;
if (i<1) then goto f2;
a[0]:=chr(i);
if (a<>'data') then begin; pipeLineClose(o);exit; end;
inc(IfacesNum);
IfacesDat[IfacesNum]:=d;
if (IfacesNum<=1) then LocalAddr:=d.LocalIP;
AddOneIface:=False;
End;

Function DelOneIface(num:LongInt):Boolean;
Var i:LongInt;
Begin;
DelOneIface:=True;
if (num<1) or (num>IfacesNum) then exit;
pipeLineClose(IfacesDat[num].pipe);
for i:=num+1 to IfacesNum do IfacesDat[i-1]:=IfacesDat[i];
dec(IfacesNum);
if (num=1) then LocalAddr:=IfacesDat[1].LocalIP;
if (IfacesNum<1) then LocalAddr:=LocalHost;
DelOneIface:=False;
End;

Function AddOneRoute(sq,si,sm,ti,tm,fi:LongInt):Boolean;
Var
  i:LongInt;
  d:OneRouteDescriptorRec;
Begin;
AddOneRoute:=True;
if (RoutesNum>=MaxRoutes) then exit;
if (sq<1) or (sq-1>RoutesNum) then exit;
d.SrcIP:=si and sm;
d.SrcMK:=sm;
d.TrgIP:=ti and tm;
d.TrgMK:=tm;
d.Final:=fi;
inc(RoutesNum);
for i:=RoutesNum downto sq do RoutesDat[i]:=RoutesDat[i-1];
RoutesDat[sq]:=d;
AddOneRoute:=False;
End;

Function DelOneRoute(num:LongInt):Boolean;
Var i:LongInt;
Begin;
DelOneRoute:=True;
if (num<1) or (num>RoutesNum) then exit;
for i:=num+1 to RoutesNum do RoutesDat[i-1]:=RoutesDat[i];
dec(RoutesNum);
DelOneRoute:=False;
End;
