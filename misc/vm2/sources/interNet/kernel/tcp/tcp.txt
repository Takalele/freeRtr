char for tcp, (block for udp) pipeline should opened for this process...
after the open, the caller should send the control
packet immediately... when this process is ready, it
will answer to it.. the control packet has the following
format:
dword: command...
16 bytes: ip address...
dword: remote port number...
dword: local port number...

commands are the following:
1-tcp.connect...
2-tcp.listen...
3-tcp.connected...
4-udp.listen...
5-udp.data...
6-rtp.connect...
7-ip.listen...

when the tcp.connect command is received, the tcp tries to connect
to the target server at the specified port... if fails, it will
close the connection... if succeeds, it will send the local
parameters as a tcp.connected packet...

when tcp.listen command is received, the tcp looks at the port...
if it's zero (or the requested one is already used), then will
assign an unused port number to it... the address's first dword
is the size of the new pipelines that will be opened...
one tcp.connected reply will be sent with the local parameters
after the successful open... if the caller closes this connection,
then no more incomning connectinos will be accepted...
when an incoming connection arrives to a listening port, the tcp
will open a new pipeline to the listening process, and will send
a tcp.connected packet...

after the tcp.connected packet, everything is sent to the tcp, it will
be sent over the tcp connection, and everything is received over the
tcp, that will be sent over the connection...

udp.listen works nearly the same as tcp.listen does, but when a
packet arrives to the listening udp port, then no more connection
will be opened, but the listening connection will be used for
transmitting the udp.data message postfixed with the
data received from the port, and the client may send back data
prefixed with udp.data message...
