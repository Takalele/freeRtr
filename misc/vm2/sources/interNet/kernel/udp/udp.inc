Function doConn(var con:OneConnectionRecord):Boolean;
Label f1,f2;
Var
  buf:array[1..4096] of byte;
  tcp:OneTCPcommandHeader;
  i,o,p,q:LongInt;
  a:String;
Begin;
doConn:=false;
case con.stat of
  3:begin; {connected}
    p:=sizeof(buf);
    pipeLineRecv(con.pipeL,buf,p);
    if (p>0) then UDPsendPacket(con.pipeT,con.addr,con.portR,buf,p) else begin;
      pipeLineStats(con.pipeL,o,i,i);
      if (o=0) then goto f1;
      end;
    f2:
    p:=sizeof(buf);
    if (UDPreceivePacket(con.pipeT,a,q,buf,p)<>0) then p:=0;
    if (p<1) then begin;
      pipeLineStats(con.pipeT,o,i,i);
      if (o=0) then goto f1;
      exit;
      end;
    o:=FindOneSession(a,q,con.portL);
    if (o<>0) then begin;
      pipeLineSend(ConnectionDat^[o].pipeL,buf,p);
      exit;
      end;
    o:=FindOneLocalListen(con.portL);
    if (o<1) then exit;
    if ResizeMem(ConnectionNum+1) then begin;
      WriteLn('failed to allocate memory!');
      exit;
      end;
    ConnectionDat^[ConnectionNum]:=con;
    pipeLineCreate(con.pipeL,con.proc,65536,true);
    move(a,con.addr,sizeof(con.addr));
    con.portR:=q;
    con.stat:=3;
    fillchar(tcp,sizeof(tcp),0);
    tcp.cmd:=3;
    move(con.addr,tcp.adr,sizeof(tcp.adr));
    tcp.prt:=con.portR;
    tcp.dat:=con.portL;
    pipeLineSend(con.pipeL,tcp,sizeof(tcp));
    pipeLineSend(con.pipeL,buf,p);
    exit;
    end;
  2:begin; {listening}
    pipeLineStats(con.pipeL,o,i,i);
    if (o=0) then goto f1;
    goto f2;
    end;
  1:begin; {get command}
    o:=sizeof(buf);
    pipeLineRecv(con.pipeL,buf,o);
    if (o<1) then begin;
      pipeLineStats(con.pipeL,o,i,i);
      if (o<>con.proc) then goto f1;
      exit;
      end;
    if (o<>sizeof(tcp)) then goto f1;
    move(buf,tcp,sizeof(tcp));
    case tcp.cmd of
      6:begin; {rtp connect}
        for o:=1 to listenNum do if (FindOneSession(tcp.adr,tcp.prt,listenPort[o])=0) then begin;
          move(tcp.adr,con.addr,sizeof(con.addr));
          con.pipeT:=listenPipe[o];
          con.portL:=listenPort[o];
          con.portR:=tcp.prt;
          con.stat:=3;
          fillchar(tcp,sizeof(tcp),0);
          tcp.cmd:=3;
          move(serverAddr,tcp.adr,sizeof(tcp.adr));
          tcp.prt:=con.portL;
          pipeLineSend(con.pipeL,tcp,sizeof(tcp));
          exit;
          end;
        goto f1;
        end;
      2:begin; {tcp listen}
        BugOS_ProcessName(con.proc,buf,i,i,o);
        if (o and $40=0) then tcp.prt:=0;
        con.portL:=tcp.prt;
        UDPlistenOnPort(con.pipeT,65536,a,con.portL);
        con.stat:=2;
        fillchar(tcp,sizeof(tcp),0);
        tcp.cmd:=3;
        move(serverAddr,tcp.adr,sizeof(tcp.adr));
        tcp.prt:=con.portL;
        pipeLineSend(con.pipeL,tcp,sizeof(tcp));
        exit;
        end;
      end;
    goto f1;
    end;
  else begin; f1:con.stat:=0;doConn:=true; end;
  end;
End;
