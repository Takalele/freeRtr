Procedure doUpper;
Var
  buf:array[1..4096] of byte;
  i,o,p:LongInt;
  a:String;
Begin;
if (upperPipe=0) then begin;
  if (pipeLineGetIncoming(upperPipe)<>0) then exit;
  BugOS_MyProcessInfo(i,o,p);
  i:=i xor p xor o;
  p:=((i shr 16) xor i) and $ffff;
  a:='12341234'#0#0#0#0#0#0#0#0+chr(p)+#255+'ces with '+ipAddr2string(remoteAddr)+' '+BStr(remotePort)+#0;
  i:=1;move(i,a[1],sizeof(i));
  i:=1500;move(i,a[5],sizeof(i));
  pipeLineSend(upperPipe,a[1],length(a));
  WriteLn('upper logged in!');
  exit;
  end;
p:=sizeof(buf);
if (pipeLineRecv(upperPipe,buf,p)<>0) then p:=0;
if (p<1) then begin;
  pipeLineStats(upperPipe,o,i,i);
  if (o<>0) then exit;
  WriteLn('upper logged out!');
  upperPipe:=0;
  exit;
  end;
o:=buf[1];
if (o<1) or (o>GroupNumber) then begin;
  WriteLn('upper want to send to nonexistent group!');
  o:=1;
  end;
ConnectionDat^[o].lst:=buf[p];
dec(p);
if (ConnectionDat^[o].txS+p>maxBufferSize) then begin;
  WriteLn('output buffer full in group '+BStr(o));
  exit;
  end;
move(buf[2],ConnectionDat^[o].txB[ConnectionDat^[o].txS+1],p);
inc(ConnectionDat^[o].txS,p);
End;




Procedure doLower;
Var
  buf:array[1..4096] of byte;
  i,o,p,q:LongInt;
  a:String;
Begin;
if (getTimePast(lastGotTime)>60) then immErr('peer not sending anymore!');
p:=sizeof(buf);
if UDPreceivePacket(serverPipe,a,i,buf,p) then p:=0;
if (p<1) then exit;
if (i<>remotePort) or not TCPcompareAddress(a,remoteAddr) then begin;
  WriteLn('got packet from '+ipAddr2string(a)+' '+BStr(i));
  exit;
  end;
if (p-16<>packetSize) then begin;
  WriteLn('got invalid packet size!');
  exit;
  end;
i:=ReadWordMSB(buf[3]) and $7fff;
if (i=lastGotPack) then exit;
lastGotPack:=i;
lastGotTime:=currentTime;
if (upperPipe=0) then exit;
for i:=1 to GroupNumber do begin;
  ConnectionDat^[i].rxS:=1;
  ConnectionDat^[i].rxB[1]:=i;
  end;
o:=0;
for i:=17 to p do begin;
  o:=(o mod ConnectionNum)+1;
  p:=bytes2buffer[o];
  if (p<1) then continue;
  inc(ConnectionDat^[p].rxS);
  ConnectionDat^[p].rxB[ConnectionDat^[p].rxS]:=buf[i];
  end;
for i:=1 to GroupNumber do
 pipeLineSend(upperPipe,ConnectionDat^[i].rxB,ConnectionDat^[i].rxS);
End;



Procedure doSender;
Var
  buf:array[1..4096] of byte;
  i,o,p,q:LongInt;
Begin;
if (lastSentTime=currentTime) then exit;
lastSentTime:=currentTime;
inc(lastPackSiz,bytePerTick);
if (lastPackSiz<packetSize) then exit;
dec(lastPackSiz,packetSize);
lastSentTime:=currentTime;
inc(lastPackSeq);
inc(lastPackTim,(packetSize div ConnectionNum) shr 3);
WriteWordMSB(buf[1],$8000);
WriteWordMSB(buf[3],lastPackSeq and $7fff);
WriteLongMSB(buf[5],lastPackTim);
WriteLongMSB(buf[9],0);
WriteLongMSB(buf[13],$8000);
for i:=1 to GroupNumber do ConnectionDat^[i].pos:=0;
o:=0;
for i:=17 to packetSize+16 do begin;
  o:=(o mod ConnectionNum)+1;
  p:=bytes2buffer[o];
  if (p<1) then begin;
    buf[i]:=$7e;
    continue;
    end;
  if (ConnectionDat^[p].pos>=ConnectionDat^[p].txS) then begin;
    buf[i]:=ConnectionDat^[p].lst;
    continue;
    end;
  inc(ConnectionDat^[p].pos);
  buf[i]:=ConnectionDat^[p].txB[ConnectionDat^[p].pos];
  end;
for i:=1 to GroupNumber do begin;
  dec(ConnectionDat^[i].txS,ConnectionDat^[i].pos);
  if (ConnectionDat^[i].txS<1) then begin;
    ConnectionDat^[i].txS:=0;
    ConnectionDat^[i].pos:=0;
    continue;
    end;
  move(ConnectionDat^[p].txB[ConnectionDat^[i].pos+1],ConnectionDat^[p].txB,ConnectionDat^[i].txS);
  ConnectionDat^[i].pos:=0;
  end;
UDPsendPacket(serverPipe,remoteAddr,remotePort,buf,packetSize+16);
End;
