Type
  dhcpMessageHeader=record
    opcode:byte;
    htype:byte;
    hlen:byte;
    hops:byte;
    xid:LongInt;
    secs:Word;
    flags:Word;
    ciaddr:LongInt;
    yiaddr:LongInt;
    siaddr:LongInt;
    giaddr:LongInt;
    chaddr:array[1..16] of byte;
    sname:array[1..64] of byte;
    filen:array[1..128] of byte;
    magic:LongInt;
    end;
Const
  dhcpMagicCookie=$63825363;

Function ReceivePacket:Boolean;
Label f1,f2,f3;
Var
  bufD:array[1..4*1024] of byte;
  bufS:LongInt;
  bufP:LongInt;
  ad:OneTCPaddressRecord;
  conNum:LongInt;
  dhcpTyp:LongInt;
  hdr:dhcpMessageHeader;
  i,o,p:LongInt;
  a,b:String;

Function ip2str(a:string):string;
Begin;
a:=IPv4addressPrefix+a+#0#0#0#0;
ip2str:=ipAddr2string(a[1]);
End;

Function onoff2str(i:byte):string;
Begin;
if (i<>0) then onoff2str:='on' else onoff2str:='off';
End;

Procedure fillStr(var buf;len:Word;a:String);
Begin;
a:=copy(a,1,len);
while (length(a)<len) do a:=a+#0;
move(a[1],buf,len);
End;

Procedure addOption(t:Byte;a:String);
Begin;
inc(bufS);
bufD[bufS]:=t;
inc(bufS);
move(a,bufD[bufS],sizeof(a));
inc(bufS,length(a));
End;

Function getStr(var buf;len:LongInt):String;
Var a:string;
Begin;
a[0]:=chr(len);
move(buf,a[1],len);
len:=pos(#0,a);
if (len<1) then len:=666;
getStr:=copy(a,1,len-1);
End;

Procedure dumpPack(fromServ:Boolean);
Label f1,f2,f3,f4;
Const beg='  ';
Var
  ab:array[0..1] of byte absolute a;
  ab0:byte absolute a;
Begin;
WriteLn(beg+'htyp='+BStr(hdr.htype)+'  hlen='+BStr(hdr.hlen)+'  secs='+BStr(ReadWordMSB(hdr.secs))+'  xid='+BStr(hdr.xid));
a:=IPv4addressPrefix;
move(a[1],ad,sizeof(ad));
move(hdr.ciaddr,ad[ip4addrBegin],sizeof(hdr.ciaddr));
a:='';
for i:=1 to hdr.hlen do a:=a+'-'+byte2hextype(hdr.chaddr[i]);
WriteLn(beg+'chaddr='+copy(a,2,255)+'  ciaddr='+ipAddr2string(ad));
if fromServ then begin;
  move(hdr.yiaddr,ad[ip4addrBegin],sizeof(hdr.yiaddr));
  Write(beg+'yiaddr='+ipAddr2string(ad));
  move(hdr.siaddr,ad[ip4addrBegin],sizeof(hdr.siaddr));
  Write(' siaddr='+ipAddr2string(ad));
  move(hdr.giaddr,ad[ip4addrBegin],sizeof(hdr.giaddr));
  WriteLn(' giaddr='+ipAddr2string(ad));
  WriteLn(beg+'sname='+getStr(hdr.sname,sizeof(hdr.sname))+' file='+getStr(hdr.filen,sizeof(hdr.filen)));
  end;
dhcpTyp:=-1;
if (ReadLongMSB(hdr.magic)<>dhcpMagicCookie) then exit;
bufP:=sizeof(hdr);
f1:
if (bufP>=bufS) then exit;
inc(bufP);
p:=bufD[bufP];
if (p=0) then goto f1;
if (p=255) then exit;
inc(bufP);
move(bufD[bufP],a,sizeof(a));
inc(bufP,ab0);
case p of
  1:writeLn(beg+'subnet mask='+ip2str(a));
  2:writeLn(beg+'time offset='+BStr(ReadLongMSB(a[1])));
  3:begin;
    write(beg+'routers=');
    f2:
    while (ab0>=4) do begin;
      Write(' '+ip2str(a));
      a:=copy(a,5,255);
      end;
    WriteLn('');
    end;
  4:begin; write(beg+'time servers=');goto f2; end;
  5:begin; write(beg+'name servers=');goto f2; end;
  6:begin; write(beg+'dns=');goto f2; end;
  7:begin; write(beg+'log servers=');goto f2; end;
  8:begin; write(beg+'cookie servers=');goto f2; end;
  9:begin; write(beg+'lpr servers=');goto f2; end;
  10:begin; write(beg+'impress servers=');goto f2; end;
  11:begin; write(beg+'resloc servers=');goto f2; end;
  12:writeLn(beg+'host name="'+a+'"');
  13:writeLn(beg+'boot size='+BStr(ReadWordMSB(a[1])*512));
  14:writeLn(beg+'dump file="'+a+'"');
  15:writeLn(beg+'domain name="'+a+'"');
  16:writeLn(beg+'swap server='+ip2str(a));
  17:writeLn(beg+'root path='+ip2str(a));
  18:writeLn(beg+'extension path="'+a+'"');
  19:writeLn(beg+'forwarding='+onoff2str(ab[1]));
  20:writeLn(beg+'source routing='+onoff2str(ab[1]));
  21:begin; write(beg+'policy filter=');goto f2; end;
  22:writeLn(beg+'datagram max='+BStr(ReadWordMSB(a[1])));
  23:writeLn(beg+'default ttl='+BStr(ab[1]));
  24:writeLn(beg+'path mtu aging='+BStr(ReadLongMSB(ab[1])));
  25:begin;
    write(beg+'path mtu plateau=');
    f4:
    while (ab0>=2) do begin;
      Write(' '+BStr(ReadWordMSB(ab[1])));
      a:=copy(a,3,255);
      end;
    WriteLn('');
    end;
  26:writeLn(beg+'default mtu='+BStr(ReadWordMSB(a[1])));
  27:writeLn(beg+'all subnets are local='+onoff2str(ab[1]));
  28:writeLn(beg+'broadcast address='+ip2str(a));
  29:writeLn(beg+'mask discovery='+onoff2str(ab[1]));
  30:writeLn(beg+'mask supplier='+onoff2str(ab[1]));
  31:writeLn(beg+'router discovery='+onoff2str(ab[1]));
  32:writeLn(beg+'router solicitation='+ip2str(a));
  33:begin; write(beg+'static route=');goto f2; end;
  34:writeLn(beg+'trailer encapsulation='+onoff2str(ab[1]));
  35:writeLn(beg+'arp cache timeout='+BStr(ReadLongMSB(ab[1])));
  36:writeLn(beg+'ethernet encapsulation='+onoff2str(ab[1]));
  37:writeLn(beg+'tcp ttl='+BStr(ab[1]));
  38:writeLn(beg+'tcp keepalive period='+BStr(ReadLongMSB(ab[1])));
  39:writeLn(beg+'tcp keepalive garbage='+onoff2str(ab[1]));
  40:writeLn(beg+'nis domain name="'+a+'"');
  41:begin; write(beg+'nis servers=');goto f2; end;
  42:begin; write(beg+'nettime servers=');goto f2; end;
  43:begin; write(beg+'vendor=');goto f3; end;
  44:begin; write(beg+'netbios ns=');goto f2; end;
  45:begin; write(beg+'netbios dd=');goto f2; end;
  46:writeLn(beg+'netbios type='+BStr(ab[1]));
  47:begin; write(beg+'netbios scope=');goto f3; end;
  48:begin; write(beg+'x font servers=');goto f2; end;
  49:begin; write(beg+'x display servers=');goto f2; end;
  50:writeLn(beg+'requested ip address='+ip2str(a));
  51:writeLn(beg+'lease time='+BStr(ReadLongMSB(ab[1])));
  52:writeLn(beg+'option overload='+BStr(ab[1]));
  53:begin;
    dhcpTyp:=ab[1];
    case dhcpTyp of
      1:a:='discover';
      2:a:='offer';
      3:a:='request';
      4:a:='decline';
      5:a:='ack';
      6:a:='nak';
      7:a:='release';
      8:a:='inform';
      9:a:='forcerenew';
      else a:='unknown: '+byte2hextype(dhcpTyp);
      end;
    writeLn(beg+'message type='+a);
    end;
  54:writeLn(beg+'dhcp server='+ip2str(a));
  55:begin; write(beg+'requested parameters=');goto f3; end;
  56:writeLn(beg+'message="'+a+'"');
  57:writeLn(beg+'dhcp size='+BStr(ReadWordMSB(a[1])));
  58:writeLn(beg+'renewal time='+BStr(ReadLongMSB(ab[1])));
  59:writeLn(beg+'rebinding time='+BStr(ReadLongMSB(ab[1])));
  60:begin; write(beg+'vendor identifier=');goto f3; end;
  61:begin; write(beg+'client identifier=');goto f3; end;
  64:writeLn(beg+'nis+ domain name="'+a+'"');
  65:begin; write(beg+'nis+ servers=');goto f2; end;
  66:writeLn(beg+'tftp server="'+a+'"');
  67:writeLn(beg+'bootfile name="'+a+'"');
  68:begin; write(beg+'mobile ip homes=');goto f2; end;
  69:begin; write(beg+'smtp servers=');goto f2; end;
  70:begin; write(beg+'pop3 servers=');goto f2; end;
  71:begin; write(beg+'nntp servers=');goto f2; end;
  72:begin; write(beg+'http servers=');goto f2; end;
  73:begin; write(beg+'finger servers=');goto f2; end;
  74:begin; write(beg+'irc servers=');goto f2; end;
  75:begin; write(beg+'streetTalk servers=');goto f2; end;
  76:begin; write(beg+'streetTalk directories=');goto f2; end;
  77:begin; write(beg+'user class=');goto f3; end;
  78:begin; write(beg+'slp servers=');a:=copy(a,2,255);goto f2; end;
  79:begin; write(beg+'slp scope=');goto f3; end;
  82:begin; write(beg+'relay agent=');goto f3; end;
  85:begin; write(beg+'nds servers=');goto f2; end;
  86:writeLn(beg+'nds tree="'+a+'"');
  87:begin; write(beg+'nds context=');goto f3; end;
  90:begin; write(beg+'authentication=');goto f3; end;
  98:writeLn(beg+'user auth url="'+a+'"');
  116:writeLn(beg+'autoconfig='+onoff2str(ab[1]));
  117:begin; write(beg+'name services=');goto f4; end;
  118:writeLn(beg+'subnet select='+ip2str(a));
  120:begin; write(beg+'sip servers=');goto f3; end;
  121:begin; write(beg+'classless routing=');a:=copy(a,2,255);goto f2; end;
  else begin;
    write(beg+'$'+byte2hexType(p)+':');
    f3:
    for i:=1 to ab0 do Write(' '+byte2hexType(ab[i]));
    WriteLn('');
    end;
  end;

goto f1;
End;


Begin;
ReceivePacket:=False;
bufS:=sizeof(bufD);
if UDPreceivePacket(pipeCmd,a,o,bufD,bufS) then exit;
ReceivePacket:=True;
if (o<>portCmd+1) then begin;
  WriteLn('got from invalid port!');
  exit;
  end;
if (bufS<sizeof(hdr)) then begin;
  WriteLn('got a too short message!');
  exit;
  end;
move(bufD,hdr,sizeof(hdr));
if (hdr.opcode<>1) then begin;
  WriteLn('got an invalid opcode!');
  exit;
  end;
if (hdr.hlen>sizeof(hdr.chaddr)) then begin;
  WriteLn('got an invalid hardware address length!');
  exit;
  end;
WriteLn('got query packet:');
dumpPack(false);
fillchar(ad,sizeof(ad),0);
move(hdr.chaddr,ad,hdr.hlen);
conNum:=FindOneHardwareAddr(ad);
if (conNum=0) then begin;
  conNum:=FindOneInternetAddr(hdr.ciaddr);
  if (conNum<>0) then if (ConnectionDat^[conNum].typ<>0) then conNum:=0;
  end;
if (conNum=0) then conNum:=FindOneFreeAddress;
if (conNum=0) then begin;
  WriteLn('no more free addresses, cannot reply...');
  exit;
  end;
ConnectionDat^[conNum].hwA:=ad;
if (ConnectionDat^[conNum].typ=0) then ConnectionDat^[conNum].typ:=1;
ConnectionDat^[conNum].tim:=currentTime;

a:=IPv4addressPrefix;
move(a[1],ad,sizeof(ad));
move(ConnectionDat^[conNum].ipA,ad[ip4addrBegin],sizeof(ConnectionDat^[conNum].ipA));
WriteLn('delegated='+ipAddr2string(ad));
if (dhcpTyp=7) then begin;
  if (ConnectionDat^[conNum].typ=1) then ConnectionDat^[conNum].typ:=0;
  WriteLn('ip address now released!');
  exit;
  end;
a:='arpadd--';
move(ConnectionDat^[conNum].ipA,a[9],4);
move(ConnectionDat^[conNum].hwA,a[13],128);
a[0]:=#120;
lowLevelQuery(a);
if (a<>'ok') then begin;
  WriteLn('lower level refused to accept address, cannot reply...');
  exit;
  end;

hdr.opcode:=2;
hdr.hops:=0;
hdr.secs:=0;
hdr.yiaddr:=ConnectionDat^[conNum].ipA;
move(addrCmd[ip4addrBegin],hdr.siaddr,sizeof(hdr.siaddr));
fillStr(hdr.sname,sizeof(hdr.sname),bootServ);
fillStr(hdr.filen,sizeof(hdr.filen),bootFile);
WriteLongMSB(hdr.magic,dhcpMagicCookie);
fillChar(bufD,sizeof(bufD),0);
move(hdr,bufD,sizeof(bufD));
bufS:=sizeof(hdr);
case dhcpTyp of
  1:i:=2;
  3:i:=5;
  else i:=-1;
  end;
if (i>0) then addOption(53,chr(i));
a[0]:=#4;
move(addrCmd[ip4addrBegin],a[1],128);
addOption(54,a);
WriteLongMSB(a[1],leaseTime);
addOption(51,a);
move(maskAddr[ip4addrBegin],a[1],128);
addOption(1,a);
move(gateAddr[ip4addrBegin],a[1],128);
addOption(3,a);
addOption(6,dnsLists);
addOption(15,domainNam);
addOption(28,#255#255#255#255);
addOption(255,'');
i:=sizeof(hdr)+60;
if (bufS<i) then bufS:=i;
a:=IPv4addressPrefix;
move(a[1],ad,sizeof(ad));
move(ConnectionDat^[conNum].ipA,ad[ip4addrBegin],sizeof(ConnectionDat^[conNum].ipA));
UDPsendPacket(pipeCmd,ad,portCmd+1,bufD,bufS);
WriteLn('sent response packet:');
dumpPack(true);
End;
