Function getRadiusAttrib(var d:OneRadiusPacketRecord):String;
Var
  a:String;
  ab:array[0..128] of byte absolute a;
  ab0:byte absolute a;
Begin;
getRadiusAttrib:='';
ab[1]:=d.dat[d.pos+1];
ab0:=d.dat[d.pos+2];
inc(d.pos,2);
if (ab0<2) then exit;
dec(ab0,2);
if (d.pos+ab0>d.siz) then exit;
move(d.dat[d.pos+1],ab[2],ab0);
inc(d.pos,ab0);
inc(ab0);
getRadiusAttrib:=a;
End;

Procedure putRadiusAttrib(var d:OneRadiusPacketRecord;typ:Byte;a:String);
Const max=253;
Var
  ab:array[0..128] of byte absolute a;
  ab0:byte absolute a;
Begin;
if (ab0>max) then ab0:=max;
d.dat[d.siz+1]:=typ;
inc(ab0,2);
move(ab,d.dat[d.siz+2],ab0);
inc(d.siz,ab0);
End;



Function getRadiusPacketCode(i:LongInt):String;
Var a:String;
Begin;
case i of
   1:a:='access-request';
   2:a:='access-accept';
   3:a:='access-reject';
   4:a:='accounting-request';
   5:a:='accounting-response';
   6:a:='accounting-status';
   7:a:='password-request';
   8:a:='password-ack';
   9:a:='password-reject';
  10:a:='accounting-message';
  11:a:='access-challenge';
  12:a:='status-server';
  13:a:='status-client';
  21:a:='resource-free-request';
  22:a:='resource-free-response';
  23:a:='resource-query-request';
  24:a:='resource-query-response';
  25:a:='alternate-resource-reclaim-request';
  26:a:='nas-reboot-request';
  27:a:='nas-reboot-response';
  29:a:='next-passcode';
  30:a:='new-pin';
  31:a:='terminate-session';
  32:a:='password-expired';
  33:a:='event-request';
  34:a:='event-response';
  40:a:='disconnect-request';
  41:a:='disconnect-ack';
  42:a:='disconnect-nak';
  43:a:='coa-request';
  44:a:='coa-ack';
  45:a:='coa-nak';
  50:a:='ip-address-allocate';
  51:a:='ip-address-release';
  else a:='unknown#'+BStr(i);
  end;
getRadiusPacketCode:=a;
End;

Function getRadiusEntryType(i:LongInt;accounting:Boolean):String;
Var a:String;
Begin;
if accounting then case i of
   40:a:='acct-status-type';
   41:a:='acct-delay-time';
   42:a:='acct-input-octets';
   43:a:='acct-output-octets';
   44:a:='acct-session-id';
   45:a:='acct-authentic';
   46:a:='acct-session-time';
   47:a:='acct-input-packets';
   48:a:='acct-output-packets';
   49:a:='acct-terminate-cause';
   50:a:='acct-multi-session-id';
   51:a:='acct-link-count';
   52:a:='acct-input-gigawords';
   53:a:='acct-output-gigawords';
   55:a:='event-timestamp';
   64:a:='tunnel-type';
   65:a:='tunnel-medium-type';
   66:a:='tunnel-client-endpoint';
   67:a:='tunnel-server-endpoint';
   68:a:='acct-tunnel-connection';
   69:a:='tunnel-password';
   70:a:='arap-password';
   71:a:='arap-features';
   72:a:='arap-zone-access';
   73:a:='arap-security';
   74:a:='arap-security-data';
   75:a:='password-retry';
   76:a:='prompt';
   77:a:='connect-info';
   78:a:='configuration-token';
   79:a:='eap-message';
   80:a:='message-authenticator';
   81:a:='tunnel-private-group-id';
   82:a:='tunnel-assignment-id';
   83:a:='tunnel-preference';
   84:a:='arap-challenge-response';
   85:a:='acct-interim-interval';
   86:a:='acct-tunnel-packets-lost';
   87:a:='nas-port-id';
   88:a:='framed-pool';
   89:a:='changeable-user-id';
  else a:='';
  end else case i of
    1:a:='user-name';
    2:a:='user-password';
    3:a:='chap-password';
    4:a:='nas-ip-address';
    5:a:='nas-port';
    6:a:='service-type';
    7:a:='framed-protocol';
    8:a:='framed-ip-address';
    9:a:='framed-ip-netmask';
   10:a:='framed-routing';
   11:a:='filter-id';
   12:a:='framed-mtu';
   13:a:='framed-compression';
   14:a:='login-ip-host';
   15:a:='login-service';
   16:a:='login-tcp-port';
   18:a:='reply-message';
   19:a:='callback-number';
   20:a:='callback-id';
   22:a:='framed-route';
   23:a:='framed-ipx-network';
   24:a:='state';
   25:a:='class';
   26:a:='vendor-specific';
   27:a:='session-timeout';
   28:a:='idle-timeout';
   29:a:='termination-action';
   30:a:='called-station-id';
   31:a:='calling-station-id';
   32:a:='nas-identifier';
   33:a:='proxy-state';
   34:a:='login-lat-service';
   35:a:='login-lat-node';
   36:a:='login-lat-group';
   37:a:='framed-appletalk-link';
   38:a:='framed-appletalk-network';
   39:a:='framed-appletalk-zone';
   40:a:='acct-status-type';
   41:a:='acct-delay-time';
   42:a:='acct-input-octets';
   43:a:='acct-output-octets';
   44:a:='acct-session-id';
   45:a:='acct-authentic';
   46:a:='acct-session-time';
   47:a:='acct-input-packets';
   48:a:='acct-output-packets';
   49:a:='acct-terminate-cause';
   50:a:='acct-multi-session-id';
   51:a:='acct-link-count';
   52:a:='acct-input-gigawords';
   53:a:='acct-output-gigawords';
   55:a:='event-timestamp';
   60:a:='chap-challenge';
   61:a:='nas-port-type';
   62:a:='port-limit';
   63:a:='login-lat-port';
   64:a:='tunnel-type';
   65:a:='tunnel-medium-type';
   66:a:='tunnel-client-endpoint';
   67:a:='tunnel-server-endpoint';
   68:a:='acct-tunnel-connection';
   69:a:='tunnel-password';
   70:a:='arap-password';
   71:a:='arap-features';
   72:a:='arap-zone-access';
   73:a:='arap-security';
   74:a:='arap-security-data';
   75:a:='password-retry';
   76:a:='prompt';
   77:a:='connect-info';
   78:a:='configuration-token';
   79:a:='eap-message';
   80:a:='message-authenticator';
   81:a:='tunnel-private-group-id';
   82:a:='tunnel-assignment-id';
   83:a:='tunnel-preference';
   84:a:='arap-challenge-response';
   85:a:='acct-interim-interval';
   86:a:='acct-tunnel-packets-lost';
   87:a:='nas-port-id';
   88:a:='framed-pool';
   89:a:='changeable-user-id';
   90:a:='tunnel-client-auth-id';
   91:a:='tunnel-server-auth-id';
   94:a:='originating-line-info';
   95:a:='nas-ipv6-address';
   96:a:='framed-interface-id';
   97:a:='framed-ipv6-prefix';
   98:a:='login-ipv6-host';
   99:a:='framed-ipv6-route';
  100:a:='framed-ipv6-pool';
  101:a:='error-cause';
  else a:='';
  end;
getRadiusEntryType:=a;
End;

Procedure dumpOneRadiusPacket(d:OneRadiusPacketRecord;accounting:Boolean);
Label f1;
Var
  a,b:String;
  ab:array[0..1] of byte absolute a;
  ab0:byte absolute a;
  i:LongInt;
Begin;
d.pos:=0;
f1:
a:=getRadiusAttrib(d);
if (ab0=0) then exit;
i:=ab[1];
a:=copy(a,2,666);
b:=getRadiusEntryType(i,accounting);
if (b='') then b:=getRadiusEntryType(i,not accounting);
if (b='') then b:='unknown#'+BStr(i);
Write(b+':');
for i:=1 to ab0 do write(' '+byte2hextype(ab[i]));
WriteLn('');
goto f1;
End;



Function encdecRadiusPasswd(s:String;decode:Boolean):String;
Var
  ctx:CryptoContextRecord;
  a,b:String;
  ab:array[0..128] of byte absolute a;
  ab0:byte absolute a;
  sb:array[0..128] of byte absolute s;
  sb0:byte absolute s;
  i:LongInt;
Begin;
encdecRadiusPasswd:=#13;
b:='';
ab0:=sizeof(requestAuth);
move(requestAuth,ab[1],sizeof(requestAuth));
if (sb0 and $f<>0) then exit;
while (sb0>0) do begin;
  CryptoBegHasher(ctx,md5algoNum,'','');
  CryptoAddHasher(ctx,sharedSecret[1],length(sharedSecret));
  CryptoAddHasher(ctx,ab[1],ab0);
  CryptoFinHasher(ctx,ab[1],i);ab0:=i;
  for i:=1 to ab0 do ab[i]:=ab[i] xor sb[i];
  b:=b+a;
  if decode then a:=copy(s,1,16);
  s:=copy(s,17,666);
  end;
encdecRadiusPasswd:=b;
End;



Function calcRadiusRespAuth(var d:OneRadiusPacketRecord):String;
Var
  ctx:CryptoContextRecord;
  a:String;
  ab:array[0..128] of byte absolute a;
  ab0:byte absolute a;
  i:LongInt;
Begin;
CryptoBegHasher(ctx,md5algoNum,'','');
CryptoAddHasher(ctx,d.cod,sizeof(d.cod));
CryptoAddHasher(ctx,d.id,sizeof(d.id));
CryptoAddHasher(ctx,d.len,sizeof(d.len));
CryptoAddHasher(ctx,requestAuth,sizeof(requestAuth));
CryptoAddHasher(ctx,d.dat,d.siz);
CryptoAddHasher(ctx,sharedSecret[1],length(sharedSecret));
CryptoFinHasher(ctx,ab[1],i);ab0:=i;
calcRadiusRespAuth:=a;
End;

Function calcRadiusMsgAuth(var d:OneRadiusPacketRecord):String;

Procedure addPad(var d:CryptoContextRecord;num:byte);
Var
  a:String;
  ab:array[0..1] of byte absolute a;
  ab0:Byte absolute a;
  i:LongInt;
Begin;
a:=sharedSecret;
for i:=ab0+1 to 128 do ab[i]:=0;
ab0:=64;
for i:=1 to ab0 do ab[i]:=ab[i] xor num;
CryptoAddHasher(d,ab[1],ab0);
End;

Var
  c1,c2:CryptoContextRecord;
  a:String;
  ab:array[0..1] of byte absolute a;
  ab0:Byte absolute a;
  i:LongInt;
Begin;
CryptoBegHasher(c1,md5algoNum,'','');
CryptoBegHasher(c2,md5algoNum,'','');
addPad(c1,$36);
addPad(c2,$5c);
CryptoAddHasher(c1,d.cod,sizeof(d.cod));
CryptoAddHasher(c1,d.id,sizeof(d.id));
CryptoAddHasher(c1,d.len,sizeof(d.len));
CryptoAddHasher(c1,requestAuth,sizeof(requestAuth));
CryptoAddHasher(c1,d.dat,d.siz);
CryptoFinHasher(c1,a,i);
CryptoAddHasher(c2,a,i);
CryptoFinHasher(c2,ab[1],i);ab0:=i;
calcRadiusMsgAuth:=a;
End;
