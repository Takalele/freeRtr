Function doConn(var con:OneConnectionRecord;conN:LongInt):Boolean;
Var
  ntry:xDirEntryRec;

Procedure sendResp(a:String);
Begin;
a:=a+#13#10;
pipeLineSend(con.pipe,a[1],length(a));
con.time:=CurrentTime;
End;

Function getCurrDigest:String;
Var
  a:String;
  i:LongInt;
Begin;
a:='';
for i:=1 to sizeof(con.adr) do a:=a+BStr(con.adr[i])+'.';
a:=BStr(con.fileP)+'.'+BStr(con.fileS)+'.'+BStr(con.fileP xor con.fileS)+'@'+a+BStr(con.prt);
getCurrDigest:='<'+a+'>';
End;

Function getUsrPasswrd:String;
Var
  t:xtText;
  i:LongInt;
  a:String;
Begin;
getUsrPasswrd:=#13;
i:=con.usrNum;
if (i<1) or (i>usersListNum) then exit;
BugOS_SetOwnerInfo(usersListDat[i].uid);
if (xtOpen(t,usersListDat[i].path+LocalPasswordFile,true)<>0) then exit;
a:=xtReadLn(t,255);
xtClose(t);
getUsrPasswrd:=a;
End;

Function binary2digest(a:String):String;
Var
  aa:array[0..1] of byte absolute a;
  i:LongInt;
  b:String;
Begin;
b:='';
for i:=1 to aa[0] do b:=b+byte2hextype(aa[i]);
binary2digest:=kicsi(b);
End;

Function VaildateFoundFile(var d:xDirEntryRec):Boolean;
Begin;
VaildateFoundFile:=True;
if (d.rights and xRights_Directory<>0) then exit;
if (kicsi(xFileName(d.name,3))<>LocalMessageFile) then exit;
VaildateFoundFile:=False;
End;


Procedure CountMessages(var num,siz:LongInt);
Label f1,f2;
Var
  f:xFile;
  a:String;
Begin;
num:=con.usrNum;
a:=usersListDat[num].path;
BugOS_SetOwnerInfo(usersListDat[num].uid);
num:=0;
siz:=0;
if (xDirOpen(f,a)<>0) then exit;
f1:
if (xDirRead(f,ntry)<>0) then goto f2;
if (ntry.name='') then goto f2;
if VaildateFoundFile(ntry) then goto f1;
inc(num);
inc(siz,ntry.size);
goto f1;
f2:
xDirClose(f);
End;

Function FindMessage(num:LongInt):String;
Label f1,f2;
Var
  f:xFile;
  o:LongInt;
Begin;
FindMessage:='';
if (num<1) then exit;
o:=con.usrNum;
BugOS_SetOwnerInfo(usersListDat[o].uid);
if (xDirOpen(f,usersListDat[o].path)<>0) then exit;
f1:
if (xDirRead(f,ntry)<>0) then goto f2;
if (ntry.name='') then goto f2;
if VaildateFoundFile(ntry) then goto f1;
dec(num);
if (num>0) then goto f1;
FindMessage:=xFileName(ntry.name,2);
f2:
xDirClose(f);
End;


Procedure getCmd;
Label f1,f2,f3;
Var
  t:xtText;
  i,o,p:LongInt;
  a,b:String;
Begin;
f1:
if (con.ibufP>=con.ibufS) then begin;
  i:=inputBufMax;
  if (pipeLineRecv(con.pipe,con.ibufD,i)<>0) then i:=0;
  con.ibufS:=i;
  con.ibufP:=0;
  if (i<1) then begin;
    pipeLineStats(con.pipe,i,o,o);
    if (i<>0) then exit;
    con.stat:=0;
    WriteLn('connection lost with '+ipAddr2string(con.adr)+' '+BStr(con.prt));
    exit;
    end;
  con.time:=CurrentTime;
  end;
inc(con.ibufP);
i:=con.ibufD[con.ibufP];
if (i=10) then goto f1;
if (i<>13) then begin;
  con.cmd:=con.cmd+chr(i);
  goto f1;
  end;
b:=con.cmd;
con.cmd:='';
a:=kicsi(getWord(b));
if (a='quit') then begin;
  sendResp('+OK pop3 server says goodbye');
  i:=con.stat;
  con.stat:=0;
  if (i<3) then exit;
  o:=con.usrNum;
  b:=usersListDat[o].path;
  BugOS_SetOwnerInfo(usersListDat[o].uid);
  if (xtOpen(t,b+LocalDeletedFile,true)<>0) then exit;
  while not xtEOF(t) do begin;
    a:=xtReadLn(t,255);
    xErase(b+a+LocalMessageFile);
    end;
  xtClose(t);
  xErase(b+LocalDeletedFile);
  exit;
  end;
if (a='help') then begin;
  sendResp('+OK help follows');
  sendResp('server: '+ipAddr2string(serverAddr)+' '+BStr(serverPort));
  sendResp('client: '+ipAddr2string(con.adr)+' '+BStr(con.prt));
  sendResp('software: '+ProggyName);
  sendResp('');
  sendResp('the following commands are recognized (* means unimplemented)');
  sendResp('USER    PASS    APOP    RPOP*   AUTH*   QUIT    HELP    CAPA');
  sendResp('XTND*   NOOP    LAST    STAT    LIST    RETR    DELE    RSET');
  sendResp('TOP     UIDL');
  sendResp('.');
  exit;
  end;
if (a='noop') then begin;
  sendResp('+OK no operation completed');
  exit;
  end;
if (a='capa') then begin;
  sendResp('+OK capability list follows');
  sendResp('RESP-CODES');
  sendResp('LOGIN-DELAY 600');
  sendResp('EXPIRE 0');
  sendResp('APOP');
  sendResp('USER');
  sendResp('UIDL');
  sendResp('TOP');
  sendResp('IMPLEMENTATION '+ProggyName);
  sendResp('.');
  exit;
  end;
if (con.stat=2) then begin;
  if (a='rpop') then begin;
    sendResp('-ERR this type of login not supported');
    exit;
    end;
  if (a='auth') then begin;
    sendResp('-ERR this type of login not supported');
    exit;
    end;
  if (a='user') then begin;
    con.usrNum:=FindUserName(b);
    sendResp('+OK give me the password');
    exit;
    end;
  if (a='pass') then begin;
    a:=kicsi(getUsrPasswrd);
    if (a=#13) then goto f2;
    if (kicsi(b)<>a) then goto f2;
    f3:
    o:=con.usrNum;
    for i:=1 to ConnectionNum do if (ConnectionDat^[i].usrNum=o) then
     if (ConnectionDat^[i].stat>=3) then begin;
      sendResp('-ERR [IN-USE] you are logged in on an other line');
      con.stat:=0;
      exit;
      end;
    a:=usersListDat[o].path+LocalDeletedFile;
    BugOS_SetOwnerInfo(usersListDat[o].uid);
    xErase(a);
    if (xCreate(a)<>0) then goto f2;
    sendResp('+OK login succeed');
    con.stat:=3;
    exit;
    end;
  if (a='apop') then begin;
    i:=pos(' ',b);
    a:=copy(b,1,i-1);
    b:=kicsi(copy(b,i+1,255));
    i:=FindUserName(a);
    if (i<1) then goto f2;
    con.usrNum:=i;
    a:=getUsrPasswrd;
    if (a=#13) then goto f2;
    a:=getCurrDigest+a;
    i:=length(a);
    CryptoImmHasher(md5algorithm,'','',a[1],i);
    a[0]:=chr(i);
    a:=binary2digest(a);
    if (a=b) then goto f3;
    f2:
    sendResp('-ERR login failed');
    con.stat:=0;
    exit;
    end;
  end;

if (con.stat<>3) then begin;
  sendResp('-ERR command unrecognized: "'+a+'" "'+b+'"');
  exit;
  end;

if (a='xtnd') then begin;
  sendResp('-ERR no extended commands are available');
  exit;
  end;
if (a='last') then begin;
  sendResp('+OK 0');
  exit;
  end;
if (a='rset') then begin;
  o:=con.usrNum;
  a:=usersListDat[o].path+LocalDeletedFile;
  BugOS_SetOwnerInfo(usersListDat[o].uid);
  xErase(a);
  if (xCreate(a)<>0) then begin;
    sendResp('-ERR failed to do action');
    exit;
    end;
  sendResp('+OK marked messages are unerased');
  exit;
  end;
if (a='stat') then begin;
  CountMessages(i,o);
  sendResp('+OK '+BStr(i)+' '+BStr(o));
  exit;
  end;
if (a='uidl') then begin;
  if (b='') then begin;
    con.stat:=4;
    con.fileP:=0;
    CountMessages(i,o);
    if (xDirOpen(con.fileD,usersListDat[con.usrNum].path)<>0) then begin;
      sendResp('-ERR failed to do action');
      exit;
      end;
    sendResp('+OK '+BStr(i)+' messages ('+BStr(o)+' bytes)');
    exit;
    end;
  o:=BVal(b);
  a:=FindMessage(o);
  if (a='') then begin;
    sendResp('-ERR no such message');
    exit;
    end;
  sendResp('+OK '+BStr(o)+' '+a);
  exit;
  end;
if (a='list') then begin;
  if (b='') then begin;
    con.stat:=5;
    con.fileP:=0;
    CountMessages(i,o);
    if (xDirOpen(con.fileD,usersListDat[con.usrNum].path)<>0) then begin;
      sendResp('-ERR failed to do action');
      exit;
      end;
    sendResp('+OK '+BStr(i)+' messages ('+BStr(o)+' bytes)');
    exit;
    end;
  o:=BVal(b);
  a:=FindMessage(o);
  if (a='') then begin;
    sendResp('-ERR no such message');
    exit;
    end;
  sendResp('+OK '+BStr(o)+' '+BStr(ntry.size));
  exit;
  end;
if (a='dele') then begin;
  p:=BVal(b);
  a:=FindMessage(p);
  if (a='') then begin;
    sendResp('-ERR no such message');
    exit;
    end;
  o:=con.usrNum;
  BugOS_SetOwnerInfo(usersListDat[o].uid);
  if (xtOpen(t,usersListDat[o].path+LocalDeletedFile,false)<>0) then begin;
    sendResp('-ERR failed to do action');
    exit;
    end;
  xtWriteLn(t,a);
  xtClose(t);
  sendResp('+OK message '+BStr(p)+' marked for deleting');
  exit;
  end;
if (a='retr') then begin; a:='top';b:=b+' '#13; end;
if (a='top') then begin;
  p:=BVal(getWord(b));
  a:=FindMessage(p);
  if (a='') then begin;
    sendResp('-ERR no such message');
    exit;
    end;
  if (b=#13) then con.fileP:=-666 else con.fileP:=BVal(b);
  o:=con.usrNum;
  BugOS_SetOwnerInfo(usersListDat[o].uid);
  if (xtOpen(con.fileH,usersListDat[o].path+a+LocalMessageFile,true)<>0) then begin;
    sendResp('-ERR failed to do action');
    exit;
    end;
  con.sawNL:=true;
  con.fileS:=0;
  con.stat:=6;
  sendResp('+OK '+BStr(con.fileH.FileSize)+' bytes');
  exit;
  end;

sendResp('-ERR command unrecognized: "'+a+'" "'+b+'"');
End;


Label f1;
Var
  i,o,p:LongInt;
  a:String;
Begin;
if (GetTimePast(con.time)>5*60) then begin;
  WriteLn('connection timed out with '+ipAddr2string(con.adr)+' '+BStr(con.prt));
  sendResp('-ERR timeout!');
  doConn:=True;
  exit;
  end;
doConn:=False;
case con.stat of
  6:begin; {retr}
    pipeLineStats(con.pipe,i,o,p);
    if (i=0) then goto f1;
    if (p<258) then exit;
    if xtEOF(con.fileH) then begin;
      if not con.sawNL then sendResp('');
      goto f1;
      end;
    if xtEOL(con.fileH) then begin;
      a:=xtReadLn(con.fileH,255);
      if con.sawNL then begin;
        if (copy(a,1,1)='.') then a:='.'+a;
        con.fileS:=1;
        end;
      sendResp(a);
      con.sawNL:=true;
      if (con.fileS<1) then exit;
      if (con.fileP<-100) then exit;
      dec(con.fileP);
      if (con.fileP<0) then goto f1;
      exit;
      end;
    a:=xtRead(con.fileH,250);
    if con.sawNL then if (copy(a,1,1)='.') then a:='.'+a;
    pipeLineSend(con.pipe,a[1],length(a));
    con.sawNL:=false;
    con.time:=CurrentTime;
    end;
  3:getCmd; {commands}
  4:begin; {uidl}
    pipeLineStats(con.pipe,i,o,p);
    if (i=0) then begin;
      f1:
      xDirClose(con.fileD);
      xtClose(con.fileH);
      sendResp('.');
      con.stat:=3;
      exit;
      end;
    if (p<258) then exit;
    if (xDirRead(con.fileD,ntry)<>0) then goto f1;
    if (ntry.name='') then goto f1;
    if VaildateFoundFile(ntry) then exit;
    inc(con.fileP);
    sendResp(BStr(con.fileP)+' '+xFileName(ntry.name,2));
    end;
  5:begin; {list}
    pipeLineStats(con.pipe,i,o,p);
    if (i=0) then goto f1;
    if (p<258) then exit;
    if (xDirRead(con.fileD,ntry)<>0) then goto f1;
    if (ntry.name='') then goto f1;
    if VaildateFoundFile(ntry) then exit;
    inc(con.fileP);
    sendResp(BStr(con.fileP)+' '+BStr(ntry.size));
    end;
  2:getCmd; {authenticate}
  1:begin; {init}
    if TCPlookConnected(con.pipe,con.adr,con.prt,i) then begin;
      doConn:=(con.pipe=0);
      exit;
      end;
    WriteLn('connection accepted from '+ipAddr2string(con.adr)+' '+BStr(con.prt));
    con.fileP:=Random($7fffffff);
    con.fileS:=Random($7fffffff);
    sendResp('+OK pop3 server ready! '+getCurrDigest);
    con.stat:=2;
    con.cmd:='';
    con.usrNum:=0;
    end;
  0:begin; doConn:=True;exit; end; {disconnect}
  else begin; doConn:=True;exit; end;
  end;
End;
