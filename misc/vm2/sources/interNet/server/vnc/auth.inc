FUNCTION generateVNCauth(c,k:String):String;
VAR key:array[0..31] of LongWord;
CONST
  Df_Key:array[0..23] of LongWord=(
    $01,$23,$45,$67,$89,$ab,$cd,$ef,
    $fe,$dc,$ba,$98,$76,$54,$32,$10,
    $89,$ab,$cd,$ef,$01,$23,$45,$67);
  bytebit:array[0..7] of LongWord=(1,2,4,8,$10,$20,$40,$80);
  bigbyte:array[0..23] of LongWord=(
    $800000,  $400000,  $200000,  $100000,
    $80000,   $40000,   $20000,   $10000,
    $8000,    $4000,    $2000,    $1000,
    $800,     $400,     $200,     $100,
    $80,      $40,      $20,      $10,
    $8,       $4,       $2,       $1);
  pc1:array[0..55] of LongWord=(
    56, 48, 40, 32, 24, 16,  8,      0, 57, 49, 41, 33, 25, 17,
     9,  1, 58, 50, 42, 34, 26,     18, 10,  2, 59, 51, 43, 35,
    62, 54, 46, 38, 30, 22, 14,      6, 61, 53, 45, 37, 29, 21,
    13,  5, 60, 52, 44, 36, 28,     20, 12,  4, 27, 19, 11,  3);
  pc2:array[0..47] of LongWord=(
    13, 16, 10, 23,  0,  4,  2, 27, 14,  5, 20,  9,
    22, 18, 11,  3, 25,  7, 15,  6, 26, 19, 12,  1,
    40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47,
    43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31);
  totrot:array[0..15] of LongWord=(1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28);
  sp1:array[0..63] of LongWord=(
    $01010400,$00000000,$00010000,$01010404,
    $01010004,$00010404,$00000004,$00010000,
    $00000400,$01010400,$01010404,$00000400,
    $01000404,$01010004,$01000000,$00000004,
    $00000404,$01000400,$01000400,$00010400,
    $00010400,$01010000,$01010000,$01000404,
    $00010004,$01000004,$01000004,$00010004,
    $00000000,$00000404,$00010404,$01000000,
    $00010000,$01010404,$00000004,$01010000,
    $01010400,$01000000,$01000000,$00000400,
    $01010004,$00010000,$00010400,$01000004,
    $00000400,$00000004,$01000404,$00010404,
    $01010404,$00010004,$01010000,$01000404,
    $01000004,$00000404,$00010404,$01010400,
    $00000404,$01000400,$01000400,$00000000,
    $00010004,$00010400,$00000000,$01010004);
  sp2:array[0..63] of LongWord=(
    $80108020,$80008000,$00008000,$00108020,
    $00100000,$00000020,$80100020,$80008020,
    $80000020,$80108020,$80108000,$80000000,
    $80008000,$00100000,$00000020,$80100020,
    $00108000,$00100020,$80008020,$00000000,
    $80000000,$00008000,$00108020,$80100000,
    $00100020,$80000020,$00000000,$00108000,
    $00008020,$80108000,$80100000,$00008020,
    $00000000,$00108020,$80100020,$00100000,
    $80008020,$80100000,$80108000,$00008000,
    $80100000,$80008000,$00000020,$80108020,
    $00108020,$00000020,$00008000,$80000000,
    $00008020,$80108000,$00100000,$80000020,
    $00100020,$80008020,$80000020,$00100020,
    $00108000,$00000000,$80008000,$00008020,
    $80000000,$80100020,$80108020,$00108000);
  sp3:array[0..63] of LongWord=(
    $00000208,$08020200,$00000000,$08020008,
    $08000200,$00000000,$00020208,$08000200,
    $00020008,$08000008,$08000008,$00020000,
    $08020208,$00020008,$08020000,$00000208,
    $08000000,$00000008,$08020200,$00000200,
    $00020200,$08020000,$08020008,$00020208,
    $08000208,$00020200,$00020000,$08000208,
    $00000008,$08020208,$00000200,$08000000,
    $08020200,$08000000,$00020008,$00000208,
    $00020000,$08020200,$08000200,$00000000,
    $00000200,$00020008,$08020208,$08000200,
    $08000008,$00000200,$00000000,$08020008,
    $08000208,$00020000,$08000000,$08020208,
    $00000008,$00020208,$00020200,$08000008,
    $08020000,$08000208,$00000208,$08020000,
    $00020208,$00000008,$08020008,$00020200);
  sp4:array[0..63] of LongWord=(
    $00802001,$00002081,$00002081,$00000080,
    $00802080,$00800081,$00800001,$00002001,
    $00000000,$00802000,$00802000,$00802081,
    $00000081,$00000000,$00800080,$00800001,
    $00000001,$00002000,$00800000,$00802001,
    $00000080,$00800000,$00002001,$00002080,
    $00800081,$00000001,$00002080,$00800080,
    $00002000,$00802080,$00802081,$00000081,
    $00800080,$00800001,$00802000,$00802081,
    $00000081,$00000000,$00000000,$00802000,
    $00002080,$00800080,$00800081,$00000001,
    $00802001,$00002081,$00002081,$00000080,
    $00802081,$00000081,$00000001,$00002000,
    $00800001,$00002001,$00802080,$00800081,
    $00002001,$00002080,$00800000,$00802001,
    $00000080,$00800000,$00002000,$00802080);
  sp5:array[0..63] of LongWord=(
    $00000100,$02080100,$02080000,$42000100,
    $00080000,$00000100,$40000000,$02080000,
    $40080100,$00080000,$02000100,$40080100,
    $42000100,$42080000,$00080100,$40000000,
    $02000000,$40080000,$40080000,$00000000,
    $40000100,$42080100,$42080100,$02000100,
    $42080000,$40000100,$00000000,$42000000,
    $02080100,$02000000,$42000000,$00080100,
    $00080000,$42000100,$00000100,$02000000,
    $40000000,$02080000,$42000100,$40080100,
    $02000100,$40000000,$42080000,$02080100,
    $40080100,$00000100,$02000000,$42080000,
    $42080100,$00080100,$42000000,$42080100,
    $02080000,$00000000,$40080000,$42000000,
    $00080100,$02000100,$40000100,$00080000,
    $00000000,$40080000,$02080100,$40000100);
  sp6:array[0..63] of LongWord=(
    $20000010,$20400000,$00004000,$20404010,
    $20400000,$00000010,$20404010,$00400000,
    $20004000,$00404010,$00400000,$20000010,
    $00400010,$20004000,$20000000,$00004010,
    $00000000,$00400010,$20004010,$00004000,
    $00404000,$20004010,$00000010,$20400010,
    $20400010,$00000000,$00404010,$20404000,
    $00004010,$00404000,$20404000,$20000000,
    $20004000,$00000010,$20400010,$00404000,
    $20404010,$00400000,$00004010,$20000010,
    $00400000,$20004000,$20000000,$00004010,
    $20000010,$20404010,$00404000,$20400000,
    $00404010,$20404000,$00000000,$20400010,
    $00000010,$00004000,$20400000,$00404010,
    $00004000,$00400010,$20004010,$00000000,
    $20404000,$20000000,$00400010,$20004010);
  sp7:array[0..63] of LongWord=(
    $00200000,$04200002,$04000802,$00000000,
    $00000800,$04000802,$00200802,$04200800,
    $04200802,$00200000,$00000000,$04000002,
    $00000002,$04000000,$04200002,$00000802,
    $04000800,$00200802,$00200002,$04000800,
    $04000002,$04200000,$04200800,$00200002,
    $04200000,$00000800,$00000802,$04200802,
    $00200800,$00000002,$04000000,$00200800,
    $04000000,$00200800,$00200000,$04000802,
    $04000802,$04200002,$04200002,$00000002,
    $00200002,$04000000,$04000800,$00200000,
    $04200800,$00000802,$00200802,$04200800,
    $00000802,$04000002,$04200802,$04200000,
    $00200800,$00000000,$00000002,$04200802,
    $00000000,$00200802,$04200000,$00000800,
    $04000002,$04000800,$00000800,$00200002);
  sp8:array[0..63] of LongWord=(
    $10001040,$00001000,$00040000,$10041040,
    $10000000,$10001040,$00000040,$10000000,
    $00040040,$10040000,$10041040,$00041000,
    $10041000,$00041040,$00001000,$00000040,
    $10040000,$10000040,$10001000,$00001040,
    $00041000,$00040040,$10040040,$10041000,
    $00001040,$00000000,$00000000,$10040040,
    $10000040,$10001000,$00041040,$00040000,
    $00041040,$00040000,$10041000,$00001000,
    $00000040,$10040040,$00001000,$00041040,
    $10001000,$00000040,$10000040,$10040000,
    $10040040,$10000000,$00040000,$10001040,
    $00000000,$10041040,$00040040,$10000040,
    $10040000,$10001000,$10001040,$00000000,
    $10041040,$00041000,$00041000,$00001040,
    $00001040,$00040040,$10000000,$10041000);

Procedure padUp(var a:String);
Var
  ab:array[0..1] of byte absolute a;
  ab0:byte absolute a;
Begin;
while (ab0<16) do begin;
  inc(ab0);
  ab[ab0]:=0;
  end;
ab0:=16;
End;

Procedure setKey(var keybuffer;edf:LongWord);
Var
  keybuf:array[0..1] of byte absolute keybuffer;
  i,j,l,m,n:LongWord;
  pc1m:array[0..55] of byte;
  pcr:array[0..55] of byte;
  kn:array[0..31] of longWord;
Begin;
for j:=0 to 55 do begin;
  l:=pc1[j];
  m:=l and 7;
  if (keybuf[l shr 3] and bytebit[m]<>0) then i:=1 else i:=0;
  pc1m[j]:=i;
  end;
for i:=0 to 15 do begin;
  m:=0;
  n:=0;
  for j:=0 to 27 do begin;
    l:=j+totrot[i];
    if (l<28) then pcr[j]:=pc1m[l] else pcr[j]:=pc1m[l-28];
    end;
  for j:=28 to 55 do begin;
    l:=j+totrot[i];
    if (l<56) then pcr[j]:=pc1m[l] else pcr[j]:=pc1m[l-28];
    end;
  for j:=0 to 23 do begin;
    if (pcr[pc2[j]]<>0) then m:=m or bigbyte[j];
    if (pcr[pc2[j+24]]<>0) then n:=n or bigbyte[j];
    end;
  if (edf<>1) then j:=(15-i) shl 1 else j:=i shl 1;
  kn[j+0]:=m;
  kn[j+1]:=n;
  end;
m:=0;
l:=0;
for i:=0 to 15 do begin;
  n:=m;
  inc(m);
  j:=     ((kn[n] and $00fc0000) shl 6);
  j:=j or ((kn[n] and $00000fc0) shl 10);
  j:=j or ((kn[m] and $00fc0000) shr 10);
  j:=j or ((kn[m] and $00000fc0) shr 6);
  key[l]:=j;inc(l);
  j:=     ((kn[n] and $0003f000) shl 12);
  j:=j or ((kn[n] and $0000003f) shl 16);
  j:=j or ((kn[m] and $0003f000) shr 4);
  j:=j or  (kn[m] and $0000003f);
  key[l]:=j;inc(l);
  inc(m);
  end;
End;

Procedure doEnc(var b1,b2);
Var left,right,keyPos,fval,work,round:LongWord;
Begin;
left:=ReadLongMSB(b1);
right:=ReadLongMSB(b2);
work:=((left shr 4) xor right) and $0f0f0f0f;
right:=right xor work;
left:=left xor (work shl 4);
work:=((left shr 16) xor right) and $0000ffff;
right:=right xor work;
left:=left xor (work shl 16);
work:=((right shr 2) xor left) and $33333333;
left:=left xor work;
right:=right xor (work shl 2);
work:=((right shr 8) xor left) and $00ff00ff;
left:=left xor work;
right:=right xor (work shl 8);
right:=(right shl 1) or (right shr 31);
work:=(left xor right) and $aaaaaaaa;
left:=left xor work;
right:=right xor work;
left:=(left shl 1) or (left shr 31);
keyPos:=0;
for round:=0 to 7 do begin;
  work:=(right shl 28) or (right shr 4);
  work:=work xor key[keyPos];inc(keyPos);
  fval:=sp7[work and $3f];
  fval:=fval or sp5[(work shr  8) and $3f];
  fval:=fval or sp3[(work shr 16) and $3f];
  fval:=fval or sp1[(work shr 24) and $3f];
  work:=right xor key[keyPos];inc(keyPos);
  fval:=fval or sp8[work and $3f];
  fval:=fval or sp6[(work shr  8) and $3f];
  fval:=fval or sp4[(work shr 16) and $3f];
  fval:=fval or sp2[(work shr 24) and $3f];
  left:=left xor fval;
  work:=(left shl 28) or (left shr 4);
  work:=work xor key[keyPos];inc(keyPos);
  fval:=sp7[work and $3f];
  fval:=fval or sp5[(work shr  8) and $3f];
  fval:=fval or sp3[(work shr 16) and $3f];
  fval:=fval or sp1[(work shr 24) and $3f];
  work:=left xor key[keyPos];inc(keyPos);
  fval:=fval or sp8[work and $3f];
  fval:=fval or sp6[(work shr  8) and $3f];
  fval:=fval or sp4[(work shr 16) and $3f];
  fval:=fval or sp2[(work shr 24) and $3f];
  right:=right xor fval;
  end;
right:=(right shl 31) or (right shr 1);
work:=(left xor right) and $aaaaaaaa;
left:=left xor work;
right:=right xor work;
left:=(left shl 31) or (left shr 1);
work:=((left shr 8) xor right) and $00ff00ff;
right:=right xor work;
left:=left xor (work shl 8);
work:=((left shr 2) xor right) and $33333333;
right:=right xor work;
left:=left xor (work shl 2);
work:=((right shr 16) xor left) and $0000ffff;
left:=left xor work;
right:=right xor (work shl 16);
work:=((right shr 4) xor left) and $0f0f0f0f;
left:=left xor work;
right:=right xor (work shl 4);
WriteLongMSB(b2,left);
WriteLongMSB(b1,right);
End;

BEGIN;
padUp(k);
padUp(c);
setKey(k[1],1);
doEnc(c[1],c[5]);
doEnc(c[9],c[13]);
generateVNCauth:=c;
END;
