Type
  OneStreamRecord=record
    inoNum:LongInt;
    InoDat:OneInodeDataRecord;
    inoGrp:LongInt;
    Pos:LongInt;
    Siz:LongInt;
    end;

Function StreamOpen(var d:OneStreamRecord;ino:LongInt):Boolean;
Begin;
StreamOpen:=True;
fillchar(d,sizeof(d),0);
if (ReadInodeBitmap(ino,d.inoGrp)<>1) then exit;
d.inoNum:=ino;
if ReadInodeData(ino,d.inoGrp,d.inoDat) then exit;
d.pos:=0;
d.siz:=d.inoDat.size;
StreamOpen:=False;
End;

Function StreamClose(var d:OneStreamRecord):Boolean;
Begin;
StreamClose:=True;
d.InoDat.size:=d.siz;
if WriteInodeData(d.InoNum,d.InoDat) then exit;
StreamClose:=False;
End;

Function StreamRead(var d:OneStreamRecord;siz:Word;var bufdat):Word;
Var
  sd:OneSectorRecord;
  buf:array[1..1] of char absolute bufdat;
  read:LongInt;
  bpb:longint;
  blk:LongInt;
  i,o:LongInt;
Begin;
StreamRead:=0;
i:=d.siz-d.pos;
if (i<0) then i:=0;
if (siz>i) then siz:=i;
bpb:=sizeof(sd)*BlockSiz;
blk:=0;
read:=0;
while (siz>0) do begin;
  if (blk<1) then begin;
    blk:=GetBlkNumOfStream(d.inoDat,1+d.pos div bpb);
    if (blk<1) then exit;
    blk:=blk*BlockSiz;
    end;
  i:=d.pos mod bpb;
  o:=sizeof(sd);
  if (DriveRead(blk+(i div o),sd)<>0) then exit;
  i:=i mod o;
  o:=o-i;
  if (o>siz) then o:=siz;
  move(sd[i+1],buf[read+1],o);
  inc(d.pos,o);
  inc(read,o);
  dec(siz,o);
  if (d.pos mod bpb=0) then blk:=0;
  end;
StreamRead:=read;
End;

Function StreamWrite(var d:OneStreamRecord;siz:Word;var bufdat):Word;
Var
  sd:OneSectorRecord;
  id:OneInodeDataRecord absolute sd;
  buf:array[1..1] of char absolute bufdat;
  written:LongInt;
  bpb:longint;
  blk:LongInt;
  i,o,p:LongInt;
Begin;
StreamWrite:=0;
if (siz=0) then exit;
bpb:=sizeof(sd)*BlockSiz;
id:=d.inoDat;
blk:=(d.pos+longint(siz)+bpb-1) div bpb;
while (GetBlkNumOfStream(d.inoDat,blk)<1) do begin;
  if AppendOneBlockToInode(d.inoDat) then exit;
  end;
if CompareBinaryData(id,d.inoDat,sizeof(id)) then begin;
  if WriteInodeData(d.inoNum,d.inoDat) then exit;
  end;
blk:=0;
written:=0;
while (siz>0) do begin;
  if (blk<1) then begin;
    blk:=GetBlkNumOfStream(d.inoDat,1+d.pos div bpb);
    if (blk<1) then exit;
    blk:=blk*BlockSiz;
    end;
  i:=d.pos mod bpb;
  o:=sizeof(sd);
  p:=blk+(i div o);
  if (DriveRead(p,sd)<>0) then exit;
  i:=i mod o;
  o:=o-i;
  if (o>siz) then o:=siz;
  move(buf[written+1],sd[i+1],o);
  if (DriveWrite(p,sd)<>0) then exit;
  inc(d.pos,o);
  inc(written,o);
  dec(siz,o);
  if (d.pos mod bpb=0) then blk:=0;
  end;
if (d.pos>d.siz) then d.siz:=d.pos;
StreamWrite:=written;
End;

Function StreamTruncate(var d:OneStreamRecord):Boolean;
Var
  id:OneInodeDataRecord;
  i,o,p:LongInt;
Begin;
StreamTruncate:=True;
i:=sizeof(OneSectorRecord)*BlockSiz;
id:=d.inoDat;
p:=(d.pos+i-1) div i;
inc(p);
while (GetBlkNumOfStream(d.inoDat,p)>0) do begin;
  if KillLastBlockFromInode(d.inoDat) then exit;
  end;
if CompareBinaryData(id,d.inoDat,sizeof(id)) then begin;
  if WriteInodeData(d.inoNum,d.inoDat) then exit;
  end;
d.siz:=d.pos;
StreamTruncate:=False;
End;
