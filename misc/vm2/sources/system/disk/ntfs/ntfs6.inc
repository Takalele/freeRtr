Function DoDataFreeupThing(var f1,f2,f3:OneFileRecordType;mft,atr:LongInt):Boolean;
Begin;
DoDataFreeupThing:=True;
if (mft<16) then Exit;
if OpenOneMFTfile(mft,f2,1) then Exit;
if FindOneAttribute(f2,f1,atr,2) then Exit;
if TruncateRunsListBySome(f1,f2,f3,0,1,3) then Exit;
if CloseOneMFTfile(f1) then Exit;
DoDataFreeupThing:=False;
End;

Function DoFileFreeupThing(var f1,f2:OneFileRecordType;mft:LongInt):Boolean;
Var
  hdr:OneMFTfileHeader;
  i:LongInt;
Begin;
DoFileFreeupThing:=True;
if (mft<16) then Exit;
if OpenOneMFTfile(0,f2,1) then Exit;
if FindOneAttribute(f2,f1,$b0,2) then Exit;
if WriteOneBitmapStatus(f1,mft,0) then Exit;
mft:=mft*FileRecSize*512;
if OpenOneMFTfile(0,f2,1) then Exit;
if FindOneAttribute(f2,f1,$80,2) then Exit;
f1.datPos:=mft;
if BufferReadStreamData(BufferData[3],f1,FileRecSize) then exit;
if BufferValidateData(BufferData[3],FileRecSize,4,6) then exit;
move(BufferData[3],hdr,sizeof(hdr));
hdr.flags:=0;
hdr.LinkCount:=0;
hdr.RealSize:=hdr.AttribPos;
for i:=hdr.AttribPos+1 to FileRecSize*512 do BufferData[3][i]:=0;
i:=-1;
move(hdr,BufferData[3],sizeof(hdr));
move(i,BufferData[3][hdr.AttribPos+1],sizeof(i));
f1.datPos:=mft;
if BufferReValidyData(BufferData[3],FileRecSize,4,6) then exit;
if BufferWriteStreamData(BufferData[3],f1,FileRecSize) then exit;
DoFileFreeupThing:=False;
End;

Function DoDeleteOneFile(Var dir:OneDirectoryDescRecord;a:String):Byte;
Label f1,f2;
Var
  dir2,dir3:OneDirectoryDescRecord;
  ntry:OneDirectoryEntryRecord;
Begin;
DoDeleteOneFile:=1;
if FindEntryInDirectory(a,dir,dir2,ntry,2) then Exit;
if ntry.dir then Exit;
DoDataFreeupThing(dir.fil,dir2.fil,dir3.fil,ntry.mft,$80);
DoFileFreeupThing(dir.fil,dir2.fil,ntry.mft);
if DeleteEntryFromDirectory(dir.mft,a) then Exit;
DoDeleteOneFile:=0;
End;

Function DoDeleteOneDir(Var dir:OneDirectoryDescRecord;a:String):Byte;
Var
  dir2,dir3:OneDirectoryDescRecord;
  ntry,ntry2:OneDirectoryEntryRecord;
Begin;
DoDeleteOneDir:=1;
if FindEntryInDirectory(a,dir,dir2,ntry,2) then Exit;
if not ntry.dir then Exit;
if OpenOneMFTfile(ntry.mft,dir3.fil,1) then Exit;
dir3.mft:=ntry.mft;
dir3.pos:=0;
dir3.rot:=true;
while not FindNextDirEntry(dir3,dir2,ntry2,2) do begin;
  if (ntry2.nam<>'') then Exit;
  end;
DoDataFreeupThing(dir.fil,dir2.fil,dir3.fil,ntry.mft,$a0);
DoFileFreeupThing(dir.fil,dir2.fil,ntry.mft);
if DeleteEntryFromDirectory(dir.mft,a) then Exit;
DoDeleteOneDir:=0;
End;

Function DoRenameOneFile(sMft,tMft:LongInt;sNam,tNam:String):Byte;
Var
  dir1,dir2,dir3:OneDirectoryDescRecord;
  ntry1,ntry2:OneDirectoryEntryRecord;
Begin;
DoRenameOneFile:=1;
if OpenOneMFTfile(sMft,dir1.fil,1) then Exit;
dir1.mft:=sMft;
if FindEntryInDirectory(sNam,dir1,dir2,ntry1,2) then Exit;
if OpenOneMFTfile(tMft,dir1.fil,1) then Exit;
dir1.mft:=tMft;
if not FindEntryInDirectory(tNam,dir1,dir2,ntry2,2) then Exit;
if AddOneEntryToDirectory(tMft,ntry1.mft,ntry1.siz,ntry1.dir,tNam) then Exit;
if DeleteEntryFromDirectory(sMft,sNam) then Exit;
DoRenameOneFile:=0;
End;

Function DoInsertOneEntry(Var dir:OneDirectoryDescRecord;typ:Boolean;nam:String):Byte;
Var
  mft:LongInt;
  dir2,dir3:OneDirectoryDescRecord;
  ntry:OneDirectoryEntryRecord;
  hdr:OneMFTfileHeader;
  rhd:OneINDXrootHdrRecord;
  a:String;
  i,o,p:LongInt;
Begin;
DoInsertOneEntry:=1;
if not FindEntryInDirectory(nam,dir,dir2,ntry,2) then Exit;
mft:=FindOneEmptyMftRec(dir2.fil,dir3.fil,2,3);
if (mft<0) then Exit;
p:=mft*FileRecSize*512;
if OpenOneMFTfile(0,dir2.fil,1) then Exit;
if FindOneAttribute(dir2.fil,dir3.fil,$80,2) then Exit;
dir3.fil.datPos:=p;
if BufferReadStreamData(BufferData[3],dir3.fil,FileRecSize) then exit;
if BufferValidateData(BufferData[3],FileRecSize,4,6) then exit;
move(BufferData[3],hdr,sizeof(hdr));
hdr.magic:=$454c4946;
hdr.UpdatePos:=sizeof(hdr);
hdr.LogSeqNum:=0;
hdr.LogSeqNum_hi:=0;
inc(hdr.SequNum);
i:=16+sizeof(hdr)+FileRecSize*2;
hdr.AttribPos:=(i+15) and (-16);
hdr.flags:=(typ*2) or 1;
hdr.LinkCount:=1;
hdr.RealSize:=hdr.AttribPos+8;
hdr.AlldSize:=FileRecSize*512;
hdr.BaseFileNum:=dir.mft;
hdr.BaseFileNum_hi:=0;
hdr.NextAttribId:=0;
hdr.MyNumber:=mft;
for i:=hdr.AttribPos+1 to hdr.AlldSize do BufferData[3][i]:=0;
i:=-1;
move(hdr,BufferData[3],sizeof(hdr));
move(i,BufferData[3][hdr.AttribPos+1],sizeof(i));
dir3.fil.datPos:=p;
if BufferReValidyData(BufferData[3],FileRecSize,4,6) then exit;
if BufferWriteStreamData(BufferData[3],dir3.fil,FileRecSize) then exit;
if OpenOneMFTfile(mft,dir2.fil,1) then Exit;
if typ then begin;
  fillchar(rhd,sizeof(rhd),0);
  a[0]:=chr(sizeof(rhd));
  rhd.attrib:=0;
  rhd.collat:=0;
  rhd.EntrySize:=length(a)+16;
  rhd.ClustPerRec:=IndxRecSize;
  rhd.firstOfs:=length(a);
  rhd.RealSize:=16;
  rhd.AllcSize:=16;
  rhd.flags:=0;
  move(rhd,a[1],sizeof(rhd));
  a:=a+#255#255#255#255#255#255#255#255#0#0#0#0#0#0#0#0;
  if AddAttributeToFileRec(dir2.fil,$90,true,a) then Exit;
  end else begin;
  if AddAttributeToFileRec(dir2.fil,$80,false,#0#0#0#0#0#0#0#0) then Exit;
  end;
if CloseOneMFTfile(dir2.fil) then Exit;
if OpenOneMFTfile(0,dir2.fil,1) then Exit;
if FindOneAttribute(dir3.fil,dir2.fil,$b0,2) then Exit;
if WriteOneBitmapStatus(dir3.fil,mft,1) then Exit;
if AddOneEntryToDirectory(dir.mft,mft,0,typ,nam) then Exit;
DoInsertOneEntry:=0;
End;



Function ChangeDir(nd:String;var dir:OneDirectoryDescRecord):String;
Label f1,f2;
Var
  s,a:String;
  i,o:Byte;
Begin;
ChangeDir:='';
s:=CurPath;
delete(s,1,3);
if (copy(nd,2,1)=':') then delete(nd,1,2);
if (copy(nd,1,1)='\') then begin; s:='';delete(nd,1,1); end;
f1:
if (Length(s)>250) then Exit;
if (nd='') then goto f2;
i:=pos('\',nd);
if (i=0) then i:=length(nd)+1;
a:=copy(nd,1,i-1);
delete(nd,1,i);
if (a='') then Exit;
if (a='..') then begin;
  s:=copy(s,1,length(s)-1);
  o:=0;for i:=1 to length(s) do if (s[i]='\') then o:=i;
  s:=Copy(s,1,o);
  goto f1;
  end;
if (a='.') then goto f1;
if (a[1]='.') then Exit;
s:=s+Kicsi(a)+'\';
goto f1;
f2:
if SelectOneDirectory(s,dir) then Exit;
ChangeDir:=driveLetter+':\'+s;
End;

Function GetNameAndChgDir(b:String;var dir:OneDirectoryDescRecord):String;
Var
  a:String;
  i,o:Byte;
  ntry:OneDirectoryEntryRecord;
Begin;
GetNameAndChgDir:='';
o:=0;
for i:=1 to Length(b) do if (b[i]='\') then o:=i;
a:=copy(b,1,o);
delete(b,1,o);
a:=ChangeDir(a,dir);
if (a='') then Exit;
CurPath:=a;
GetNameAndChgDir:=b;
End;


Function ReadUpMftListFromDisk:Boolean;
Var
  f1,f2:OneFileRecordType;
  rl:OneRunsListRecord;
Begin;
ReadUpMftListFromDisk:=True;
MftDat.n:=1;
MftDat.d[1].b:=MftCluster;
MftDat.d[1].s:=$ffffff;
if OpenOneMFTfile(0,f1,1) then Exit;
if FindOneAttribute(f1,f2,$80,2) then Exit;
if DecodeRunsListInMFT(f2,rl) then Exit;
MftDat:=rl;
ReadUpMftListFromDisk:=False;
End;
