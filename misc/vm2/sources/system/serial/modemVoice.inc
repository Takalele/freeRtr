Const
  ScriptVariableMax=16;
Var
  debugScriptCmd:Boolean;
  LastConnectStr:String;
  WorkingDirectory:String;
  WorkingExtension:String;
  CurrentFileNam:String;
  LastStatus:LongInt; {0=ok, 1=error, 2=ring, 3=connect}
  LogFileName:String;
  ScriptVariableDat:array[1..ScriptVariableMax] of String;
  ScriptTimer:LongInt;
  ScriptFile:xtText;



Procedure executeProtocol(a,b:String);
Label f1,f2,vege;
Var
  ab:array[0..1] of byte absolute a;
  ab0:byte absolute a;
  pid,con,chn:LongInt;
  run:Boolean;
  buf:array[1..1024] of byte;
  i,o,p:LongInt;
Begin;
chn:=0;
if (pipeLineBegListen<>0) then begin;
  WriteLn('failed to start listening!');
  goto vege;
  end;
if (xExecInside(a,b,pid,con)<>0) then begin;
  WriteLn('failed to create process!');
  goto vege;
  end;
f1:
relequish;
if not BugOS_ProcessExists(pid) then begin;
  pipeLineEndListen;
  WriteLn('process exited without pipeline!');
  goto vege;
  end;
if (pipeLineGetIncoming(chn)<>0) then goto f1;
pipeLineStats(chn,o,i,i);
if (o<>pid) then begin;
  pipeLineClose(chn);
  goto f1;
  end;
pipeLineEndListen;
WriteLn('running...');
run:=true;
f2:
relequish;
i:=250;
if (pipeLineRecv(con,a[1],i)<>0) then i:=0;
if (i>0) then begin;
  ab0:=i;
  Write(a);
  end;
pipeLineStats(chn,i,o,p);
if (i=0) then begin;
  WriteLn('protocol closed pipeline!');
  run:=false;
  end;
if (p>256) then begin;
  if (p>sizeof(buf)) then p:=sizeof(buf);
  if (pipeLineRecv(serialData,buf,p)<>0) then p:=0;
  if (p>0) then pipeLineSend(chn,buf,p);
  end;
pipeLineStats(serialData,i,o,p);
if (i=0) then begin;
  WriteLn('line closed pipeline!');
  run:=false;
  end;
if (p>256) then begin;
  if (p>sizeof(buf)) then p:=sizeof(buf);
  if (pipeLineRecv(chn,buf,p)<>0) then p:=0;
  if (p>0) then pipeLineSend(serialData,buf,p);
  end;
if run then goto f2;
vege:
pipeLineClose(con);
pipeLineClose(chn);
BugOS_KillProcess(pid);
End;


Function ReadLnBinary(tim,max:LongInt;keys:String;display:Boolean):Byte; {0=key, 1=max, 2=time}
Label f1,f2;
Var
  beg:LongInt;
  s:String;
  c:Char;
  b:Byte absolute c;
  i,o:LongInt;
Begin;
ReadLnBinary:=255;
ModemLastReadLn:='';
s:='';
timer2start;
beg:=CurrentTime;
f1:
timer2start;
if (GetTimePast(beg)>tim) then begin;
  ReadLnBinary:=2;
  clrEol;
  exit;
  end;
while keypressed do begin;
  i:=ReadKey;
  if (i and $fe00<>0) then continue;
  b:=i;
  goto f2;
  end;
i:=sizeof(c);
pipeLineRecv(serialData,c,i);
if (i<1) then begin;
  pipeLineStats(serialData,o,i,i);
  if (o=0) then immErr('serial driver closed connection!');
  relequish;
  goto f1;
  end;
f2:
if (pos(c,keys)<>0) then begin;
  ReadLnBinary:=0;
  clrEol;
  exit;
  end;
ModemLastReadLn:=copy(ModemLastReadLn+c,length(ModemLastReadLn)-250,255);
if display then pipeLineSend(serialData,c,sizeof(c));
if (b<32) then b:=$2e;
s:=copy(s+c,length(s)-50,255);
Write(#13+'read: '+s+#13);
if (length(ModemLastReadLn)>=max) then begin;
  ReadLnBinary:=1;
  clrEol;
  exit;
  end;
goto f1;
End;

Procedure WriteBinary(a:String);
Begin;
pipeLineSend(serialData,a[1],length(a));
End;



Function GetDateTime2string(m:byte):String; {1-date, 2-time}
Var
  w1,w2,w3:Word;
  a:String;
function x(w:word):string; begin; x:=Right('00'+BStr(w),2); end;
Begin;
a:='';
m:=m and 3;
if (m and 1<>0) then begin;
  xGetDate(w1,w2,w3);
  a:=a+BStr(w1)+'-'+x(w2)+'-'+x(w3);
  end;
if (m and 3=3) then a:=a+' ';
if (m and 2<>0) then begin;
  xGetTime(w1,w2,w3);
  a:=a+x(w1)+':'+x(w2)+':'+x(w3);
  end;
GetDateTime2string:=a;
End;

Function searchForAnotherFile(mode:byte):String; {1=prev, 2=next, 3=new}
Label f1,f2,f3;
Var
  sr:xDirEntryRec;
  f:xFile;
  a,b,c:String;
  ab:array[0..1] of byte absolute a;
  ab0:byte absolute ab;
  prv,nxt:String;
  saw:Boolean;
  i,o:LongInt;
Begin;
searchForAnotherFile:='';
b:=kicsi(CurrentFileNam);
c:=kicsi(WorkingExtension);
prv:='';
nxt:='';
saw:=(CurrentFileNam='');
if (xDirOpen(f,WorkingDirectory)<>0) then exit;
f1:
if (xDirRead(f,sr)<>0) then goto f2;
a:=kicsi(sr.name);
if (ab0=0) then goto f2;
o:=$600;
for i:=1 to ab0 do if (ab[i]=$2e) then o:=i;
if (copy(a,o,255)<>c) then goto f1;
if saw then begin;
  nxt:=sr.name;
  goto f2;
  end else begin;
  if (a=b) then begin;
    saw:=true;
    goto f1;
    end;
  prv:=sr.name;
  goto f1;
  end;
goto f1;
f2:
xDirClose(f);
case mode of
  3:begin;
    o:=100;
    f3:
    dec(o);
    if (o<0) then exit;
    a:=BStr(random($7fffffff))+'.'+BStr(random($7fffffff))+'.'+BStr(random($7fffffff))+WorkingExtension;
    i:=xCreate(WorkingDirectory+a);
    if (i<>0) then goto f3;
    searchForAnotherFile:=a;
    end;
  1:searchForAnotherFile:=prv;
  2:searchForAnotherFile:=nxt;
  end;
End;



Function GetNextWord(Var str:String):String;
Label f1,f2,f3;
const bad='???';
Var
  i,o:LongInt;
  a,b,c:String;
Begin;
while (copy(str,1,1)=' ') do str:=copy(str,2,255);
if (copy(str,1,1)='"') then begin;
  delete(str,1,1);
  i:=pos('"',str);
  if (i=0) then i:=$100;
  c:=copy(str,1,i-1);
  delete(str,1,i);
  end else begin;
  i:=pos(' ',str);
  if (i=0) then i:=$100;
  c:=copy(str,1,i-1);
  delete(str,1,i);
  i:=pos(';',c);
  if (i<>0) then begin; c:=copy(c,1,i-1);str:=''; end;
  end;
while (copy(str,1,1)=' ') do str:=copy(str,2,255);
if (copy(str,1,1)=';') then str:='';
b:='';
f1:
a:=copy(c,1,1);
delete(c,1,1);
if (a='') then goto f2;
if (a='^') then begin;
  if (c='') then goto f2;
  i:=ord(c[1]);
  delete(c,1,1);
  b:=b+chr(i and $1f);
  goto f1;
  end;
if (a='\') then begin;
  o:=2;a:=copy(c,1,1);
  if (a='\') then begin; b:=b+a;goto f3; end;
  if (a='^') then begin; b:=b+a;goto f3; end;
  if (a='@') then begin; b:=b+'"';goto f3; end;
  if (a='_') then begin; b:=b+' ';goto f3; end;
  o:=pos('\',c)+1;a:=kicsi(copy(c,1,o-2));
  if (a='result') then begin; b:=b+BStr(LastStatus);goto f3; end;
  if (a='goodres') then begin; b:=b+BStr(LastStatus in [0,2,3,4]);goto f3; end;
  if (a='timepast') then begin; timer2start;b:=b+BStr(GetTimePast(ScriptTimer));goto f3; end;
  if (copy(a,1,3)='var') then begin;
    i:=BVal(copy(a,4,255));
    if (i<1) or (i>ScriptVariableMax) then begin; b:=b+bad;goto f3; end;
    b:=b+ScriptVariableDat[i];
    goto f3;
    end;
  if (a='logfile') then begin; b:=b+LogFileName;goto f3; end;
  if (a='workpath') then begin; b:=b+WorkingDirectory;goto f3; end;
  if (a='workextns') then begin; b:=b+WorkingExtension;goto f3; end;
  if (a='currfile') then begin; b:=b+CurrentFileNam;goto f3; end;
  if (a='prevfile') then begin; b:=b+searchForAnotherFile(1);goto f3; end;
  if (a='nextfile') then begin; b:=b+searchForAnotherFile(2);goto f3; end;
  if (a='newfile') then begin; b:=b+searchForAnotherFile(3);goto f3; end;
  if (a='readed') then begin; b:=b+ModemLastReadLn;goto f3; end;
  if (a='readlen') then begin; b:=b+BStr(length(ModemLastReadLn));goto f3; end;
  if (a='connstr') then begin; b:=b+LastConnectStr;goto f3; end;
  if (a='date') then begin; b:=b+GetDateTime2string(1);goto f3; end;
  if (a='time') then begin; b:=b+GetDateTime2string(2);goto f3; end;
  if (a='datim') then begin; b:=b+GetDateTime2string(3);goto f3; end;
  if (a='driver') then begin; b:=b+BStr(serialProc);goto f3; end;
  if (a='port') then begin; b:=b+BStr(serialPort);goto f3; end;
  if (a='voice') then begin; b:=b+BStr(VoiceCommandSet<>0);goto f3; end;
  if (a='mdmbusy') then begin; b:=b+BStr(ModemDtmfBusy);goto f3; end;
  if (a='mdmdial') then begin; b:=b+BStr(ModemDtmfDialTone);goto f3; end;
  if (a='mdmfaxasw') then begin; b:=b+BStr(ModemDtmfAnswerFax);goto f3; end;
  if (a='mdmfaxcal') then begin; b:=b+BStr(ModemDtmfCallingFax);goto f3; end;
  if (a='mdmdatasw') then begin; b:=b+BStr(ModemDtmfAnswerData);goto f3; end;
  if (a='mdmdatcal') then begin; b:=b+BStr(ModemDtmfCallingData);goto f3; end;
  if (a='mdmsilnc') then begin; b:=b+BStr(ModemDtmfSilence);goto f3; end;
  if (a='mdmquiet') then begin; b:=b+BStr(ModemDtmfQuiet);goto f3; end;
  i:=BVal(a);
  if (i<>0) then begin; b:=b+chr(i);goto f3; end;
  if (a='0') then begin; b:=b+#0;goto f3; end;
  o:=1;
  b:=b+bad;
  f3:
  c:=copy(c,o,255);
  goto f1;
  end;
b:=b+a;
goto f1;
f2:
GetNextWord:=b;
End;



Function EvalOneCondition(a,e,b:String):Byte; {0-err, 1-false, 2-true}
Var
  cnd_eq,cnd_gt,cnd_lt,cnd_in:Boolean;
  i:LongInt;
Begin;
EvalOneCondition:=0;
cnd_eq:=false;cnd_gt:=false;cnd_lt:=false;cnd_in:=false;
while (e<>'') do begin;
  case e[1] of
    'n':begin;
      a:=BStr(BVal(a));
      b:=BStr(BVal(b));
      while (length(b)<length(a)) do b:='0'+b;
      while (length(a)<length(b)) do a:='0'+a;
      end;
    'c':begin;
      a:=kicsi(a);
      b:=kicsi(b);
      end;
    '=':cnd_eq:=true;
    '>':cnd_gt:=true;
    '<':cnd_lt:=true;
    '@':cnd_in:=true;
    else exit;
    end;
  e:=copy(e,2,255);
  end;
if cnd_eq then cnd_eq:=(a=b);
if cnd_gt then cnd_gt:=(a>b);
if cnd_lt then cnd_lt:=(a<b);
if cnd_in then cnd_in:=(pos(a,b)<>0);
EvalOneCondition:=(cnd_eq or cnd_gt or cnd_lt or cnd_in)+1;
End;



Function EvalOneCalculation(var s:String;child:boolean):String;
Var
  a:String;
  i:LongInt;

Function getNum(var i:LongInt):Boolean;
Label f1;
Begin;
getNum:=True;
a:=GetNextWord(s);
if (a<>'(') then begin;
  i:=BVal(a);
  goto f1;
  end;
a:=EvalOneCalculation(s,true);
if (a='') then exit;
i:=BVal(a);
f1:
getNum:=False;
End;

Label f1,f2;
Var o,p,q:longInt;
Begin;
EvalOneCalculation:='';
if getNum(q) then exit;
f1:
if (s='') then begin;
  f2:
  EvalOneCalculation:=BStr(q);
  exit;
  end;
a:=GetNextWord(s);
if child then if (a=')') then goto f2;
o:=0;
if (a='=') then o:=1;
if (a='<') then o:=2;
if (a='>') then o:=3;
if (a='<>') or (a='!=') then o:=4;
if (o>0) then begin;
  a:=EvalOneCalculation(s,child);
  if (a='') then exit;
  p:=BVal(a);
  case o of
    1:q:=(q=p);
    2:q:=(q<p);
    3:q:=(q>p);
    4:q:=(q<>p);
    else exit;
    end;
  goto f2;
  end;
o:=0;
if (a='+') or (a='add') then o:=1;
if (a='-') or (a='sub') then o:=2;
if (a='&') or (a='and') then o:=3;
if (a='|') or (a='or') then o:=4;
if (a='^') or (a='xor') then o:=5;
if (a='*') or (a='mul') then o:=6;
if (a='/') or (a='div') then o:=7;
if (a='%') or (a='mod') then o:=8;
if (a='<<') or (a='shr') then o:=9;
if (a='>>') or (a='shl') then o:=10;
if (o<1) then exit;
if getNum(p) then exit;
case o of
  1:q:=q+p;
  2:q:=q-p;
  3:q:=q and p;
  4:q:=q or p;
  5:q:=q xor p;
  6:q:=q*p;
  7:begin; if (p=0) then exit;q:=q div p; end;
  8:begin; if (p=0) then exit;q:=q mod p; end;
  9:q:=q shr p;
  10:q:=q shl p;
  else exit;
  end;
goto f1;
End;




Procedure PrintError(a:String);
Begin;
TextColor($0c);
WriteLn(a);
TextColor($07);
LastStatus:=1;
End;

Procedure PrintLogged(a:String);
Var t:xtText;
Begin;
if (LogFileName='') then exit;
if (xtOpen(t,LogFileName,false)<>0) then exit;
xtWriteLn(t,a);
xtClose(t);
End;




Procedure RunOneScript(fn:String);
Label f1,f2,f3,f4;
Const gosubMax=16;
Var
  gosubDat:array[1..gosubMax] of LongInt;
  gosubNum:Byte;
  fh:xtText;
  fl,fp:LongInt;
  a,b,c:String;
  i,o,p:LongInt;
  w:Word;

Function findLabel(a:String):Boolean;
Var
  c:String;
  p:LongInt;
Begin;
findLabel:=True;
if (a='') then exit;
xtSetPos(fh,0);
p:=0;
a:=kicsi(a)+':';
while not xtEOF(fh) do begin;
  inc(p);
  c:=xtReadLn(fh,255);
  if (kicsi(GetNextWord(c))<>a) then continue;
  findLabel:=False;
  fl:=p;
  exit;
  end;
End;

Begin;
gosubNum:=0;
if (xtOpen(fh,fn,true)<>0) then begin;
  PrintLogged('error opening '+fn+'!');
  PrintError('error opening '+fn+'!');
  exit;
  end;
fl:=0;
f1:
if xtEOF(fh) then begin; a:='eof encountered!';goto f2; end;
fp:=xtGetPos(fh);
inc(fl);
c:=xtReadLn(fh,255);
f3:
a:=kicsi(GetNextWord(c));
if (a='') then goto f1;
if debugScriptCmd then begin;
  TextColor($08);
  WriteLn(a+' '+c);
  TextColor($07);
  end;
if (a='quit') then begin;
  LastStatus:=BVal(GetNextWord(c));
  xtClose(fh);
  exit;
  end;
if (a='debugmode') then begin;
  i:=BVal(GetNextWord(c));
  debugScriptCmd:=(i and $01<>0);
  ModemShow:=(i and $02<>0);
  goto f1;
  end;
if (a='echo') then begin;
  a:=GetNextWord(c);
  TextColor($0f);
  WriteLn(a);
  TextColor($07);
  PrintLogged(a);
  goto f1;
  end;
if (a='scriptfile') then begin;
  a:=GetNextWord(c);
  ModemLastReadLn:=a;
  RunOneScript(a);
  goto f1;
  end;
if (a='modemcommand') then begin;
  LastStatus:=1;
  a:=GetNextWord(c);
  if ModemDoCmd(a,a) then goto f1;
  if (ModemTestResponse(a)<>0) then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='waitsometime') then begin;
  o:=BVal(GetNextWord(c));
  timer2start;i:=CurrentTime;
  while (GetTimePast(i)<o) do begin; relequish;timer2start; end;
  goto f1;
  end;
if (a='clearinputbuf') then begin;
  ModemFlushReceiver;
  goto f1;
  end;
if (a='cleardetect') then begin;
  ClearDetectModem;
  goto f1;
  end;
if (a='modemdevice') then begin;
  a:=kicsi(GetNextWord(c));
  i:=-1;
  case VoiceCommandSet of
    1:begin;
      if (a='linemute') then i:=0;
      if (a='phone') then i:=1;
      if (a='speaker') then i:=2;
      if (a='microphone') then i:=3;
      if (a='line') then i:=4;
      end;
    2:begin;
      if (a='line') then i:=3;
      if (a='phone') then i:=2;
      if (a='microphone') then i:=8;
      if (a='speaker') then i:=6;
      end;
    end;
  if (i>=0) then a:=bstr(i);
  i:=BVal(a);
  if (BStr(i)<>a) then goto f1
  VoiceDeviceSel:=i;
  goto f1;
  end;
if (a='setportline') then begin;
  i:=BVal(GetNextWord(c));
  if (i<1) then goto f1;
  serialBuff[2]:=i;
  serialBuff[3]:=0;
  i:=BVal(GetNextWord(c));
  if (i<1) then i:=8;
  serialBuff[4]:=i;
  i:=BVal(GetNextWord(c));
  if (i<1) then i:=0;
  serialBuff[5]:=i;
  i:=BVal(GetNextWord(c));
  if (i<1) then i:=1;
  serialBuff[6]:=i;
  serialBuff[7]:=0;
  serialBuff[1]:=5;serialCmd(7);
  goto f1;
  end;
if (a='setportflow') then begin;
  serialBuff[2]:=BVal(GetNextWord(c));
  serialBuff[1]:=7;serialCmd(2);
  goto f1;
  end;
if (a='setportmodem') then begin;
  serialBuff[2]:=BVal(GetNextWord(c));
  serialBuff[1]:=3;serialCmd(2);
  goto f1;
  end;
if (a='portclose') then begin;
  SerialClose;
  for i:=1 to 32 do relequish;
  goto f1;
  end;
if (a='portopen') then begin;
  SerialClose;
  for i:=1 to 32 do relequish;
  SerialOpen;
  for i:=1 to 32 do relequish;
  goto f1;
  end;
if (a='modemwaitring') then begin;
  LastStatus:=1;
  if Wait4ringModem then goto f1;
  LastStatus:=2;
  goto f1;
  end;
if (a='modemanswer') then begin;
  LastStatus:=1;
  o:=BVal(GetNextWord(c));
  if (o<1) then o:=60;
  ModemSendCommand('ATA');
  if ModemWaitConnected(a,o) then goto f1;
  LastStatus:=3;
  LastConnectStr:=a;
  goto f1;
  end;
if (a='modemdial') then begin;
  LastStatus:=1;
  a:=GetNextWord(c);
  o:=BVal(GetNextWord(c));
  if (o<1) then o:=60;
  ModemSendCommand('ATD'+a);
  if ModemWaitConnected(a,o) then goto f1;
  LastStatus:=3;
  LastConnectStr:=a;
  goto f1;
  end;
if (a='modemhangup') then begin;
  LastStatus:=1;
  o:=BVal(GetNextWord(c));
  if (o<1) then o:=1;
  while ModemDisconnectNow('ATH',10) do begin;
    dec(o);
    if (o<0) then goto f1;
    end;
  LastStatus:=0;
  goto f1;
  end;
if (a='modemreset') then begin;
  LastStatus:=1;
  if ReSetModem then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='modemdatamode') then begin;
  LastStatus:=1;
  if DataModeModem then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='modemrecord') then begin;
  LastStatus:=1;
  a:=GetNextWord(c);
  i:=BVal(GetNextWord(c));
  b:=GetNextWord(c);
  if (i<1) then i:=1;
  if RecordModem(a,i,b) then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='modemplay') then begin;
  LastStatus:=1;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  if PlayModem(a,b) then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='modemrecplay') then begin;
  LastStatus:=1;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  i:=BVal(GetNextWord(c));
  GetNextWord(c);
  if (i<1) then i:=1;
  if RecPlayModem(a,b,i,GetNextWord(c)) then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='modembeep') then begin;
  LastStatus:=1;
  a:=GetNextWord(c);
  i:=BVal(GetNextWord(c));
  if BeepModem(a,i) then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='modemreadln') then begin;
  LastStatus:=1;
  i:=BVal(GetNextWord(c));
  o:=BVal(GetNextWord(c));
  b:=GetNextWord(c);
  if (o=0) then o:=$200;
  if ReadLnModem(i,o,b) then goto f1;
  LastStatus:=0;
  goto f1;
  end;
if (a='setcurrentdir') then begin;
  b:=GetNextWord(c);
  if (copy(b,length(b),1)<>'\') then b:=b+'\';
  WorkingDirectory:=b;
  goto f1;
  end;
if (a='setlogfile') then begin;
  LogFileName:=GetNextWord(c);
  xCreate(LogFileName);
  goto f1;
  end;
if (a='setcurrentext') then begin;
  WorkingExtension:=GetNextWord(c);
  goto f1;
  end;
if (a='setcurrentfile') then begin;
  CurrentFileNam:=GetNextWord(c);
  goto f1;
  end;
if (a='setconnectstr') then begin;
  LastConnectStr:=GetNextWord(c);
  goto f1;
  end;
if (a='setlastresult') then begin;
  LastStatus:=BVal(GetNextWord(c));
  goto f1;
  end;
if (a='setlastreaded') then begin;
  ModemLastReadLn:=GetNextWord(c);
  goto f1;
  end;
if (copy(a,1,11)='setvariable') then begin;
  i:=BVal(copy(a,12,255));
  if (i<1) or (i>ScriptVariableMax) then goto f4;
  ScriptVariableDat[i]:=GetNextWord(c);
  goto f1;
  end;
if (copy(a,1,12)='calcvariable') then begin;
  i:=BVal(copy(a,13,255));
  if (i<1) or (i>ScriptVariableMax) then goto f4;
  ScriptVariableDat[i]:=EvalOneCalculation(c,false);
  goto f1;
  end;
if (a='scriptcommand') then begin;
  c:=GetNextWord(c);
  goto f3;
  end;
if (a='goto') then begin;
  a:=GetNextWord(c);
  if findLabel(a) then begin; a:='label not found: '+a;goto f2; end;
  goto f1;
  end;
if (a='gosub') then begin;
  inc(gosubNum);
  if (gosubNum>gosubMax) then begin; a:='gosub stack overflow!';goto f2; end;
  gosubDat[gosubNum]:=fl;
  a:=GetNextWord(c);
  if findLabel(a) then begin; a:='label not found: '+a;goto f2; end;
  goto f1;
  end;
if (a='return') then begin;
  if (gosubNum<1) then begin; a:='gosub stack underflow!';goto f2; end;
  xtSetPos(fh,0);
  fl:=gosubDat[gosubNum];
  for i:=1 to fl do xtReadLn(fh,255);
  dec(gosubNum);
  goto f1;
  end;
if (copy(a,length(a),255)=':') then goto f1;
if (a='if') then begin;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  i:=EvalOneCondition(a,b,GetNextWord(c));
  if (kicsi(GetNextWord(c))<>'then') then begin; a:='then expected!';goto f2; end;
  case i of
    1:goto f1; {false}
    2:goto f3; {true}
    end;
  a:='error in condition!';
  goto f2;
  end;
if (a='while') then begin;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  i:=EvalOneCondition(a,b,GetNextWord(c));
  if (kicsi(GetNextWord(c))<>'do') then begin; a:='do expected!';goto f2; end;
  case i of
    2:begin; {true}
      xtSetPos(fh,fp);
      dec(fl);
      goto f3;
      end;
    1:goto f1; {false}
    end;
  a:='error in condition!';
  goto f2;
  end;
if (a='exec') then begin;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  if (xExec(a,b,w)<>0) then begin; a:='error executing '+a+'!';goto f2; end;
  LastStatus:=w;
  goto f1;
  end;
if (a='execbg') then begin;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  if (xExecBgnd(a,b,p)<>0) then begin; a:='error executing '+a+'!';goto f2; end;
  LastStatus:=p;
  goto f1;
  end;
if (a='execpr') then begin;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  executeProtocol(a,b);
  goto f1;
  end;
if (a='binaryreadln') then begin;
  i:=BVal(GetNextWord(c));
  o:=BVal(GetNextWord(c));
  b:=GetNextWord(c);
  p:=BVal(GetNextWord(c));
  if (o=0) then o:=$200;
  ReadLnBinary(i,o,b,(p=0));
  goto f1;
  end;
if (a='binarywrite') then begin;
  b:=GetNextWord(c);
  WriteBinary(b);
  goto f1;
  end;
if (a='starttimer') then begin;
  timer2start;
  ScriptTimer:=CurrentTime;
  goto f1;
  end;
if (a='erasefile') then begin;
  a:=GetNextWord(c);
  LastStatus:=xErase(a);
  goto f1;
  end;
if (a='createfile') then begin;
  a:=GetNextWord(c);
  LastStatus:=xCreate(a);
  goto f1;
  end;
if (a='renamefile') then begin;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  LastStatus:=xRename(a,b);
  goto f1;
  end;
if (a='openfiler') then begin;
  xtClose(ScriptFile);
  LastStatus:=xtOpen(ScriptFile,GetNextWord(c),true);
  goto f1;
  end;
if (a='openfilew') then begin;
  xtClose(ScriptFile);
  LastStatus:=xtOpen(ScriptFile,GetNextWord(c),false);
  goto f1;
  end;
if (a='closefile') then begin;
  LastStatus:=0;
  xtClose(ScriptFile);
  goto f1;
  end;
if (a='readfile') then begin;
  LastStatus:=xtEOL(ScriptFile);
  ModemLastReadLn:=xtRead(ScriptFile,255);
  goto f1;
  end;
if (a='readlnfile') then begin;
  LastStatus:=xtEOF(ScriptFile);
  ModemLastReadLn:=xtReadLn(ScriptFile,255);
  goto f1;
  end;
if (a='writefile') then begin;
  LastStatus:=0;
  xtWrite(ScriptFile,GetNextWord(c));
  goto f1;
  end;
if (a='writelnfile') then begin;
  LastStatus:=0;
  xtWriteLn(ScriptFile,GetNextWord(c));
  goto f1;
  end;
if (a='stringunplug') then begin;
  a:=GetNextWord(c);
  while (1=1) do begin;
    i:=pos(#8,a);
    if (i<1) then break;
    delete(a,i-1,2);
    end;
  kicserel(#0,' ',a);
  kicserel(#255,' ',a);
  a:=' '+a+' ';
  kicserel('  ',' ',a);
  ModemLastReadLn:=copy(a,2,length(a)-2);
  goto f1;
  end;
if (a='stringsearch') then begin;
  a:=GetNextWord(c);
  b:=GetNextWord(c);
  LastStatus:=Pos(a,b);
  goto f1;
  end;
if (a='stringgetpart') then begin;
  a:=GetNextWord(c);
  i:=BVal(GetNextWord(c));
  o:=BVal(GetNextWord(c));
  ModemLastReadLn:=copy(a,i,o);
  goto f1;
  end;
if (a='stringlength') then begin;
  LastStatus:=Length(GetNextWord(c));
  goto f1;
  end;
if (a='stringlower') then begin;
  ModemLastReadLn:=kicsi(GetNextWord(c));
  goto f1;
  end;
if (a='stringupper') then begin;
  ModemLastReadLn:=nagy(GetNextWord(c));
  goto f1;
  end;

f4:
a:='unknown command: '+a;
f2:
xtClose(fh);
PrintLogged('script error: '+fn+' '+BStr(fl));
PrintError('script error');
PrintError('  file: '+fn);
PrintError('  line: '+BStr(fl));
PrintError('  error: '+a);
End;
